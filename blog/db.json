{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/matery/source/css/barrager.css","path":"css/barrager.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/bb.css","path":"css/bb.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/gallery.css","path":"css/gallery.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/icp.png","path":"medias/icp.png","modified":1,"renderable":1},{"_id":"themes/matery/source/js/crypto-js.js","path":"js/crypto-js.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/matery/source/js/gallery-encrypt.js","path":"js/gallery-encrypt.js","modified":1,"renderable":1},{"_id":"themes/matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":1,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/Meting.min.js","path":"libs/aplayer/Meting.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/fancybox/fancybox.js","path":"libs/fancybox/fancybox.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/fancybox/jquery.fancybox.css","path":"libs/fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/justifiedGallery/justifiedGallery.min.css","path":"libs/justifiedGallery/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/justifiedGallery/justifiedGallery.min.js","path":"libs/justifiedGallery/justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery-3.6.0.min.js","path":"libs/jquery/jquery-3.6.0.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/mermaid/mermaid.js","path":"libs/mermaid/mermaid.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/mermaid/mermaid.min.css","path":"libs/mermaid/mermaid.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/mermaid/mermaid.min.js","path":"libs/mermaid/mermaid.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/waline/Waline.min.js","path":"libs/waline/Waline.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/images/01.jpg","path":"medias/images/01.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/images/02.jpg","path":"medias/images/02.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/images/03.jpg","path":"medias/images/03.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/sakura-half.js","path":"libs/others/sakura-half.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/TencentCaptcha.js","path":"libs/others/TencentCaptcha.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/sakura.js","path":"libs/others/sakura.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/star.js","path":"libs/others/star.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/sakura-reduce.js","path":"libs/others/sakura-reduce.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/sakura-small.js","path":"libs/others/sakura-small.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/all.min.css","path":"libs/awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/flink的CDC技术.md","hash":"884a9afec118b0d24b1925485a628ac118500a72","modified":1640850469722},{"_id":"source/_posts/一月杂项.md","hash":"f235f13a1dbe7dd1f60dd739da1b6238cd12c990","modified":1642907435658},{"_id":"source/_posts/拉链表.md","hash":"643421cde192fb20aba1617d8f7f64a273f29335","modified":1643182411431},{"_id":"source/_posts/hexo搭建.md","hash":"6b515aa02da5ef18ec9922a96d66f821149a3419","modified":1642644932247},{"_id":"source/_posts/大数据常用命令.md","hash":"b7849e4bd295a96a89300b9b2414fae76e914ccd","modified":1642907464309},{"_id":"source/_posts/数据仓库.md","hash":"3fd89a41534a32f38680a720af3ffa6b40b0780f","modified":1642907490608},{"_id":"source/_posts/事实表的类型.md","hash":"3216a4e62ffc5b01afc6b5926e693a22012354f7","modified":1642907452458},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1640844683998},{"_id":"themes/matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1640763490000},{"_id":"themes/matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1640763490000},{"_id":"themes/matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1640763490000},{"_id":"themes/matery/README.md","hash":"ddaf6310154e314385d63041da61c418055314f6","modified":1640763490000},{"_id":"themes/matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1640763490000},{"_id":"themes/matery/_config.yml","hash":"f6a28042a8c6ea23c557b8f0b68a25443205b12e","modified":1640763490000},{"_id":"themes/matery/languages/default.yml","hash":"2ed57824573d7bed71e56023ed92500734a8886d","modified":1640763490000},{"_id":"themes/matery/languages/zh-CN.yml","hash":"a2695fdb7579a77daec7773a9bb8e71b9edbf16b","modified":1640763490000},{"_id":"themes/matery/languages/zh-HK.yml","hash":"51c06005927e8bde5b3e23353d2bf2c32ed855f3","modified":1640763490000},{"_id":"themes/matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1640763490000},{"_id":"themes/matery/layout/404.ejs","hash":"36f8d3e530e8144bf80d0772284edd9b0da362fe","modified":1640763490000},{"_id":"themes/matery/layout/about.ejs","hash":"99a74316aed478efb0db823c4460ee2e660f101c","modified":1640763490000},{"_id":"themes/matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1640763490000},{"_id":"themes/matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1640763490000},{"_id":"themes/matery/layout/contact.ejs","hash":"851531e78e90a2dc923d6b5d98d3548d37e0cb7a","modified":1640763490000},{"_id":"themes/matery/layout/friends.ejs","hash":"534511d9f38f281b531e24c19d9c1526cc7e5e27","modified":1640763490000},{"_id":"themes/matery/layout/gallery.ejs","hash":"fcc7364b03329148ba4920cddb0d34d5b7410788","modified":1640763490000},{"_id":"themes/matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1640763490000},{"_id":"themes/matery/layout/galleries.ejs","hash":"85b8b9e583ffa7a4ee6d0c2be4779cb2f7d91777","modified":1640763490000},{"_id":"themes/matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1640763490000},{"_id":"themes/matery/layout/index.ejs","hash":"1656c2db90e24a360282d15c71144b4f14edb43d","modified":1640763490000},{"_id":"themes/matery/layout/post.ejs","hash":"3d4f40121dbb75bcb71837c35ec5ee17cdffae31","modified":1640763490000},{"_id":"themes/matery/layout/layout.ejs","hash":"13ea3aabb9181f5b765a535e24e7540f1f8f66fd","modified":1640763490000},{"_id":"themes/matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1640763490000},{"_id":"themes/matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1640763490000},{"_id":"themes/matery/source/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1640763490000},{"_id":"themes/matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1640763490000},{"_id":"themes/matery/source/css/gallery.css","hash":"015097ca1271dd44e6d663332587dbe58ae2ade8","modified":1640763490000},{"_id":"themes/matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1640763490000},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1640763490000},{"_id":"themes/matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1640763490000},{"_id":"themes/matery/source/css/matery.css","hash":"9145d60753fd59278a63fe865047e50aafe66c23","modified":1640763490000},{"_id":"themes/matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1640763490000},{"_id":"themes/matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1640763490000},{"_id":"themes/matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1640763490000},{"_id":"themes/matery/source/js/gallery-encrypt.js","hash":"f611a391d62da17b71f75577a72ad246ef6c5a71","modified":1640763490000},{"_id":"themes/matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1640763490000},{"_id":"themes/matery/source/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1640763490000},{"_id":"themes/matery/source/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1640763490000},{"_id":"themes/matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1640763490000},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1640763490000},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1640763490000},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1640763490000},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"bb25a6fa51eb5ebfba687b2cbadff6c7a4b4bfef","modified":1640763490000},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1640763490000},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1640763490000},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1640763490000},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1640763490000},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1640763490000},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1640763490000},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"5e5ec78f8ab229d54786ef2e0ea2864af2dc459f","modified":1640763490000},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1640763490000},{"_id":"themes/matery/layout/_partial/background.ejs","hash":"acd18121108659b3dd7a94c10943e5f6a4938239","modified":1640763490000},{"_id":"themes/matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1640763490000},{"_id":"themes/matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1640763490000},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1640763490000},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1640763490000},{"_id":"themes/matery/layout/_partial/bg-video.ejs","hash":"963422029eb5158eb5f5bc97ce19b66e5399db97","modified":1640763490000},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1640763490000},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"c35e4254ff0738878f65251a657b4fdcafc4b270","modified":1640763490000},{"_id":"themes/matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1640763490000},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1640763490000},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1640763490000},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1640763490000},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"7c87e0eb2cf662c2a9b9b0e1e5d228b0fac2622e","modified":1640763490000},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1640763490000},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1640763490000},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"60a65b6b181bc77febf71e572e884a61aed91fc8","modified":1640763490000},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1640763490000},{"_id":"themes/matery/layout/_partial/minivaline.ejs","hash":"738b83cd90fe1b26971d803fc89c56193323da1e","modified":1640763490000},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"bf96ff47df2d81bf2edb2a8c6737e36b8b08aca3","modified":1640763490000},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1640763490000},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"52de0cf3ce13a3477b0a1659d2b8aa41db1f622d","modified":1640763490000},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"cda18036a6c782dee122a33f3bba759f3377a68c","modified":1640763490000},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1640763490000},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1640763490000},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"3ff94aff01936242a9f4e1f31adb9b43bfab8d53","modified":1640763490000},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1640763490000},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"a10df7abc9bcac399bcabf727c8491294430dfb0","modified":1640763490000},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1640763490000},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1640763490000},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1640763490000},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1640763490000},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1640763490000},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1640763490000},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"045f3aaade1dc6749a1f824b0405b5fdb9e041e4","modified":1640763490000},{"_id":"themes/matery/layout/_partial/waline.ejs","hash":"2658cb73ef984a30b248351d7858ee15596a6e7a","modified":1640763490000},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1640763490000},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1640763490000},{"_id":"themes/matery/layout/_partial/twikoo.ejs","hash":"f9cb8c82b9d2a7cdb644e10718f1cdeb9400414c","modified":1640763490000},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1640763490000},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1640763490000},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1640763490000},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1640763490000},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1640763490000},{"_id":"themes/matery/source/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1640763490000},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1640763490000},{"_id":"themes/matery/source/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1640763490000},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1640763490000},{"_id":"themes/matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1640763490000},{"_id":"themes/matery/source/libs/justifiedGallery/justifiedGallery.min.css","hash":"b9323091d50785ad6c617d7cae76a41a89eb44b3","modified":1640763490000},{"_id":"themes/matery/source/libs/justifiedGallery/justifiedGallery.min.js","hash":"6f5433cc9f19ce2403e903e5d01a4c7b38f0969b","modified":1640763490000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1640763490000},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1640763490000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1640763490000},{"_id":"themes/matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1640763490000},{"_id":"themes/matery/source/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1640763490000},{"_id":"themes/matery/source/libs/prism/prism.css","hash":"f1a273e896538fa4e11cb70acc5ec7e88d8b6c4c","modified":1640763490000},{"_id":"themes/matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1640763490000},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1640763490000},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1640763490000},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1640763490000},{"_id":"themes/matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1640763490000},{"_id":"themes/matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1640763490000},{"_id":"themes/matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1640763490000},{"_id":"themes/matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1640763490000},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1640763490000},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1640763490000},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1640763490000},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1640763490000},{"_id":"themes/matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1640763490000},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"9cf8af847d0da796d286c18c09761a5c606c703e","modified":1640854804719},{"_id":"themes/matery/source/medias/reward/wechat.png","hash":"10092a3b9f0e22cbedcddcde5fe18d984af683ee","modified":1640854782612},{"_id":"themes/matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1640763490000},{"_id":"themes/matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1640763490000},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1640763490000},{"_id":"themes/matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1640763490000},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1640763490000},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1640763490000},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1640763490000},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1640763490000},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1640763490000},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1640763490000},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1640763490000},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1640763490000},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1640763490000},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1640763490000},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1640763490000},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1640763490000},{"_id":"themes/matery/source/libs/others/TencentCaptcha.js","hash":"fb4d34c48567b7b992aac1c75f0d24c3eb2cc3fa","modified":1640763490000},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1640763490000},{"_id":"themes/matery/source/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1640763490000},{"_id":"themes/matery/source/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1640763490000},{"_id":"themes/matery/source/libs/others/sakura.js","hash":"b6ebe8f040c84f067300996a5f377846f01605fa","modified":1640763490000},{"_id":"themes/matery/source/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1640763490000},{"_id":"themes/matery/source/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1640763490000},{"_id":"themes/matery/source/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1640763490000},{"_id":"themes/matery/source/libs/awesome/css/all.min.css","hash":"a57ee68d11601b0fd8e5037fc241ff65a754473c","modified":1640763490000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"c34acd6818df6db6be41a2e331886765d601f2eb","modified":1640763490000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"670fb01e4930ae46fe8d6d2b75ead288f54e8e61","modified":1640763490000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"3ad4f4e4b1fb3edee3d4ba25e6cdfed2f0b88a54","modified":1640763490000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"13517529affa39e2585c591acae6dc336b6aa917","modified":1640763490000},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1640763490000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1640763490000},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1640763490000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1640763490000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1640763490000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1640763490000},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1640763490000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1640763490000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1640763490000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1640763490000},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1640763490000},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1640763490000},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1640763490000},{"_id":"themes/matery/README_CN.md","hash":"a2267aed16d52f4adeb13f555d36d076855387af","modified":1640763490000},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1640763490000},{"_id":"themes/matery/source/libs/fancybox/fancybox.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1640763490000},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1640763490000},{"_id":"themes/matery/source/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1640763490000},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1640763490000},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1640763490000},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1640763490000},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1640763490000},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1640763490000},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1640763490000},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1640763490000},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1640763490000},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1640763490000},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1640763490000},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1640763490000},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1640763490000},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1640763490000},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1640763490000},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1640763490000},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1640763490000},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1640763490000},{"_id":"themes/matery/source/libs/awesome/css/all.css","hash":"8a4a55db46c5dbfef9c6703fa2d04e89cbfcf633","modified":1640763490000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"1e1f02bfa89e179fe2dd1383273b8812aa873418","modified":1640763490000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"0613c7ebba55ee47ef302c0f7766324692f899a7","modified":1640763490000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"a22acd7697f36e7d4cc31a853c70e776eac54bb1","modified":1640763490000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"0ccb2c814a7e4ca12c4778821633809cb0361eaa","modified":1640763490000},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1640763490000},{"_id":"themes/matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1640763490000},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1640763490000},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1640763490000},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1640763490000},{"_id":"themes/matery/source/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1640763490000},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1640763490000},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1640763490000},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1640763490000},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1640763490000},{"_id":"themes/matery/source/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1640763490000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"8ab907083fecaaa2a9ec93b27f884ad74573705c","modified":1640763490000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"326e1d8f0b23f6df95cd6784fdf330bc6414ecd0","modified":1640763490000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"d1ffd6340cdbf72890ccb67f32015eafc5df51a7","modified":1640763490000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"ea845c59bee4a5c6db774b8d8060f5641b789ae9","modified":1640763490000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"eb8914f6b1797b45ee0883e6089d92695d9f9441","modified":1640763490000},{"_id":"themes/matery/source/js/crypto-js.js","hash":"ddacd177f23f65ff97b93b0417048f51928ee17e","modified":1640763490000},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1640763490000},{"_id":"themes/matery/source/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1640763490000},{"_id":"themes/matery/source/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1640763490000},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1640763490000},{"_id":"themes/matery/source/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1640763490000},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1640763490000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"907bfbbe295332750575900984a00136de0f0e90","modified":1640763490000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"d92687d30fa0d43f9ae71009398507bf813a6875","modified":1640763490000},{"_id":"themes/matery/source/libs/mermaid/mermaid.min.js","hash":"be7f26d6f063cfec5440517848ae5943adae1f54","modified":1640763490000},{"_id":"themes/matery/source/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1640763490000},{"_id":"public/2022/01/26/拉链表/index.html","hash":"13d7231c98cee7758945f022670804ea1295f8e9","modified":1643182440304},{"_id":"public/2022/01/20/事实表的类型/index.html","hash":"3a0a8501287f8e83441c4b6d4b49df5396a2e81c","modified":1643182440304},{"_id":"public/2022/01/19/大数据常用命令/index.html","hash":"e867a0b1e8f7ce4ee20bfda57b0efa0b96e50438","modified":1643182440304},{"_id":"public/2022/01/09/一月杂项/index.html","hash":"20c06ca8cfab0383ed7a270307fda8ee2dca67a6","modified":1643182440304},{"_id":"public/2022/01/01/数据仓库/index.html","hash":"19b80ac846a3dd488b2c018b0385a2e55449d9d4","modified":1643182440304},{"_id":"public/2021/12/30/hexo搭建/index.html","hash":"8b1a8abff2f95c0327e6a64f96a54a1b5a0e20a9","modified":1643182440304},{"_id":"public/2021/12/30/hello-world/index.html","hash":"7e76ff985130ea70e7afd04ebebc8b2d090ffdfc","modified":1643182440304},{"_id":"public/2020/12/10/flink的CDC技术/index.html","hash":"a24fb2dc57879be7d994cbfe971c9fe3a56b1e59","modified":1643182440304},{"_id":"public/archives/index.html","hash":"a77d2a12f1a864c39b93c06e22d50388ae618ed1","modified":1643182440304},{"_id":"public/archives/2020/index.html","hash":"d8106f49c2c7dfca674b5792f68d8ca423cb9c8a","modified":1643182440304},{"_id":"public/archives/2020/12/index.html","hash":"f207bfca33630050a0824b3963cd7d3142722e13","modified":1643182440304},{"_id":"public/archives/2021/index.html","hash":"4b057530f9375cd6de5b9496d06bfc07e5d95235","modified":1643182440304},{"_id":"public/archives/2021/12/index.html","hash":"e99743b197fee7f0d5d7d5c108ecfe831c46fb43","modified":1643182440304},{"_id":"public/archives/2022/index.html","hash":"ca97b3b1721c6bd56202a5ec78cd33094872bc7b","modified":1643182440304},{"_id":"public/archives/2022/01/index.html","hash":"7d36bd7a3adda37167d787deaa4599818ffef0f7","modified":1643182440304},{"_id":"public/categories/大数据/index.html","hash":"f4f4d2444fffa3ec921ea993fbb275a11fb188e7","modified":1643182440304},{"_id":"public/categories/兴趣/index.html","hash":"d07b0f0c7c31f8d8dc9a3d92f52c5cec94426122","modified":1643182440304},{"_id":"public/categories/数仓/index.html","hash":"30f1f7e55c07c9940c3044e39298475dee8e8c2b","modified":1643182440304},{"_id":"public/categories/运维-linux/index.html","hash":"04cc31329f8173fe4e27ac1a02673b5d7945cb77","modified":1643182440304},{"_id":"public/index.html","hash":"d4bd52e283a2eddaf43b7485e10c701347eb6bf4","modified":1643182440304},{"_id":"public/tags/flink/index.html","hash":"104cdde63695ea361a6f8d500c0643c00be93c29","modified":1643182440304},{"_id":"public/tags/cdc/index.html","hash":"5a6f5b6343d9d4775d6ec9819974a5c2c6a79644","modified":1643182440304},{"_id":"public/tags/博客/index.html","hash":"3980087932f87a8f243058289ad39c041c390e2f","modified":1643182440304},{"_id":"public/tags/数据仓库/index.html","hash":"dcf384f21cdf03f23faaeca1fa6d0475c26377fd","modified":1643182440304},{"_id":"public/tags/数仓技术栈/index.html","hash":"1f24d0983aa099395a2f74780021b3a1b24402bf","modified":1643182440304},{"_id":"public/tags/数仓/index.html","hash":"7efb0ce2ea189a695b98607492fccdfec3dd38f2","modified":1643182440304},{"_id":"public/tags/维度建模/index.html","hash":"084f9fd5b9f5f42a182400255ea543d84ca91da1","modified":1643182440304},{"_id":"public/tags/linux/index.html","hash":"a52beeffae635d2f7bb85058d06bf14eef6ec69b","modified":1643182440304},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1643182440304},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1643182440304},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1643182440304},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1643182440304},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1643182440304},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1643182440304},{"_id":"public/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1643182440304},{"_id":"public/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1643182440304},{"_id":"public/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1643182440304},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1643182440304},{"_id":"public/medias/reward/alipay.jpg","hash":"9cf8af847d0da796d286c18c09761a5c606c703e","modified":1643182440304},{"_id":"public/medias/reward/wechat.png","hash":"10092a3b9f0e22cbedcddcde5fe18d984af683ee","modified":1643182440304},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1643182440304},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1643182440304},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1643182440304},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1643182440304},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1643182440304},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1643182440304},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1643182440304},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1643182440304},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1643182440304},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1643182440304},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1643182440304},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1643182440304},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"670fb01e4930ae46fe8d6d2b75ead288f54e8e61","modified":1643182440304},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"c34acd6818df6db6be41a2e331886765d601f2eb","modified":1643182440304},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"3ad4f4e4b1fb3edee3d4ba25e6cdfed2f0b88a54","modified":1643182440304},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"13517529affa39e2585c591acae6dc336b6aa917","modified":1643182440304},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1643182440304},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1643182440304},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1643182440304},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1643182440304},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1643182440304},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1643182440304},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1643182440304},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1643182440304},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1643182440304},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1643182440304},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1643182440304},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1643182440304},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1643182440304},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1643182440304},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1643182440304},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1643182440304},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1643182440304},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1643182440304},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1643182440304},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1643182440304},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1643182440304},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1643182440304},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1643182440304},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1643182440304},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"1e1f02bfa89e179fe2dd1383273b8812aa873418","modified":1643182440304},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"0613c7ebba55ee47ef302c0f7766324692f899a7","modified":1643182440304},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"a22acd7697f36e7d4cc31a853c70e776eac54bb1","modified":1643182440304},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"0ccb2c814a7e4ca12c4778821633809cb0361eaa","modified":1643182440304},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1643182440304},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1643182440304},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1643182440304},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1643182440304},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1643182440304},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1643182440304},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"d1ffd6340cdbf72890ccb67f32015eafc5df51a7","modified":1643182440304},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"8ab907083fecaaa2a9ec93b27f884ad74573705c","modified":1643182440304},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"326e1d8f0b23f6df95cd6784fdf330bc6414ecd0","modified":1643182440304},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1643182440304},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1643182440304},{"_id":"public/css/gallery.css","hash":"79dfdf68d675c17782271647283c568d086e4b98","modified":1643182440304},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1643182440304},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1643182440304},{"_id":"public/js/gallery-encrypt.js","hash":"18dcfa4a8da8847b64be75f287f45c0e830bbcab","modified":1643182440304},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1643182440304},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1643182440304},{"_id":"public/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1643182440304},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1643182440304},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1643182440304},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1643182440304},{"_id":"public/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1643182440304},{"_id":"public/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1643182440304},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1643182440304},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.css","hash":"89fb099880771c23dce3005a87db36053c8c491c","modified":1643182440304},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1643182440304},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1643182440304},{"_id":"public/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1643182440304},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1643182440304},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1643182440304},{"_id":"public/libs/prism/prism.css","hash":"f1a273e896538fa4e11cb70acc5ec7e88d8b6c4c","modified":1643182440304},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1643182440304},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1643182440304},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1643182440304},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1643182440304},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1643182440304},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1643182440304},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1643182440304},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1643182440304},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1643182440304},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1643182440304},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1643182440304},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1643182440304},{"_id":"public/libs/others/TencentCaptcha.js","hash":"10a034ac0b4ebe97ec5916b092b36fa2d6e9edd0","modified":1643182440304},{"_id":"public/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1643182440304},{"_id":"public/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1643182440304},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1643182440304},{"_id":"public/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1643182440304},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"ea845c59bee4a5c6db774b8d8060f5641b789ae9","modified":1643182440304},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"eb8914f6b1797b45ee0883e6089d92695d9f9441","modified":1643182440304},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1643182440304},{"_id":"public/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1643182440304},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1643182440304},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1643182440304},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1643182440304},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1643182440304},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1643182440304},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1643182440304},{"_id":"public/css/matery.css","hash":"9145d60753fd59278a63fe865047e50aafe66c23","modified":1643182440304},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1643182440304},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1643182440304},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1643182440304},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1643182440304},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1643182440304},{"_id":"public/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1643182440304},{"_id":"public/libs/others/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1643182440304},{"_id":"public/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1643182440304},{"_id":"public/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1643182440304},{"_id":"public/libs/awesome/css/all.min.css","hash":"a57ee68d11601b0fd8e5037fc241ff65a754473c","modified":1643182440304},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1643182440304},{"_id":"public/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1643182440304},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1643182440304},{"_id":"public/libs/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1643182440304},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1643182440304},{"_id":"public/libs/awesome/css/all.css","hash":"8a4a55db46c5dbfef9c6703fa2d04e89cbfcf633","modified":1643182440304},{"_id":"public/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1643182440304},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1643182440304},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1643182440304},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1643182440304},{"_id":"public/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1643182440304},{"_id":"public/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1643182440304},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1643182440304},{"_id":"public/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1643182440304},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"907bfbbe295332750575900984a00136de0f0e90","modified":1643182440304},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"d92687d30fa0d43f9ae71009398507bf813a6875","modified":1643182440304},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1643182440304},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1643182440304},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1643182440304},{"_id":"public/libs/mermaid/mermaid.min.js","hash":"be7f26d6f063cfec5440517848ae5943adae1f54","modified":1643182440304},{"_id":"public/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1643182440304}],"Category":[{"name":"大数据","_id":"ckyv8edwi000338qh8uk55hh2"},{"name":"兴趣","_id":"ckyv8edwo000838qhfvfvaytf"},{"name":"数仓","_id":"ckyv8edws000c38qh1vhv7iu4"},{"name":"运维 linux","_id":"ckyv8edy9000w38qhakil940b"}],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-12-30T06:11:23.998Z","updated":"2021-12-30T06:11:23.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyv8edw4000038qh06tx5xsx","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server</code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate</code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy</code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server</code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate</code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy</code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"flink的CDC技术","date":"2020-12-10T01:25:00.000Z","author":"nove","_content":"# flink的CDC技术\n\n## 从mysql的binlog谈起\n\n* 记录所有的数据变更和写入\n* 用于主从复制和数据恢复\n* 必须提交了事务才能记录binlog\n* 重启，手动刷新和日志文件大于了指定大小的时候，生成新的日志文件\n* 日志格式\n  * Statement：记录执行语句，（在主从复制的时候特定的函数会出现特定的问题）\n  * Row：记录所有更改前后的内容，（不会出现特定函数的问题，会有大量的日志文件，例如修改操作）\n  * Mixed：结核上述两种，按照情况选择要使用的格式\n\n## 优势\n\n* 能够捕获所有数据的变化，捕获完整的变更记录。在异地容灾，数据备份等场景中得到广泛应用，如果是基于查询的 CDC 有可能导致两次查询的中间一部分数据丢失\n\n* 每次 DML 操作均有记录无需像查询 CDC 这样发起全表扫描进行过滤，拥有更高的效率和性能，具有低延迟，不增加数据库负载的优势\n\n* 无需入侵业务，业务解耦，无需更改业务模型\n\n* 捕获删除事件和捕获旧记录的状态，在查询 CDC 中，周期的查询无法感知中间数据是否删除\n\n## kafka\n\n* Debezium构建于kafka上\n* source，sink，broker的概念\n\n## Debezium\n\n* 开源的分布式平台\n\n* 绑定数据库后可以对数据库的数据变更做出及时的相应\n\n* 构建于kafka的部署模式&独立部署的模式\n\n* 固定的json响应格式\n\n~~~\n{ \"schema\": {    ...  }, \"payload\": {    ... }, \"schema\": {    ... }, \"payload\": {    ... }, }\n~~~\n| Item | Field name | Description                                                  |\n| :--- | :--------- | :----------------------------------------------------------- |\n| 1    | `schema`   | The first `schema` field is part of the event key. It specifies a Kafka Connect schema that describes what is in the event key’s `payload` portion. In other words, the first `schema` field describes the structure of the primary key, or the unique key if the table does not have a primary key, for the table that was changed.  It is possible to override the table’s primary key by setting the [`message.key.columns` connector configuration property](https://debezium.io/documentation/reference/1.3/connectors/mysql.html#mysql-property-message-key-columns). In this case, the first schema field describes the structure of the key identified by that property. |\n| 2    | `payload`  | The first `payload` field is part of the event key. It has the structure described by the previous `schema` field and it contains the key for the row that was changed. |\n| 3    | `schema`   | The second `schema` field is part of the event value. It specifies the Kafka Connect schema that describes what is in the event value’s `payload` portion. In other words, the second `schema` describes the structure of the row that was changed. Typically, this schema contains nested schemas. |\n| 4    | `payload`  | The second `payload` field is part of the event value. It has the structure described by the previous `schema` field and it contains the actual data for the row that was changed. |\n\n## flink\n\n### debezium嵌入flink\n\n* 返回格式\n\n  ~~~json\n  Struct{after=Struct{id=2,name=kate,age=28},source=Struct{version=1.2.1.Final,connector=mysql,name=mysql_binlog_source,ts_ms=0,snapshot=true,db=company,table=student,server_id=0,file=mysql-bin.000001,pos=4755,row=0},op=c,ts_ms=1637292711750}\n   1，同时存在 beforeStruct 跟 afterStruct数据的话，就代表是update的数据\n   2,只存在 beforeStruct 就是delete数据\n   3，只存在 afterStruct数据 就是insert数据\n  ~~~\n\n * 转化为json，解析\n\n# flinkSQL\n\n## 语法\n\n```sql\n  select TO_TIMESTAMP(tm_v) from tm\n  #String 转化为时间类型\n```\n\n## 窗口函数\n\n### 滚动窗口\n\n~~~sql\n#窗口10s\nselect userId\n, count(*) as orderCount\n, max(money) as maxMoney\n,min(money) as minMoney\n ,min(createTime) \n,tumble_start(createTime, INTERVAL '10' SECOND) \n,tumble_end(createTime, INTERVAL '10' SECOND) \nfrom tb_order\n group by userId,tumble(createTime, INTERVAL '10' SECOND) \n~~~\n\n### 滑动窗口\n\n~~~sql\n#窗口60s，间隔5s\nselect userId\n, count(*) as orderCount\n, max(money) as maxMoney\n,min(money) as minMoney\n ,min(createTime) \n,hop_start(createTime, INTERVAL '5' SECOND,INTERVAL '60' SECOND) \n,hop_end(createTime, INTERVAL '5' SECOND,INTERVAL '60' SECOND) \nfrom tb_order\n group by userId,hop(createTime, INTERVAL '5' SECOND,INTERVAL '60' SECOND) \n~~~\n\n### 累计窗口\n\n~~~sql\n#每隔10s统计今天的数据\ninsert into print_sink\nselect\n date_format(window_start, 'HH:mm:ss')\n , date_format(window_end, 'HH:mm:ss')\n , count(id)\n , count(distinct id)\n  FROM TABLE(\n    CUMULATE(TABLE datagen_source, DESCRIPTOR(proc_time), INTERVAL '10' SECOND, INTERVAL '1' DAY))\n  GROUP BY window_start, window_end\n~~~\n\n## cube函数\n\n### GROUPING SETS\n\n~~~sql\n#GROUP SETS 中的表达式可以包含 0 个或多个字段，0 个表示所有行聚合到 1 组。\nSELECT window_start, window_end, supplier_id, SUM(price) as price\n  FROM TABLE(\n    TUMBLE(TABLE Bid, DESCRIPTOR(bidtime), INTERVAL '10' MINUTES))\n  GROUP BY window_start, window_end, GROUPING SETS ((supplier_id), ());\n-- 在 Window 内，按照 supplier_id 分组，和部分组两个规则\n  \n+------------------+------------------+-------------+-------+\n|     window_start |       window_end | supplier_id | price |\n+------------------+------------------+-------------+-------+\n| 2020-04-15 08:00 | 2020-04-15 08:10 |      (NULL) | 11.00 |\n| 2020-04-15 08:00 | 2020-04-15 08:10 |   supplier2 |  5.00 |\n| 2020-04-15 08:00 | 2020-04-15 08:10 |   supplier1 |  6.00 |\n| 2020-04-15 08:10 | 2020-04-15 08:20 |      (NULL) | 10.00 |\n| 2020-04-15 08:10 | 2020-04-15 08:20 |   supplier2 |  9.00 |\n| 2020-04-15 08:10 | 2020-04-15 08:20 |   supplier1 |  1.00 |\n+------------------+------------------+-------------+-------+\n~~~\n\n### ROLLUP\n\n~~~sql\n#ROLLUP(a, b) 等同于 GROUPING SETS ((a), (a, b), ())\nSELECT window_start, window_end, supplier_id, SUM(price) as price\nFROM TABLE(\n    TUMBLE(TABLE Bid, DESCRIPTOR(bidtime), INTERVAL '10' MINUTES))\nGROUP BY window_start, window_end, ROLLUP (supplier_id);\n~~~\n\n### CUBE\n\n~~~sql\n#CUBE(a, b) 等同于 GROUPING SETS ((a), (b), (a, b), ())\nSELECT window_start, window_end, item, supplier_id, SUM(price) as price\n  FROM TABLE(\n    TUMBLE(TABLE Bid, DESCRIPTOR(bidtime), INTERVAL '10' MINUTES))\n  GROUP BY window_start, window_end, CUBE (supplier_id, item);\n~~~\n\n## demo\n\nhttps://xie.infoq.cn/article/c664e0a89afb2110db4f18af9\n\n## Window Top-N\n\n只适用流处理模式\n\n计算每 10 分钟内销售额最高的前 3 名供应商。\n\n~~~sql\nSELECT *\n  FROM (\n    SELECT *, \n        ROW_NUMBER() OVER (PARTITION BY window_start, window_end \n            ORDER BY price DESC) as rownum\n    FROM (\n      SELECT window_start, window_end, supplier_id, SUM(price) as price, COUNT(*) as cnt\n      FROM TABLE(\n        TUMBLE(TABLE Bid, DESCRIPTOR(bidtime), INTERVAL '10' MINUTES))\n      GROUP BY window_start, window_end, supplier_id\n    )\n  ) WHERE rownum <= 3;\n  \n  \n+------------------+------------------+-------------+-------+-----+--------+\n|     window_start |       window_end | supplier_id | price | cnt | rownum |\n+------------------+------------------+-------------+-------+-----+--------+\n| 2020-04-15 08:00 | 2020-04-15 08:10 |   supplier1 |  6.00 |   2 |      1 |\n| 2020-04-15 08:00 | 2020-04-15 08:10 |   supplier4 |  5.00 |   1 |      2 |\n| 2020-04-15 08:00 | 2020-04-15 08:10 |   supplier2 |  4.00 |   1 |      3 |\n| 2020-04-15 08:10 | 2020-04-15 08:20 |   supplier5 |  6.00 |   1 |      1 |\n| 2020-04-15 08:10 | 2020-04-15 08:20 |   supplier2 |  3.00 |   1 |      2 |\n| 2020-04-15 08:10 | 2020-04-15 08:20 |   supplier3 |  2.00 |   1 |      3 |\n+------------------+------------------+-------------+-------+-----+--------+\n~~~\n\n\n\n\n\n## 表的参数配置\n\n### jdbc\n\n~~~shell\ncreate table dim (\n  dim varchar ,\n  channel_eight_role_code varchar ,\n  channel_source_code varchar,\n  CHANNEL_INFO_ID varchar\n) with(\n  -- 声明连接器类型。flink会通过spi找到连接器，并且进行参数匹配\n  'connector.type' = 'jdbc',\n  \n  -- jdbc的url\n  'connector.url' = 'jdbc:mysql://10.25.76.173:3310/ogg_syncer?useUnicode=true&characterEncoding=UTF-8&useSSL=false',\n  \n  -- 表名称\n  'connector.table' = 'epcis_epcisbase_channel_info',\n  \n  -- 驱动类型\n  'connector.driver' = 'com.mysql.jdbc.Driver',\n  \n  -- 用过名和密码\n  'connector.username' = 'root',\n  'connector.password' = 'root',\n\n  -- jdbc作为维表的时候，缓存时间。cache默认未开启。\n  'connector.lookup.cache.ttl' = '60s',\n  \n  --  jdbc作为维表的时候，缓存的最大行数。cache默认未开启。\n  'connector.lookup.cache.max-rows' = '100000',\n  \n  -- jdbc作为维表的时候，如果查询失败，最大查询次数\n  'connector.lookup.max-retries' = '3',\n  \n  -- jdbc写入缓存的最大行数。默认值5000\n  'connector.write.flush.max-rows' = '5000',\n  \n  -- jdbc 写入缓存flush时间间隔。默认为0，立即写入\n  'connector.write.flush.interval' = '2s',\n  \n  -- 写入失败，最大重试次数\n  'connector.write.max-retries' = '3' \n);\n\n~~~\n\n# flinkCDC进行数据迁移\n\n### 增量读取事实表，关联维度表，间隔+批次写入ck中，完成数据的迁移\n\n#### sql实现数据的读取\n\n~~~java\npackage cdc;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport com.alibaba.ververica.cdc.connectors.mysql.MySQLSource;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.apache.flink.api.common.functions.MapFunction;\nimport org.apache.flink.streaming.api.datastream.DataStream;\nimport org.apache.flink.streaming.api.datastream.DataStreamSource;\nimport org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.streaming.api.functions.source.SourceFunction;\nimport org.apache.flink.table.api.Table;\nimport org.apache.flink.table.api.TableResult;\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\nimport org.apache.flink.types.Row;\n\nimport java.util.Date;\nimport java.util.Properties;\n\n/**\n * @author nove\n * @version 1.0\n * @date 2021/12/10 16:55\n * cdc迁移数据\n */\npublic class DateTrans {\n    @Data\n    @AllArgsConstructor\n    @NoArgsConstructor\n    public static class Student{\n        private Integer id;\n        private String name;\n        private Integer age;\n    }\n\n    @Data\n    @AllArgsConstructor\n    @NoArgsConstructor\n    public  static class OrderTb   {\n        private Integer id;\n        private String serialNo;\n        private Integer price;\n        private Date time;\n    }\n    public static void main(String[] args) {\n        Properties properties = new Properties();\n        properties.put(\"snapshot.mode\",\"schema_only\");//debezium增量获取方式配置\n\n        //事实表的增量获取\n        SourceFunction<JSONObject> factTb = MySQLSource.<JSONObject>builder()\n                .hostname(\"47.108.204.135\")\n                .port(3310)\n                .databaseList(\"company\") // monitor all tables under inventory database\n                .tableList(\"company.order_tb\")//库名+表名字，逗号分隔\n                .username(\"root\")\n                .password(\"hDtoLDuI\")\n                .debeziumProperties(properties)\n                .deserializer(new CdcDwdDeserializationSchema()) // converts SourceRecord to String\n                .build();\n\n        //维度表的获取\n        SourceFunction<JSONObject> dimTb = MySQLSource.<JSONObject>builder()\n                .hostname(\"47.108.204.135\")\n                .port(3310)\n                .databaseList(\"company\") // monitor all tables under inventory database\n                .tableList(\"company.student\")//库名+表名字，逗号分隔\n                .username(\"root\")\n                .password(\"****\")\n                .deserializer(new CdcDwdDeserializationSchema()) // converts SourceRecord to String\n                .build();\n\n\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\n\n        DataStreamSource<JSONObject> factSource = env.addSource(factTb);\n        DataStreamSource<JSONObject> dimSource = env.addSource(dimTb);\n\n\n        SingleOutputStreamOperator<OrderTb> factTbDs = factSource.map(new MapFunction<JSONObject, OrderTb>() {\n            @Override\n            public OrderTb map(JSONObject value) throws Exception {\n                return JSON.parseObject(value.toString(), OrderTb.class);\n            }\n        });\n        SingleOutputStreamOperator<Student> dimTbDs = dimSource.map(new MapFunction<JSONObject, Student>() {\n            @Override\n            public Student map(JSONObject value) throws Exception {\n                return JSON.parseObject(value.toString(), Student.class);\n            }\n        });\n\n\n        tableEnv.createTemporaryView(\"fact\",factTbDs);\n        tableEnv.createTemporaryView(\"dim\",dimTbDs);\n\n\n        Table table = tableEnv.sqlQuery(\"select * from fact a join dim b on a.id = b.id\");\n\n\n        table.execute().print();\n    }\n}\n\n\n~~~\n\n","source":"_posts/flink的CDC技术.md","raw":"---\ntitle: flink的CDC技术\ndate: 2020-12-10 09:25:00\nauthor: nove\ncategories: 大数据\ntags:\n  - flink\n  - cdc\n---\n# flink的CDC技术\n\n## 从mysql的binlog谈起\n\n* 记录所有的数据变更和写入\n* 用于主从复制和数据恢复\n* 必须提交了事务才能记录binlog\n* 重启，手动刷新和日志文件大于了指定大小的时候，生成新的日志文件\n* 日志格式\n  * Statement：记录执行语句，（在主从复制的时候特定的函数会出现特定的问题）\n  * Row：记录所有更改前后的内容，（不会出现特定函数的问题，会有大量的日志文件，例如修改操作）\n  * Mixed：结核上述两种，按照情况选择要使用的格式\n\n## 优势\n\n* 能够捕获所有数据的变化，捕获完整的变更记录。在异地容灾，数据备份等场景中得到广泛应用，如果是基于查询的 CDC 有可能导致两次查询的中间一部分数据丢失\n\n* 每次 DML 操作均有记录无需像查询 CDC 这样发起全表扫描进行过滤，拥有更高的效率和性能，具有低延迟，不增加数据库负载的优势\n\n* 无需入侵业务，业务解耦，无需更改业务模型\n\n* 捕获删除事件和捕获旧记录的状态，在查询 CDC 中，周期的查询无法感知中间数据是否删除\n\n## kafka\n\n* Debezium构建于kafka上\n* source，sink，broker的概念\n\n## Debezium\n\n* 开源的分布式平台\n\n* 绑定数据库后可以对数据库的数据变更做出及时的相应\n\n* 构建于kafka的部署模式&独立部署的模式\n\n* 固定的json响应格式\n\n~~~\n{ \"schema\": {    ...  }, \"payload\": {    ... }, \"schema\": {    ... }, \"payload\": {    ... }, }\n~~~\n| Item | Field name | Description                                                  |\n| :--- | :--------- | :----------------------------------------------------------- |\n| 1    | `schema`   | The first `schema` field is part of the event key. It specifies a Kafka Connect schema that describes what is in the event key’s `payload` portion. In other words, the first `schema` field describes the structure of the primary key, or the unique key if the table does not have a primary key, for the table that was changed.  It is possible to override the table’s primary key by setting the [`message.key.columns` connector configuration property](https://debezium.io/documentation/reference/1.3/connectors/mysql.html#mysql-property-message-key-columns). In this case, the first schema field describes the structure of the key identified by that property. |\n| 2    | `payload`  | The first `payload` field is part of the event key. It has the structure described by the previous `schema` field and it contains the key for the row that was changed. |\n| 3    | `schema`   | The second `schema` field is part of the event value. It specifies the Kafka Connect schema that describes what is in the event value’s `payload` portion. In other words, the second `schema` describes the structure of the row that was changed. Typically, this schema contains nested schemas. |\n| 4    | `payload`  | The second `payload` field is part of the event value. It has the structure described by the previous `schema` field and it contains the actual data for the row that was changed. |\n\n## flink\n\n### debezium嵌入flink\n\n* 返回格式\n\n  ~~~json\n  Struct{after=Struct{id=2,name=kate,age=28},source=Struct{version=1.2.1.Final,connector=mysql,name=mysql_binlog_source,ts_ms=0,snapshot=true,db=company,table=student,server_id=0,file=mysql-bin.000001,pos=4755,row=0},op=c,ts_ms=1637292711750}\n   1，同时存在 beforeStruct 跟 afterStruct数据的话，就代表是update的数据\n   2,只存在 beforeStruct 就是delete数据\n   3，只存在 afterStruct数据 就是insert数据\n  ~~~\n\n * 转化为json，解析\n\n# flinkSQL\n\n## 语法\n\n```sql\n  select TO_TIMESTAMP(tm_v) from tm\n  #String 转化为时间类型\n```\n\n## 窗口函数\n\n### 滚动窗口\n\n~~~sql\n#窗口10s\nselect userId\n, count(*) as orderCount\n, max(money) as maxMoney\n,min(money) as minMoney\n ,min(createTime) \n,tumble_start(createTime, INTERVAL '10' SECOND) \n,tumble_end(createTime, INTERVAL '10' SECOND) \nfrom tb_order\n group by userId,tumble(createTime, INTERVAL '10' SECOND) \n~~~\n\n### 滑动窗口\n\n~~~sql\n#窗口60s，间隔5s\nselect userId\n, count(*) as orderCount\n, max(money) as maxMoney\n,min(money) as minMoney\n ,min(createTime) \n,hop_start(createTime, INTERVAL '5' SECOND,INTERVAL '60' SECOND) \n,hop_end(createTime, INTERVAL '5' SECOND,INTERVAL '60' SECOND) \nfrom tb_order\n group by userId,hop(createTime, INTERVAL '5' SECOND,INTERVAL '60' SECOND) \n~~~\n\n### 累计窗口\n\n~~~sql\n#每隔10s统计今天的数据\ninsert into print_sink\nselect\n date_format(window_start, 'HH:mm:ss')\n , date_format(window_end, 'HH:mm:ss')\n , count(id)\n , count(distinct id)\n  FROM TABLE(\n    CUMULATE(TABLE datagen_source, DESCRIPTOR(proc_time), INTERVAL '10' SECOND, INTERVAL '1' DAY))\n  GROUP BY window_start, window_end\n~~~\n\n## cube函数\n\n### GROUPING SETS\n\n~~~sql\n#GROUP SETS 中的表达式可以包含 0 个或多个字段，0 个表示所有行聚合到 1 组。\nSELECT window_start, window_end, supplier_id, SUM(price) as price\n  FROM TABLE(\n    TUMBLE(TABLE Bid, DESCRIPTOR(bidtime), INTERVAL '10' MINUTES))\n  GROUP BY window_start, window_end, GROUPING SETS ((supplier_id), ());\n-- 在 Window 内，按照 supplier_id 分组，和部分组两个规则\n  \n+------------------+------------------+-------------+-------+\n|     window_start |       window_end | supplier_id | price |\n+------------------+------------------+-------------+-------+\n| 2020-04-15 08:00 | 2020-04-15 08:10 |      (NULL) | 11.00 |\n| 2020-04-15 08:00 | 2020-04-15 08:10 |   supplier2 |  5.00 |\n| 2020-04-15 08:00 | 2020-04-15 08:10 |   supplier1 |  6.00 |\n| 2020-04-15 08:10 | 2020-04-15 08:20 |      (NULL) | 10.00 |\n| 2020-04-15 08:10 | 2020-04-15 08:20 |   supplier2 |  9.00 |\n| 2020-04-15 08:10 | 2020-04-15 08:20 |   supplier1 |  1.00 |\n+------------------+------------------+-------------+-------+\n~~~\n\n### ROLLUP\n\n~~~sql\n#ROLLUP(a, b) 等同于 GROUPING SETS ((a), (a, b), ())\nSELECT window_start, window_end, supplier_id, SUM(price) as price\nFROM TABLE(\n    TUMBLE(TABLE Bid, DESCRIPTOR(bidtime), INTERVAL '10' MINUTES))\nGROUP BY window_start, window_end, ROLLUP (supplier_id);\n~~~\n\n### CUBE\n\n~~~sql\n#CUBE(a, b) 等同于 GROUPING SETS ((a), (b), (a, b), ())\nSELECT window_start, window_end, item, supplier_id, SUM(price) as price\n  FROM TABLE(\n    TUMBLE(TABLE Bid, DESCRIPTOR(bidtime), INTERVAL '10' MINUTES))\n  GROUP BY window_start, window_end, CUBE (supplier_id, item);\n~~~\n\n## demo\n\nhttps://xie.infoq.cn/article/c664e0a89afb2110db4f18af9\n\n## Window Top-N\n\n只适用流处理模式\n\n计算每 10 分钟内销售额最高的前 3 名供应商。\n\n~~~sql\nSELECT *\n  FROM (\n    SELECT *, \n        ROW_NUMBER() OVER (PARTITION BY window_start, window_end \n            ORDER BY price DESC) as rownum\n    FROM (\n      SELECT window_start, window_end, supplier_id, SUM(price) as price, COUNT(*) as cnt\n      FROM TABLE(\n        TUMBLE(TABLE Bid, DESCRIPTOR(bidtime), INTERVAL '10' MINUTES))\n      GROUP BY window_start, window_end, supplier_id\n    )\n  ) WHERE rownum <= 3;\n  \n  \n+------------------+------------------+-------------+-------+-----+--------+\n|     window_start |       window_end | supplier_id | price | cnt | rownum |\n+------------------+------------------+-------------+-------+-----+--------+\n| 2020-04-15 08:00 | 2020-04-15 08:10 |   supplier1 |  6.00 |   2 |      1 |\n| 2020-04-15 08:00 | 2020-04-15 08:10 |   supplier4 |  5.00 |   1 |      2 |\n| 2020-04-15 08:00 | 2020-04-15 08:10 |   supplier2 |  4.00 |   1 |      3 |\n| 2020-04-15 08:10 | 2020-04-15 08:20 |   supplier5 |  6.00 |   1 |      1 |\n| 2020-04-15 08:10 | 2020-04-15 08:20 |   supplier2 |  3.00 |   1 |      2 |\n| 2020-04-15 08:10 | 2020-04-15 08:20 |   supplier3 |  2.00 |   1 |      3 |\n+------------------+------------------+-------------+-------+-----+--------+\n~~~\n\n\n\n\n\n## 表的参数配置\n\n### jdbc\n\n~~~shell\ncreate table dim (\n  dim varchar ,\n  channel_eight_role_code varchar ,\n  channel_source_code varchar,\n  CHANNEL_INFO_ID varchar\n) with(\n  -- 声明连接器类型。flink会通过spi找到连接器，并且进行参数匹配\n  'connector.type' = 'jdbc',\n  \n  -- jdbc的url\n  'connector.url' = 'jdbc:mysql://10.25.76.173:3310/ogg_syncer?useUnicode=true&characterEncoding=UTF-8&useSSL=false',\n  \n  -- 表名称\n  'connector.table' = 'epcis_epcisbase_channel_info',\n  \n  -- 驱动类型\n  'connector.driver' = 'com.mysql.jdbc.Driver',\n  \n  -- 用过名和密码\n  'connector.username' = 'root',\n  'connector.password' = 'root',\n\n  -- jdbc作为维表的时候，缓存时间。cache默认未开启。\n  'connector.lookup.cache.ttl' = '60s',\n  \n  --  jdbc作为维表的时候，缓存的最大行数。cache默认未开启。\n  'connector.lookup.cache.max-rows' = '100000',\n  \n  -- jdbc作为维表的时候，如果查询失败，最大查询次数\n  'connector.lookup.max-retries' = '3',\n  \n  -- jdbc写入缓存的最大行数。默认值5000\n  'connector.write.flush.max-rows' = '5000',\n  \n  -- jdbc 写入缓存flush时间间隔。默认为0，立即写入\n  'connector.write.flush.interval' = '2s',\n  \n  -- 写入失败，最大重试次数\n  'connector.write.max-retries' = '3' \n);\n\n~~~\n\n# flinkCDC进行数据迁移\n\n### 增量读取事实表，关联维度表，间隔+批次写入ck中，完成数据的迁移\n\n#### sql实现数据的读取\n\n~~~java\npackage cdc;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport com.alibaba.ververica.cdc.connectors.mysql.MySQLSource;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.apache.flink.api.common.functions.MapFunction;\nimport org.apache.flink.streaming.api.datastream.DataStream;\nimport org.apache.flink.streaming.api.datastream.DataStreamSource;\nimport org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.streaming.api.functions.source.SourceFunction;\nimport org.apache.flink.table.api.Table;\nimport org.apache.flink.table.api.TableResult;\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\nimport org.apache.flink.types.Row;\n\nimport java.util.Date;\nimport java.util.Properties;\n\n/**\n * @author nove\n * @version 1.0\n * @date 2021/12/10 16:55\n * cdc迁移数据\n */\npublic class DateTrans {\n    @Data\n    @AllArgsConstructor\n    @NoArgsConstructor\n    public static class Student{\n        private Integer id;\n        private String name;\n        private Integer age;\n    }\n\n    @Data\n    @AllArgsConstructor\n    @NoArgsConstructor\n    public  static class OrderTb   {\n        private Integer id;\n        private String serialNo;\n        private Integer price;\n        private Date time;\n    }\n    public static void main(String[] args) {\n        Properties properties = new Properties();\n        properties.put(\"snapshot.mode\",\"schema_only\");//debezium增量获取方式配置\n\n        //事实表的增量获取\n        SourceFunction<JSONObject> factTb = MySQLSource.<JSONObject>builder()\n                .hostname(\"47.108.204.135\")\n                .port(3310)\n                .databaseList(\"company\") // monitor all tables under inventory database\n                .tableList(\"company.order_tb\")//库名+表名字，逗号分隔\n                .username(\"root\")\n                .password(\"hDtoLDuI\")\n                .debeziumProperties(properties)\n                .deserializer(new CdcDwdDeserializationSchema()) // converts SourceRecord to String\n                .build();\n\n        //维度表的获取\n        SourceFunction<JSONObject> dimTb = MySQLSource.<JSONObject>builder()\n                .hostname(\"47.108.204.135\")\n                .port(3310)\n                .databaseList(\"company\") // monitor all tables under inventory database\n                .tableList(\"company.student\")//库名+表名字，逗号分隔\n                .username(\"root\")\n                .password(\"****\")\n                .deserializer(new CdcDwdDeserializationSchema()) // converts SourceRecord to String\n                .build();\n\n\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\n\n        DataStreamSource<JSONObject> factSource = env.addSource(factTb);\n        DataStreamSource<JSONObject> dimSource = env.addSource(dimTb);\n\n\n        SingleOutputStreamOperator<OrderTb> factTbDs = factSource.map(new MapFunction<JSONObject, OrderTb>() {\n            @Override\n            public OrderTb map(JSONObject value) throws Exception {\n                return JSON.parseObject(value.toString(), OrderTb.class);\n            }\n        });\n        SingleOutputStreamOperator<Student> dimTbDs = dimSource.map(new MapFunction<JSONObject, Student>() {\n            @Override\n            public Student map(JSONObject value) throws Exception {\n                return JSON.parseObject(value.toString(), Student.class);\n            }\n        });\n\n\n        tableEnv.createTemporaryView(\"fact\",factTbDs);\n        tableEnv.createTemporaryView(\"dim\",dimTbDs);\n\n\n        Table table = tableEnv.sqlQuery(\"select * from fact a join dim b on a.id = b.id\");\n\n\n        table.execute().print();\n    }\n}\n\n\n~~~\n\n","slug":"flink的CDC技术","published":1,"updated":"2021-12-30T07:47:49.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyv8edwd000138qh3sq64v31","content":"<h1 id=\"flink的CDC技术\"><a href=\"#flink的CDC技术\" class=\"headerlink\" title=\"flink的CDC技术\"></a>flink的CDC技术</h1><h2 id=\"从mysql的binlog谈起\"><a href=\"#从mysql的binlog谈起\" class=\"headerlink\" title=\"从mysql的binlog谈起\"></a>从mysql的binlog谈起</h2><ul>\n<li>记录所有的数据变更和写入</li>\n<li>用于主从复制和数据恢复</li>\n<li>必须提交了事务才能记录binlog</li>\n<li>重启，手动刷新和日志文件大于了指定大小的时候，生成新的日志文件</li>\n<li>日志格式<ul>\n<li>Statement：记录执行语句，（在主从复制的时候特定的函数会出现特定的问题）</li>\n<li>Row：记录所有更改前后的内容，（不会出现特定函数的问题，会有大量的日志文件，例如修改操作）</li>\n<li>Mixed：结核上述两种，按照情况选择要使用的格式</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h2><ul>\n<li><p>能够捕获所有数据的变化，捕获完整的变更记录。在异地容灾，数据备份等场景中得到广泛应用，如果是基于查询的 CDC 有可能导致两次查询的中间一部分数据丢失</p>\n</li>\n<li><p>每次 DML 操作均有记录无需像查询 CDC 这样发起全表扫描进行过滤，拥有更高的效率和性能，具有低延迟，不增加数据库负载的优势</p>\n</li>\n<li><p>无需入侵业务，业务解耦，无需更改业务模型</p>\n</li>\n<li><p>捕获删除事件和捕获旧记录的状态，在查询 CDC 中，周期的查询无法感知中间数据是否删除</p>\n</li>\n</ul>\n<h2 id=\"kafka\"><a href=\"#kafka\" class=\"headerlink\" title=\"kafka\"></a>kafka</h2><ul>\n<li>Debezium构建于kafka上</li>\n<li>source，sink，broker的概念</li>\n</ul>\n<h2 id=\"Debezium\"><a href=\"#Debezium\" class=\"headerlink\" title=\"Debezium\"></a>Debezium</h2><ul>\n<li><p>开源的分布式平台</p>\n</li>\n<li><p>绑定数据库后可以对数据库的数据变更做出及时的相应</p>\n</li>\n<li><p>构建于kafka的部署模式&amp;独立部署的模式</p>\n</li>\n<li><p>固定的json响应格式</p>\n</li>\n</ul>\n<pre class=\"language-none\"><code class=\"language-none\">&#123; &quot;schema&quot;: &#123;    ...  &#125;, &quot;payload&quot;: &#123;    ... &#125;, &quot;schema&quot;: &#123;    ... &#125;, &quot;payload&quot;: &#123;    ... &#125;, &#125;</code></pre>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Item</th>\n<th align=\"left\">Field name</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><code>schema</code></td>\n<td align=\"left\">The first <code>schema</code> field is part of the event key. It specifies a Kafka Connect schema that describes what is in the event key’s <code>payload</code> portion. In other words, the first <code>schema</code> field describes the structure of the primary key, or the unique key if the table does not have a primary key, for the table that was changed.  It is possible to override the table’s primary key by setting the <a href=\"https://debezium.io/documentation/reference/1.3/connectors/mysql.html#mysql-property-message-key-columns\"><code>message.key.columns</code> connector configuration property</a>. In this case, the first schema field describes the structure of the key identified by that property.</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><code>payload</code></td>\n<td align=\"left\">The first <code>payload</code> field is part of the event key. It has the structure described by the previous <code>schema</code> field and it contains the key for the row that was changed.</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><code>schema</code></td>\n<td align=\"left\">The second <code>schema</code> field is part of the event value. It specifies the Kafka Connect schema that describes what is in the event value’s <code>payload</code> portion. In other words, the second <code>schema</code> describes the structure of the row that was changed. Typically, this schema contains nested schemas.</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><code>payload</code></td>\n<td align=\"left\">The second <code>payload</code> field is part of the event value. It has the structure described by the previous <code>schema</code> field and it contains the actual data for the row that was changed.</td>\n</tr>\n</tbody></table>\n<h2 id=\"flink\"><a href=\"#flink\" class=\"headerlink\" title=\"flink\"></a>flink</h2><h3 id=\"debezium嵌入flink\"><a href=\"#debezium嵌入flink\" class=\"headerlink\" title=\"debezium嵌入flink\"></a>debezium嵌入flink</h3><ul>\n<li><p>返回格式</p>\n<pre class=\"language-json\" data-language=\"json\"><code class=\"language-json\">Struct<span class=\"token punctuation\">&#123;</span>after=Struct<span class=\"token punctuation\">&#123;</span>id=<span class=\"token number\">2</span><span class=\"token punctuation\">,</span>name=kate<span class=\"token punctuation\">,</span>age=<span class=\"token number\">28</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>source=Struct<span class=\"token punctuation\">&#123;</span>version=<span class=\"token number\">1.2</span>.<span class=\"token number\">1</span>.Final<span class=\"token punctuation\">,</span>connector=mysql<span class=\"token punctuation\">,</span>name=mysql_binlog_source<span class=\"token punctuation\">,</span>ts_ms=<span class=\"token number\">0</span><span class=\"token punctuation\">,</span>snapshot=<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>db=company<span class=\"token punctuation\">,</span>table=student<span class=\"token punctuation\">,</span>server_id=<span class=\"token number\">0</span><span class=\"token punctuation\">,</span>file=mysql-bin.<span class=\"token number\">000001</span><span class=\"token punctuation\">,</span>pos=<span class=\"token number\">4755</span><span class=\"token punctuation\">,</span>row=<span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>op=c<span class=\"token punctuation\">,</span>ts_ms=<span class=\"token number\">1637292711750</span><span class=\"token punctuation\">&#125;</span>\n <span class=\"token number\">1</span>，同时存在 beforeStruct 跟 afterStruct数据的话，就代表是update的数据\n <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>只存在 beforeStruct 就是delete数据\n <span class=\"token number\">3</span>，只存在 afterStruct数据 就是insert数据</code></pre></li>\n<li><p>转化为json，解析</p>\n</li>\n</ul>\n<h1 id=\"flinkSQL\"><a href=\"#flinkSQL\" class=\"headerlink\" title=\"flinkSQL\"></a>flinkSQL</h1><h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> TO_TIMESTAMP<span class=\"token punctuation\">(</span>tm_v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> tm\n<span class=\"token comment\">#String 转化为时间类型</span></code></pre>\n\n<h2 id=\"窗口函数\"><a href=\"#窗口函数\" class=\"headerlink\" title=\"窗口函数\"></a>窗口函数</h2><h3 id=\"滚动窗口\"><a href=\"#滚动窗口\" class=\"headerlink\" title=\"滚动窗口\"></a>滚动窗口</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#窗口10s</span>\n<span class=\"token keyword\">select</span> userId\n<span class=\"token punctuation\">,</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> orderCount\n<span class=\"token punctuation\">,</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>money<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> maxMoney\n<span class=\"token punctuation\">,</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>money<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> minMoney\n <span class=\"token punctuation\">,</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>createTime<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">,</span>tumble_start<span class=\"token punctuation\">(</span>createTime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'10'</span> <span class=\"token keyword\">SECOND</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">,</span>tumble_end<span class=\"token punctuation\">(</span>createTime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'10'</span> <span class=\"token keyword\">SECOND</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">from</span> tb_order\n <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> userId<span class=\"token punctuation\">,</span>tumble<span class=\"token punctuation\">(</span>createTime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'10'</span> <span class=\"token keyword\">SECOND</span><span class=\"token punctuation\">)</span> </code></pre>\n\n<h3 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#窗口60s，间隔5s</span>\n<span class=\"token keyword\">select</span> userId\n<span class=\"token punctuation\">,</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> orderCount\n<span class=\"token punctuation\">,</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>money<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> maxMoney\n<span class=\"token punctuation\">,</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>money<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> minMoney\n <span class=\"token punctuation\">,</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>createTime<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">,</span>hop_start<span class=\"token punctuation\">(</span>createTime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'5'</span> <span class=\"token keyword\">SECOND</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'60'</span> <span class=\"token keyword\">SECOND</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">,</span>hop_end<span class=\"token punctuation\">(</span>createTime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'5'</span> <span class=\"token keyword\">SECOND</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'60'</span> <span class=\"token keyword\">SECOND</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">from</span> tb_order\n <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> userId<span class=\"token punctuation\">,</span>hop<span class=\"token punctuation\">(</span>createTime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'5'</span> <span class=\"token keyword\">SECOND</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'60'</span> <span class=\"token keyword\">SECOND</span><span class=\"token punctuation\">)</span> </code></pre>\n\n<h3 id=\"累计窗口\"><a href=\"#累计窗口\" class=\"headerlink\" title=\"累计窗口\"></a>累计窗口</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#每隔10s统计今天的数据</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> print_sink\n<span class=\"token keyword\">select</span>\n date_format<span class=\"token punctuation\">(</span>window_start<span class=\"token punctuation\">,</span> <span class=\"token string\">'HH:mm:ss'</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">,</span> date_format<span class=\"token punctuation\">(</span>window_end<span class=\"token punctuation\">,</span> <span class=\"token string\">'HH:mm:ss'</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">,</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">,</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">distinct</span> id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">TABLE</span><span class=\"token punctuation\">(</span>\n    CUMULATE<span class=\"token punctuation\">(</span><span class=\"token keyword\">TABLE</span> datagen_source<span class=\"token punctuation\">,</span> DESCRIPTOR<span class=\"token punctuation\">(</span>proc_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'10'</span> <span class=\"token keyword\">SECOND</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'1'</span> <span class=\"token keyword\">DAY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> window_start<span class=\"token punctuation\">,</span> window_end</code></pre>\n\n<h2 id=\"cube函数\"><a href=\"#cube函数\" class=\"headerlink\" title=\"cube函数\"></a>cube函数</h2><h3 id=\"GROUPING-SETS\"><a href=\"#GROUPING-SETS\" class=\"headerlink\" title=\"GROUPING SETS\"></a>GROUPING SETS</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#GROUP SETS 中的表达式可以包含 0 个或多个字段，0 个表示所有行聚合到 1 组。</span>\n<span class=\"token keyword\">SELECT</span> window_start<span class=\"token punctuation\">,</span> window_end<span class=\"token punctuation\">,</span> supplier_id<span class=\"token punctuation\">,</span> <span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> price\n  <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">TABLE</span><span class=\"token punctuation\">(</span>\n    TUMBLE<span class=\"token punctuation\">(</span><span class=\"token keyword\">TABLE</span> Bid<span class=\"token punctuation\">,</span> DESCRIPTOR<span class=\"token punctuation\">(</span>bidtime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'10'</span> MINUTES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> window_start<span class=\"token punctuation\">,</span> window_end<span class=\"token punctuation\">,</span> GROUPING SETS <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>supplier_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 在 Window 内，按照 supplier_id 分组，和部分组两个规则</span>\n  \n<span class=\"token operator\">+</span><span class=\"token comment\">------------------+------------------+-------------+-------+</span>\n<span class=\"token operator\">|</span>     window_start <span class=\"token operator\">|</span>       window_end <span class=\"token operator\">|</span> supplier_id <span class=\"token operator\">|</span> price <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------------------+------------------+-------------+-------+</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">00</span> <span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">10</span> <span class=\"token operator\">|</span>      <span class=\"token punctuation\">(</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">11.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">00</span> <span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">10</span> <span class=\"token operator\">|</span>   supplier2 <span class=\"token operator\">|</span>  <span class=\"token number\">5.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">00</span> <span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">10</span> <span class=\"token operator\">|</span>   supplier1 <span class=\"token operator\">|</span>  <span class=\"token number\">6.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">10</span> <span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">20</span> <span class=\"token operator\">|</span>      <span class=\"token punctuation\">(</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">10.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">10</span> <span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">20</span> <span class=\"token operator\">|</span>   supplier2 <span class=\"token operator\">|</span>  <span class=\"token number\">9.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">10</span> <span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">20</span> <span class=\"token operator\">|</span>   supplier1 <span class=\"token operator\">|</span>  <span class=\"token number\">1.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------------------+------------------+-------------+-------+</span></code></pre>\n\n<h3 id=\"ROLLUP\"><a href=\"#ROLLUP\" class=\"headerlink\" title=\"ROLLUP\"></a>ROLLUP</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#ROLLUP(a, b) 等同于 GROUPING SETS ((a), (a, b), ())</span>\n<span class=\"token keyword\">SELECT</span> window_start<span class=\"token punctuation\">,</span> window_end<span class=\"token punctuation\">,</span> supplier_id<span class=\"token punctuation\">,</span> <span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> price\n<span class=\"token keyword\">FROM</span> <span class=\"token keyword\">TABLE</span><span class=\"token punctuation\">(</span>\n    TUMBLE<span class=\"token punctuation\">(</span><span class=\"token keyword\">TABLE</span> Bid<span class=\"token punctuation\">,</span> DESCRIPTOR<span class=\"token punctuation\">(</span>bidtime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'10'</span> MINUTES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> window_start<span class=\"token punctuation\">,</span> window_end<span class=\"token punctuation\">,</span> ROLLUP <span class=\"token punctuation\">(</span>supplier_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"CUBE\"><a href=\"#CUBE\" class=\"headerlink\" title=\"CUBE\"></a>CUBE</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#CUBE(a, b) 等同于 GROUPING SETS ((a), (b), (a, b), ())</span>\n<span class=\"token keyword\">SELECT</span> window_start<span class=\"token punctuation\">,</span> window_end<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">,</span> supplier_id<span class=\"token punctuation\">,</span> <span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> price\n  <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">TABLE</span><span class=\"token punctuation\">(</span>\n    TUMBLE<span class=\"token punctuation\">(</span><span class=\"token keyword\">TABLE</span> Bid<span class=\"token punctuation\">,</span> DESCRIPTOR<span class=\"token punctuation\">(</span>bidtime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'10'</span> MINUTES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> window_start<span class=\"token punctuation\">,</span> window_end<span class=\"token punctuation\">,</span> CUBE <span class=\"token punctuation\">(</span>supplier_id<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><p><a href=\"https://xie.infoq.cn/article/c664e0a89afb2110db4f18af9\">https://xie.infoq.cn/article/c664e0a89afb2110db4f18af9</a></p>\n<h2 id=\"Window-Top-N\"><a href=\"#Window-Top-N\" class=\"headerlink\" title=\"Window Top-N\"></a>Window Top-N</h2><p>只适用流处理模式</p>\n<p>计算每 10 分钟内销售额最高的前 3 名供应商。</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span>\n  <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> \n        ROW_NUMBER<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> window_start<span class=\"token punctuation\">,</span> window_end \n            <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> rownum\n    <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">SELECT</span> window_start<span class=\"token punctuation\">,</span> window_end<span class=\"token punctuation\">,</span> supplier_id<span class=\"token punctuation\">,</span> <span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> price<span class=\"token punctuation\">,</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> cnt\n      <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">TABLE</span><span class=\"token punctuation\">(</span>\n        TUMBLE<span class=\"token punctuation\">(</span><span class=\"token keyword\">TABLE</span> Bid<span class=\"token punctuation\">,</span> DESCRIPTOR<span class=\"token punctuation\">(</span>bidtime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'10'</span> MINUTES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> window_start<span class=\"token punctuation\">,</span> window_end<span class=\"token punctuation\">,</span> supplier_id\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token keyword\">WHERE</span> rownum <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  \n  \n<span class=\"token operator\">+</span><span class=\"token comment\">------------------+------------------+-------------+-------+-----+--------+</span>\n<span class=\"token operator\">|</span>     window_start <span class=\"token operator\">|</span>       window_end <span class=\"token operator\">|</span> supplier_id <span class=\"token operator\">|</span> price <span class=\"token operator\">|</span> cnt <span class=\"token operator\">|</span> rownum <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------------------+------------------+-------------+-------+-----+--------+</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">00</span> <span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">10</span> <span class=\"token operator\">|</span>   supplier1 <span class=\"token operator\">|</span>  <span class=\"token number\">6.00</span> <span class=\"token operator\">|</span>   <span class=\"token number\">2</span> <span class=\"token operator\">|</span>      <span class=\"token number\">1</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">00</span> <span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">10</span> <span class=\"token operator\">|</span>   supplier4 <span class=\"token operator\">|</span>  <span class=\"token number\">5.00</span> <span class=\"token operator\">|</span>   <span class=\"token number\">1</span> <span class=\"token operator\">|</span>      <span class=\"token number\">2</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">00</span> <span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">10</span> <span class=\"token operator\">|</span>   supplier2 <span class=\"token operator\">|</span>  <span class=\"token number\">4.00</span> <span class=\"token operator\">|</span>   <span class=\"token number\">1</span> <span class=\"token operator\">|</span>      <span class=\"token number\">3</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">10</span> <span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">20</span> <span class=\"token operator\">|</span>   supplier5 <span class=\"token operator\">|</span>  <span class=\"token number\">6.00</span> <span class=\"token operator\">|</span>   <span class=\"token number\">1</span> <span class=\"token operator\">|</span>      <span class=\"token number\">1</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">10</span> <span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">20</span> <span class=\"token operator\">|</span>   supplier2 <span class=\"token operator\">|</span>  <span class=\"token number\">3.00</span> <span class=\"token operator\">|</span>   <span class=\"token number\">1</span> <span class=\"token operator\">|</span>      <span class=\"token number\">2</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">10</span> <span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">20</span> <span class=\"token operator\">|</span>   supplier3 <span class=\"token operator\">|</span>  <span class=\"token number\">2.00</span> <span class=\"token operator\">|</span>   <span class=\"token number\">1</span> <span class=\"token operator\">|</span>      <span class=\"token number\">3</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------------------+------------------+-------------+-------+-----+--------+</span></code></pre>\n\n\n\n\n\n<h2 id=\"表的参数配置\"><a href=\"#表的参数配置\" class=\"headerlink\" title=\"表的参数配置\"></a>表的参数配置</h2><h3 id=\"jdbc\"><a href=\"#jdbc\" class=\"headerlink\" title=\"jdbc\"></a>jdbc</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">create table dim <span class=\"token punctuation\">(</span>\n  dim varchar ,\n  channel_eight_role_code varchar ,\n  channel_source_code varchar,\n  CHANNEL_INFO_ID varchar\n<span class=\"token punctuation\">)</span> with<span class=\"token punctuation\">(</span>\n  -- 声明连接器类型。flink会通过spi找到连接器，并且进行参数匹配\n  <span class=\"token string\">'connector.type'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'jdbc'</span>,\n  \n  -- jdbc的url\n  <span class=\"token string\">'connector.url'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'jdbc:mysql://10.25.76.173:3310/ogg_syncer?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false'</span>,\n  \n  -- 表名称\n  <span class=\"token string\">'connector.table'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'epcis_epcisbase_channel_info'</span>,\n  \n  -- 驱动类型\n  <span class=\"token string\">'connector.driver'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'com.mysql.jdbc.Driver'</span>,\n  \n  -- 用过名和密码\n  <span class=\"token string\">'connector.username'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'root'</span>,\n  <span class=\"token string\">'connector.password'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'root'</span>,\n\n  -- jdbc作为维表的时候，缓存时间。cache默认未开启。\n  <span class=\"token string\">'connector.lookup.cache.ttl'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'60s'</span>,\n  \n  --  jdbc作为维表的时候，缓存的最大行数。cache默认未开启。\n  <span class=\"token string\">'connector.lookup.cache.max-rows'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'100000'</span>,\n  \n  -- jdbc作为维表的时候，如果查询失败，最大查询次数\n  <span class=\"token string\">'connector.lookup.max-retries'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'3'</span>,\n  \n  -- jdbc写入缓存的最大行数。默认值5000\n  <span class=\"token string\">'connector.write.flush.max-rows'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'5000'</span>,\n  \n  -- jdbc 写入缓存flush时间间隔。默认为0，立即写入\n  <span class=\"token string\">'connector.write.flush.interval'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'2s'</span>,\n  \n  -- 写入失败，最大重试次数\n  <span class=\"token string\">'connector.write.max-retries'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'3'</span> \n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n\n<h1 id=\"flinkCDC进行数据迁移\"><a href=\"#flinkCDC进行数据迁移\" class=\"headerlink\" title=\"flinkCDC进行数据迁移\"></a>flinkCDC进行数据迁移</h1><h3 id=\"增量读取事实表，关联维度表，间隔-批次写入ck中，完成数据的迁移\"><a href=\"#增量读取事实表，关联维度表，间隔-批次写入ck中，完成数据的迁移\" class=\"headerlink\" title=\"增量读取事实表，关联维度表，间隔+批次写入ck中，完成数据的迁移\"></a>增量读取事实表，关联维度表，间隔+批次写入ck中，完成数据的迁移</h3><h4 id=\"sql实现数据的读取\"><a href=\"#sql实现数据的读取\" class=\"headerlink\" title=\"sql实现数据的读取\"></a>sql实现数据的读取</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cdc</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span>JSON<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>ververica<span class=\"token punctuation\">.</span>cdc<span class=\"token punctuation\">.</span>connectors<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MySQLSource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AllArgsConstructor</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NoArgsConstructor</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MapFunction</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>datastream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataStream</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>datastream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataStreamSource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>datastream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SingleOutputStreamOperator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>environment<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StreamExecutionEnvironment</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SourceFunction</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Table</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TableResult</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>bridge<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StreamTableEnvironment</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>types<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Row</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author nove\n * @version 1.0\n * @date 2021/12/10 16:55\n * cdc迁移数据\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DateTrans</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Data</span>\n    <span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n    <span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Data</span>\n    <span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n    <span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n    <span class=\"token keyword\">public</span>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderTb</span>   <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> serialNo<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> price<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> time<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Properties</span> properties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"snapshot.mode\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"schema_only\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//debezium增量获取方式配置</span>\n\n        <span class=\"token comment\">//事实表的增量获取</span>\n        <span class=\"token class-name\">SourceFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">></span></span> factTb <span class=\"token operator\">=</span> <span class=\"token class-name\">MySQLSource</span><span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">></span></span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">hostname</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"47.108.204.135\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">port</span><span class=\"token punctuation\">(</span><span class=\"token number\">3310</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">databaseList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"company\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// monitor all tables under inventory database</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">tableList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"company.order_tb\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//库名+表名字，逗号分隔</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">username</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">password</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hDtoLDuI\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">debeziumProperties</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">deserializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CdcDwdDeserializationSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// converts SourceRecord to String</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//维度表的获取</span>\n        <span class=\"token class-name\">SourceFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">></span></span> dimTb <span class=\"token operator\">=</span> <span class=\"token class-name\">MySQLSource</span><span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">></span></span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">hostname</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"47.108.204.135\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">port</span><span class=\"token punctuation\">(</span><span class=\"token number\">3310</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">databaseList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"company\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// monitor all tables under inventory database</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">tableList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"company.student\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//库名+表名字，逗号分隔</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">username</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">password</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"****\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">deserializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CdcDwdDeserializationSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// converts SourceRecord to String</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token class-name\">StreamExecutionEnvironment</span> env <span class=\"token operator\">=</span> <span class=\"token class-name\">StreamExecutionEnvironment</span><span class=\"token punctuation\">.</span><span class=\"token function\">getExecutionEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StreamTableEnvironment</span> tableEnv <span class=\"token operator\">=</span> <span class=\"token class-name\">StreamTableEnvironment</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">DataStreamSource</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">></span></span> factSource <span class=\"token operator\">=</span> env<span class=\"token punctuation\">.</span><span class=\"token function\">addSource</span><span class=\"token punctuation\">(</span>factTb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">DataStreamSource</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">></span></span> dimSource <span class=\"token operator\">=</span> env<span class=\"token punctuation\">.</span><span class=\"token function\">addSource</span><span class=\"token punctuation\">(</span>dimTb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token class-name\">SingleOutputStreamOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderTb</span><span class=\"token punctuation\">></span></span> factTbDs <span class=\"token operator\">=</span> factSource<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MapFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">OrderTb</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderTb</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JSONObject</span> value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">OrderTb</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">SingleOutputStreamOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> dimTbDs <span class=\"token operator\">=</span> dimSource<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MapFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JSONObject</span> value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        tableEnv<span class=\"token punctuation\">.</span><span class=\"token function\">createTemporaryView</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fact\"</span><span class=\"token punctuation\">,</span>factTbDs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tableEnv<span class=\"token punctuation\">.</span><span class=\"token function\">createTemporaryView</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dim\"</span><span class=\"token punctuation\">,</span>dimTbDs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token class-name\">Table</span> table <span class=\"token operator\">=</span> tableEnv<span class=\"token punctuation\">.</span><span class=\"token function\">sqlQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from fact a join dim b on a.id = b.id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        table<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n</code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"flink的CDC技术\"><a href=\"#flink的CDC技术\" class=\"headerlink\" title=\"flink的CDC技术\"></a>flink的CDC技术</h1><h2 id=\"从mysql的binlog谈起\"><a href=\"#从mysql的binlog谈起\" class=\"headerlink\" title=\"从mysql的binlog谈起\"></a>从mysql的binlog谈起</h2><ul>\n<li>记录所有的数据变更和写入</li>\n<li>用于主从复制和数据恢复</li>\n<li>必须提交了事务才能记录binlog</li>\n<li>重启，手动刷新和日志文件大于了指定大小的时候，生成新的日志文件</li>\n<li>日志格式<ul>\n<li>Statement：记录执行语句，（在主从复制的时候特定的函数会出现特定的问题）</li>\n<li>Row：记录所有更改前后的内容，（不会出现特定函数的问题，会有大量的日志文件，例如修改操作）</li>\n<li>Mixed：结核上述两种，按照情况选择要使用的格式</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h2><ul>\n<li><p>能够捕获所有数据的变化，捕获完整的变更记录。在异地容灾，数据备份等场景中得到广泛应用，如果是基于查询的 CDC 有可能导致两次查询的中间一部分数据丢失</p>\n</li>\n<li><p>每次 DML 操作均有记录无需像查询 CDC 这样发起全表扫描进行过滤，拥有更高的效率和性能，具有低延迟，不增加数据库负载的优势</p>\n</li>\n<li><p>无需入侵业务，业务解耦，无需更改业务模型</p>\n</li>\n<li><p>捕获删除事件和捕获旧记录的状态，在查询 CDC 中，周期的查询无法感知中间数据是否删除</p>\n</li>\n</ul>\n<h2 id=\"kafka\"><a href=\"#kafka\" class=\"headerlink\" title=\"kafka\"></a>kafka</h2><ul>\n<li>Debezium构建于kafka上</li>\n<li>source，sink，broker的概念</li>\n</ul>\n<h2 id=\"Debezium\"><a href=\"#Debezium\" class=\"headerlink\" title=\"Debezium\"></a>Debezium</h2><ul>\n<li><p>开源的分布式平台</p>\n</li>\n<li><p>绑定数据库后可以对数据库的数据变更做出及时的相应</p>\n</li>\n<li><p>构建于kafka的部署模式&amp;独立部署的模式</p>\n</li>\n<li><p>固定的json响应格式</p>\n</li>\n</ul>\n<pre class=\"language-none\"><code class=\"language-none\">&#123; &quot;schema&quot;: &#123;    ...  &#125;, &quot;payload&quot;: &#123;    ... &#125;, &quot;schema&quot;: &#123;    ... &#125;, &quot;payload&quot;: &#123;    ... &#125;, &#125;</code></pre>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Item</th>\n<th align=\"left\">Field name</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><code>schema</code></td>\n<td align=\"left\">The first <code>schema</code> field is part of the event key. It specifies a Kafka Connect schema that describes what is in the event key’s <code>payload</code> portion. In other words, the first <code>schema</code> field describes the structure of the primary key, or the unique key if the table does not have a primary key, for the table that was changed.  It is possible to override the table’s primary key by setting the <a href=\"https://debezium.io/documentation/reference/1.3/connectors/mysql.html#mysql-property-message-key-columns\"><code>message.key.columns</code> connector configuration property</a>. In this case, the first schema field describes the structure of the key identified by that property.</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><code>payload</code></td>\n<td align=\"left\">The first <code>payload</code> field is part of the event key. It has the structure described by the previous <code>schema</code> field and it contains the key for the row that was changed.</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><code>schema</code></td>\n<td align=\"left\">The second <code>schema</code> field is part of the event value. It specifies the Kafka Connect schema that describes what is in the event value’s <code>payload</code> portion. In other words, the second <code>schema</code> describes the structure of the row that was changed. Typically, this schema contains nested schemas.</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><code>payload</code></td>\n<td align=\"left\">The second <code>payload</code> field is part of the event value. It has the structure described by the previous <code>schema</code> field and it contains the actual data for the row that was changed.</td>\n</tr>\n</tbody></table>\n<h2 id=\"flink\"><a href=\"#flink\" class=\"headerlink\" title=\"flink\"></a>flink</h2><h3 id=\"debezium嵌入flink\"><a href=\"#debezium嵌入flink\" class=\"headerlink\" title=\"debezium嵌入flink\"></a>debezium嵌入flink</h3><ul>\n<li><p>返回格式</p>\n<pre class=\"language-json\" data-language=\"json\"><code class=\"language-json\">Struct<span class=\"token punctuation\">&#123;</span>after=Struct<span class=\"token punctuation\">&#123;</span>id=<span class=\"token number\">2</span><span class=\"token punctuation\">,</span>name=kate<span class=\"token punctuation\">,</span>age=<span class=\"token number\">28</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>source=Struct<span class=\"token punctuation\">&#123;</span>version=<span class=\"token number\">1.2</span>.<span class=\"token number\">1</span>.Final<span class=\"token punctuation\">,</span>connector=mysql<span class=\"token punctuation\">,</span>name=mysql_binlog_source<span class=\"token punctuation\">,</span>ts_ms=<span class=\"token number\">0</span><span class=\"token punctuation\">,</span>snapshot=<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>db=company<span class=\"token punctuation\">,</span>table=student<span class=\"token punctuation\">,</span>server_id=<span class=\"token number\">0</span><span class=\"token punctuation\">,</span>file=mysql-bin.<span class=\"token number\">000001</span><span class=\"token punctuation\">,</span>pos=<span class=\"token number\">4755</span><span class=\"token punctuation\">,</span>row=<span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>op=c<span class=\"token punctuation\">,</span>ts_ms=<span class=\"token number\">1637292711750</span><span class=\"token punctuation\">&#125;</span>\n <span class=\"token number\">1</span>，同时存在 beforeStruct 跟 afterStruct数据的话，就代表是update的数据\n <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>只存在 beforeStruct 就是delete数据\n <span class=\"token number\">3</span>，只存在 afterStruct数据 就是insert数据</code></pre></li>\n<li><p>转化为json，解析</p>\n</li>\n</ul>\n<h1 id=\"flinkSQL\"><a href=\"#flinkSQL\" class=\"headerlink\" title=\"flinkSQL\"></a>flinkSQL</h1><h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> TO_TIMESTAMP<span class=\"token punctuation\">(</span>tm_v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> tm\n<span class=\"token comment\">#String 转化为时间类型</span></code></pre>\n\n<h2 id=\"窗口函数\"><a href=\"#窗口函数\" class=\"headerlink\" title=\"窗口函数\"></a>窗口函数</h2><h3 id=\"滚动窗口\"><a href=\"#滚动窗口\" class=\"headerlink\" title=\"滚动窗口\"></a>滚动窗口</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#窗口10s</span>\n<span class=\"token keyword\">select</span> userId\n<span class=\"token punctuation\">,</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> orderCount\n<span class=\"token punctuation\">,</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>money<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> maxMoney\n<span class=\"token punctuation\">,</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>money<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> minMoney\n <span class=\"token punctuation\">,</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>createTime<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">,</span>tumble_start<span class=\"token punctuation\">(</span>createTime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'10'</span> <span class=\"token keyword\">SECOND</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">,</span>tumble_end<span class=\"token punctuation\">(</span>createTime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'10'</span> <span class=\"token keyword\">SECOND</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">from</span> tb_order\n <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> userId<span class=\"token punctuation\">,</span>tumble<span class=\"token punctuation\">(</span>createTime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'10'</span> <span class=\"token keyword\">SECOND</span><span class=\"token punctuation\">)</span> </code></pre>\n\n<h3 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#窗口60s，间隔5s</span>\n<span class=\"token keyword\">select</span> userId\n<span class=\"token punctuation\">,</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> orderCount\n<span class=\"token punctuation\">,</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>money<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> maxMoney\n<span class=\"token punctuation\">,</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>money<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> minMoney\n <span class=\"token punctuation\">,</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>createTime<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">,</span>hop_start<span class=\"token punctuation\">(</span>createTime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'5'</span> <span class=\"token keyword\">SECOND</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'60'</span> <span class=\"token keyword\">SECOND</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">,</span>hop_end<span class=\"token punctuation\">(</span>createTime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'5'</span> <span class=\"token keyword\">SECOND</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'60'</span> <span class=\"token keyword\">SECOND</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">from</span> tb_order\n <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> userId<span class=\"token punctuation\">,</span>hop<span class=\"token punctuation\">(</span>createTime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'5'</span> <span class=\"token keyword\">SECOND</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'60'</span> <span class=\"token keyword\">SECOND</span><span class=\"token punctuation\">)</span> </code></pre>\n\n<h3 id=\"累计窗口\"><a href=\"#累计窗口\" class=\"headerlink\" title=\"累计窗口\"></a>累计窗口</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#每隔10s统计今天的数据</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> print_sink\n<span class=\"token keyword\">select</span>\n date_format<span class=\"token punctuation\">(</span>window_start<span class=\"token punctuation\">,</span> <span class=\"token string\">'HH:mm:ss'</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">,</span> date_format<span class=\"token punctuation\">(</span>window_end<span class=\"token punctuation\">,</span> <span class=\"token string\">'HH:mm:ss'</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">,</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">,</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">distinct</span> id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">TABLE</span><span class=\"token punctuation\">(</span>\n    CUMULATE<span class=\"token punctuation\">(</span><span class=\"token keyword\">TABLE</span> datagen_source<span class=\"token punctuation\">,</span> DESCRIPTOR<span class=\"token punctuation\">(</span>proc_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'10'</span> <span class=\"token keyword\">SECOND</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'1'</span> <span class=\"token keyword\">DAY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> window_start<span class=\"token punctuation\">,</span> window_end</code></pre>\n\n<h2 id=\"cube函数\"><a href=\"#cube函数\" class=\"headerlink\" title=\"cube函数\"></a>cube函数</h2><h3 id=\"GROUPING-SETS\"><a href=\"#GROUPING-SETS\" class=\"headerlink\" title=\"GROUPING SETS\"></a>GROUPING SETS</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#GROUP SETS 中的表达式可以包含 0 个或多个字段，0 个表示所有行聚合到 1 组。</span>\n<span class=\"token keyword\">SELECT</span> window_start<span class=\"token punctuation\">,</span> window_end<span class=\"token punctuation\">,</span> supplier_id<span class=\"token punctuation\">,</span> <span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> price\n  <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">TABLE</span><span class=\"token punctuation\">(</span>\n    TUMBLE<span class=\"token punctuation\">(</span><span class=\"token keyword\">TABLE</span> Bid<span class=\"token punctuation\">,</span> DESCRIPTOR<span class=\"token punctuation\">(</span>bidtime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'10'</span> MINUTES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> window_start<span class=\"token punctuation\">,</span> window_end<span class=\"token punctuation\">,</span> GROUPING SETS <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>supplier_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 在 Window 内，按照 supplier_id 分组，和部分组两个规则</span>\n  \n<span class=\"token operator\">+</span><span class=\"token comment\">------------------+------------------+-------------+-------+</span>\n<span class=\"token operator\">|</span>     window_start <span class=\"token operator\">|</span>       window_end <span class=\"token operator\">|</span> supplier_id <span class=\"token operator\">|</span> price <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------------------+------------------+-------------+-------+</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">00</span> <span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">10</span> <span class=\"token operator\">|</span>      <span class=\"token punctuation\">(</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">11.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">00</span> <span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">10</span> <span class=\"token operator\">|</span>   supplier2 <span class=\"token operator\">|</span>  <span class=\"token number\">5.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">00</span> <span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">10</span> <span class=\"token operator\">|</span>   supplier1 <span class=\"token operator\">|</span>  <span class=\"token number\">6.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">10</span> <span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">20</span> <span class=\"token operator\">|</span>      <span class=\"token punctuation\">(</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">10.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">10</span> <span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">20</span> <span class=\"token operator\">|</span>   supplier2 <span class=\"token operator\">|</span>  <span class=\"token number\">9.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">10</span> <span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">20</span> <span class=\"token operator\">|</span>   supplier1 <span class=\"token operator\">|</span>  <span class=\"token number\">1.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------------------+------------------+-------------+-------+</span></code></pre>\n\n<h3 id=\"ROLLUP\"><a href=\"#ROLLUP\" class=\"headerlink\" title=\"ROLLUP\"></a>ROLLUP</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#ROLLUP(a, b) 等同于 GROUPING SETS ((a), (a, b), ())</span>\n<span class=\"token keyword\">SELECT</span> window_start<span class=\"token punctuation\">,</span> window_end<span class=\"token punctuation\">,</span> supplier_id<span class=\"token punctuation\">,</span> <span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> price\n<span class=\"token keyword\">FROM</span> <span class=\"token keyword\">TABLE</span><span class=\"token punctuation\">(</span>\n    TUMBLE<span class=\"token punctuation\">(</span><span class=\"token keyword\">TABLE</span> Bid<span class=\"token punctuation\">,</span> DESCRIPTOR<span class=\"token punctuation\">(</span>bidtime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'10'</span> MINUTES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> window_start<span class=\"token punctuation\">,</span> window_end<span class=\"token punctuation\">,</span> ROLLUP <span class=\"token punctuation\">(</span>supplier_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"CUBE\"><a href=\"#CUBE\" class=\"headerlink\" title=\"CUBE\"></a>CUBE</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#CUBE(a, b) 等同于 GROUPING SETS ((a), (b), (a, b), ())</span>\n<span class=\"token keyword\">SELECT</span> window_start<span class=\"token punctuation\">,</span> window_end<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">,</span> supplier_id<span class=\"token punctuation\">,</span> <span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> price\n  <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">TABLE</span><span class=\"token punctuation\">(</span>\n    TUMBLE<span class=\"token punctuation\">(</span><span class=\"token keyword\">TABLE</span> Bid<span class=\"token punctuation\">,</span> DESCRIPTOR<span class=\"token punctuation\">(</span>bidtime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'10'</span> MINUTES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> window_start<span class=\"token punctuation\">,</span> window_end<span class=\"token punctuation\">,</span> CUBE <span class=\"token punctuation\">(</span>supplier_id<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><p><a href=\"https://xie.infoq.cn/article/c664e0a89afb2110db4f18af9\">https://xie.infoq.cn/article/c664e0a89afb2110db4f18af9</a></p>\n<h2 id=\"Window-Top-N\"><a href=\"#Window-Top-N\" class=\"headerlink\" title=\"Window Top-N\"></a>Window Top-N</h2><p>只适用流处理模式</p>\n<p>计算每 10 分钟内销售额最高的前 3 名供应商。</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span>\n  <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> \n        ROW_NUMBER<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> window_start<span class=\"token punctuation\">,</span> window_end \n            <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> rownum\n    <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">SELECT</span> window_start<span class=\"token punctuation\">,</span> window_end<span class=\"token punctuation\">,</span> supplier_id<span class=\"token punctuation\">,</span> <span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> price<span class=\"token punctuation\">,</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> cnt\n      <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">TABLE</span><span class=\"token punctuation\">(</span>\n        TUMBLE<span class=\"token punctuation\">(</span><span class=\"token keyword\">TABLE</span> Bid<span class=\"token punctuation\">,</span> DESCRIPTOR<span class=\"token punctuation\">(</span>bidtime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">INTERVAL</span> <span class=\"token string\">'10'</span> MINUTES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> window_start<span class=\"token punctuation\">,</span> window_end<span class=\"token punctuation\">,</span> supplier_id\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token keyword\">WHERE</span> rownum <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  \n  \n<span class=\"token operator\">+</span><span class=\"token comment\">------------------+------------------+-------------+-------+-----+--------+</span>\n<span class=\"token operator\">|</span>     window_start <span class=\"token operator\">|</span>       window_end <span class=\"token operator\">|</span> supplier_id <span class=\"token operator\">|</span> price <span class=\"token operator\">|</span> cnt <span class=\"token operator\">|</span> rownum <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------------------+------------------+-------------+-------+-----+--------+</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">00</span> <span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">10</span> <span class=\"token operator\">|</span>   supplier1 <span class=\"token operator\">|</span>  <span class=\"token number\">6.00</span> <span class=\"token operator\">|</span>   <span class=\"token number\">2</span> <span class=\"token operator\">|</span>      <span class=\"token number\">1</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">00</span> <span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">10</span> <span class=\"token operator\">|</span>   supplier4 <span class=\"token operator\">|</span>  <span class=\"token number\">5.00</span> <span class=\"token operator\">|</span>   <span class=\"token number\">1</span> <span class=\"token operator\">|</span>      <span class=\"token number\">2</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">00</span> <span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">10</span> <span class=\"token operator\">|</span>   supplier2 <span class=\"token operator\">|</span>  <span class=\"token number\">4.00</span> <span class=\"token operator\">|</span>   <span class=\"token number\">1</span> <span class=\"token operator\">|</span>      <span class=\"token number\">3</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">10</span> <span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">20</span> <span class=\"token operator\">|</span>   supplier5 <span class=\"token operator\">|</span>  <span class=\"token number\">6.00</span> <span class=\"token operator\">|</span>   <span class=\"token number\">1</span> <span class=\"token operator\">|</span>      <span class=\"token number\">1</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">10</span> <span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">20</span> <span class=\"token operator\">|</span>   supplier2 <span class=\"token operator\">|</span>  <span class=\"token number\">3.00</span> <span class=\"token operator\">|</span>   <span class=\"token number\">1</span> <span class=\"token operator\">|</span>      <span class=\"token number\">2</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">10</span> <span class=\"token operator\">|</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">15</span> <span class=\"token number\">08</span>:<span class=\"token number\">20</span> <span class=\"token operator\">|</span>   supplier3 <span class=\"token operator\">|</span>  <span class=\"token number\">2.00</span> <span class=\"token operator\">|</span>   <span class=\"token number\">1</span> <span class=\"token operator\">|</span>      <span class=\"token number\">3</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------------------+------------------+-------------+-------+-----+--------+</span></code></pre>\n\n\n\n\n\n<h2 id=\"表的参数配置\"><a href=\"#表的参数配置\" class=\"headerlink\" title=\"表的参数配置\"></a>表的参数配置</h2><h3 id=\"jdbc\"><a href=\"#jdbc\" class=\"headerlink\" title=\"jdbc\"></a>jdbc</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">create table dim <span class=\"token punctuation\">(</span>\n  dim varchar ,\n  channel_eight_role_code varchar ,\n  channel_source_code varchar,\n  CHANNEL_INFO_ID varchar\n<span class=\"token punctuation\">)</span> with<span class=\"token punctuation\">(</span>\n  -- 声明连接器类型。flink会通过spi找到连接器，并且进行参数匹配\n  <span class=\"token string\">'connector.type'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'jdbc'</span>,\n  \n  -- jdbc的url\n  <span class=\"token string\">'connector.url'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'jdbc:mysql://10.25.76.173:3310/ogg_syncer?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false'</span>,\n  \n  -- 表名称\n  <span class=\"token string\">'connector.table'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'epcis_epcisbase_channel_info'</span>,\n  \n  -- 驱动类型\n  <span class=\"token string\">'connector.driver'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'com.mysql.jdbc.Driver'</span>,\n  \n  -- 用过名和密码\n  <span class=\"token string\">'connector.username'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'root'</span>,\n  <span class=\"token string\">'connector.password'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'root'</span>,\n\n  -- jdbc作为维表的时候，缓存时间。cache默认未开启。\n  <span class=\"token string\">'connector.lookup.cache.ttl'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'60s'</span>,\n  \n  --  jdbc作为维表的时候，缓存的最大行数。cache默认未开启。\n  <span class=\"token string\">'connector.lookup.cache.max-rows'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'100000'</span>,\n  \n  -- jdbc作为维表的时候，如果查询失败，最大查询次数\n  <span class=\"token string\">'connector.lookup.max-retries'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'3'</span>,\n  \n  -- jdbc写入缓存的最大行数。默认值5000\n  <span class=\"token string\">'connector.write.flush.max-rows'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'5000'</span>,\n  \n  -- jdbc 写入缓存flush时间间隔。默认为0，立即写入\n  <span class=\"token string\">'connector.write.flush.interval'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'2s'</span>,\n  \n  -- 写入失败，最大重试次数\n  <span class=\"token string\">'connector.write.max-retries'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'3'</span> \n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n\n<h1 id=\"flinkCDC进行数据迁移\"><a href=\"#flinkCDC进行数据迁移\" class=\"headerlink\" title=\"flinkCDC进行数据迁移\"></a>flinkCDC进行数据迁移</h1><h3 id=\"增量读取事实表，关联维度表，间隔-批次写入ck中，完成数据的迁移\"><a href=\"#增量读取事实表，关联维度表，间隔-批次写入ck中，完成数据的迁移\" class=\"headerlink\" title=\"增量读取事实表，关联维度表，间隔+批次写入ck中，完成数据的迁移\"></a>增量读取事实表，关联维度表，间隔+批次写入ck中，完成数据的迁移</h3><h4 id=\"sql实现数据的读取\"><a href=\"#sql实现数据的读取\" class=\"headerlink\" title=\"sql实现数据的读取\"></a>sql实现数据的读取</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cdc</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span>JSON<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>ververica<span class=\"token punctuation\">.</span>cdc<span class=\"token punctuation\">.</span>connectors<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MySQLSource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AllArgsConstructor</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NoArgsConstructor</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MapFunction</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>datastream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataStream</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>datastream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataStreamSource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>datastream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SingleOutputStreamOperator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>environment<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StreamExecutionEnvironment</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SourceFunction</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Table</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TableResult</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>bridge<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StreamTableEnvironment</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>types<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Row</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author nove\n * @version 1.0\n * @date 2021/12/10 16:55\n * cdc迁移数据\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DateTrans</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Data</span>\n    <span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n    <span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Data</span>\n    <span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n    <span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n    <span class=\"token keyword\">public</span>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderTb</span>   <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> serialNo<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> price<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> time<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Properties</span> properties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"snapshot.mode\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"schema_only\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//debezium增量获取方式配置</span>\n\n        <span class=\"token comment\">//事实表的增量获取</span>\n        <span class=\"token class-name\">SourceFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">></span></span> factTb <span class=\"token operator\">=</span> <span class=\"token class-name\">MySQLSource</span><span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">></span></span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">hostname</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"47.108.204.135\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">port</span><span class=\"token punctuation\">(</span><span class=\"token number\">3310</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">databaseList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"company\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// monitor all tables under inventory database</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">tableList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"company.order_tb\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//库名+表名字，逗号分隔</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">username</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">password</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hDtoLDuI\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">debeziumProperties</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">deserializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CdcDwdDeserializationSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// converts SourceRecord to String</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//维度表的获取</span>\n        <span class=\"token class-name\">SourceFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">></span></span> dimTb <span class=\"token operator\">=</span> <span class=\"token class-name\">MySQLSource</span><span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">></span></span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">hostname</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"47.108.204.135\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">port</span><span class=\"token punctuation\">(</span><span class=\"token number\">3310</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">databaseList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"company\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// monitor all tables under inventory database</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">tableList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"company.student\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//库名+表名字，逗号分隔</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">username</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">password</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"****\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">deserializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CdcDwdDeserializationSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// converts SourceRecord to String</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token class-name\">StreamExecutionEnvironment</span> env <span class=\"token operator\">=</span> <span class=\"token class-name\">StreamExecutionEnvironment</span><span class=\"token punctuation\">.</span><span class=\"token function\">getExecutionEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StreamTableEnvironment</span> tableEnv <span class=\"token operator\">=</span> <span class=\"token class-name\">StreamTableEnvironment</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">DataStreamSource</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">></span></span> factSource <span class=\"token operator\">=</span> env<span class=\"token punctuation\">.</span><span class=\"token function\">addSource</span><span class=\"token punctuation\">(</span>factTb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">DataStreamSource</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">></span></span> dimSource <span class=\"token operator\">=</span> env<span class=\"token punctuation\">.</span><span class=\"token function\">addSource</span><span class=\"token punctuation\">(</span>dimTb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token class-name\">SingleOutputStreamOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderTb</span><span class=\"token punctuation\">></span></span> factTbDs <span class=\"token operator\">=</span> factSource<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MapFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">OrderTb</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderTb</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JSONObject</span> value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">OrderTb</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">SingleOutputStreamOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> dimTbDs <span class=\"token operator\">=</span> dimSource<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MapFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JSONObject</span> value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        tableEnv<span class=\"token punctuation\">.</span><span class=\"token function\">createTemporaryView</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fact\"</span><span class=\"token punctuation\">,</span>factTbDs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tableEnv<span class=\"token punctuation\">.</span><span class=\"token function\">createTemporaryView</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dim\"</span><span class=\"token punctuation\">,</span>dimTbDs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token class-name\">Table</span> table <span class=\"token operator\">=</span> tableEnv<span class=\"token punctuation\">.</span><span class=\"token function\">sqlQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from fact a join dim b on a.id = b.id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        table<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n</code></pre>\n\n"},{"title":"hexo博客编辑","date":"2021-12-30T08:58:24.000Z","_content":"* * 绑定git\n\n  * 绑定本地密匙到git\n  * 初始化一个仓库，Settings->Pages->Source：branch设置为master，用来发布页面\n  * main分支用来存放文件用作后续编辑\n\n* 安装node.js\n\n  * 官网下载符合操作系统的新版本\n\n* 安装hexo\n\n  ~~~shell\n  npm install -g hexo//安装\n  hexo init//初始化项目\n  ~~~\n\n* 配置主题\n\n  * git搜索，下载解压到**\\themes**中\n  * **_config.yml**中themes主题名字修改为解压后的名字\n\n* 发布博客\n\n  ~~~shell\n  hexo clean\n  hexo g\n  hexo s//本地部署预览\n  hexo d//发布异常，删除目录下的.开头文件夹\n  ~~~\n\n* 上传文件到git，方便后续的编辑\n\n  ~~~\n  git add .\n  git commit -m \"修改备注\"\n  git push\n  ~~~\n\n  \n\n","source":"_posts/hexo搭建.md","raw":"---\ntitle: hexo博客编辑\ndate: 2021-12-30 16:58:24\ntags: 博客\ncategories: 兴趣\n---\n* * 绑定git\n\n  * 绑定本地密匙到git\n  * 初始化一个仓库，Settings->Pages->Source：branch设置为master，用来发布页面\n  * main分支用来存放文件用作后续编辑\n\n* 安装node.js\n\n  * 官网下载符合操作系统的新版本\n\n* 安装hexo\n\n  ~~~shell\n  npm install -g hexo//安装\n  hexo init//初始化项目\n  ~~~\n\n* 配置主题\n\n  * git搜索，下载解压到**\\themes**中\n  * **_config.yml**中themes主题名字修改为解压后的名字\n\n* 发布博客\n\n  ~~~shell\n  hexo clean\n  hexo g\n  hexo s//本地部署预览\n  hexo d//发布异常，删除目录下的.开头文件夹\n  ~~~\n\n* 上传文件到git，方便后续的编辑\n\n  ~~~\n  git add .\n  git commit -m \"修改备注\"\n  git push\n  ~~~\n\n  \n\n","slug":"hexo搭建","published":1,"updated":"2022-01-20T02:15:32.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyv8edwg000238qhfwfqemp0","content":"<ul>\n<li><ul>\n<li><p>绑定git</p>\n</li>\n<li><p>绑定本地密匙到git</p>\n</li>\n<li><p>初始化一个仓库，Settings-&gt;Pages-&gt;Source：branch设置为master，用来发布页面</p>\n</li>\n<li><p>main分支用来存放文件用作后续编辑</p>\n</li>\n</ul>\n</li>\n<li><p>安装node.js</p>\n<ul>\n<li>官网下载符合操作系统的新版本</li>\n</ul>\n</li>\n<li><p>安装hexo</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo//安装\nhexo init//初始化项目</code></pre></li>\n<li><p>配置主题</p>\n<ul>\n<li>git搜索，下载解压到<strong>\\themes</strong>中</li>\n<li><strong>_config.yml</strong>中themes主题名字修改为解压后的名字</li>\n</ul>\n</li>\n<li><p>发布博客</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">hexo clean\nhexo g\nhexo s//本地部署预览\nhexo d//发布异常，删除目录下的.开头文件夹</code></pre></li>\n<li><p>上传文件到git，方便后续的编辑</p>\n<pre class=\"language-none\"><code class=\"language-none\">git add .\ngit commit -m &quot;修改备注&quot;\ngit push</code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><ul>\n<li><p>绑定git</p>\n</li>\n<li><p>绑定本地密匙到git</p>\n</li>\n<li><p>初始化一个仓库，Settings-&gt;Pages-&gt;Source：branch设置为master，用来发布页面</p>\n</li>\n<li><p>main分支用来存放文件用作后续编辑</p>\n</li>\n</ul>\n</li>\n<li><p>安装node.js</p>\n<ul>\n<li>官网下载符合操作系统的新版本</li>\n</ul>\n</li>\n<li><p>安装hexo</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo//安装\nhexo init//初始化项目</code></pre></li>\n<li><p>配置主题</p>\n<ul>\n<li>git搜索，下载解压到<strong>\\themes</strong>中</li>\n<li><strong>_config.yml</strong>中themes主题名字修改为解压后的名字</li>\n</ul>\n</li>\n<li><p>发布博客</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">hexo clean\nhexo g\nhexo s//本地部署预览\nhexo d//发布异常，删除目录下的.开头文件夹</code></pre></li>\n<li><p>上传文件到git，方便后续的编辑</p>\n<pre class=\"language-none\"><code class=\"language-none\">git add .\ngit commit -m &quot;修改备注&quot;\ngit push</code></pre></li>\n</ul>\n"},{"_content":"title: 一月杂项\ndate: 2021-12-30 16:58:24\ntags: 随笔\ncategories: 综合\n# java\n\n## 泛型\n\n* 泛型方法\n\n  ~~~java\n   // 比较三个值并返回最大值\n      public static <T extends Comparable<T>> T maximum(T x, T y, T z) {\n          T max = x; // 假设x是初始最大值\n          if (y.compareTo(max) > 0) {\n              max = y; //y 更大\n          }\n          if (z.compareTo(max) > 0) {\n              max = z; // 现在 z 更大\n          }\n          return max; // 返回最大对象\n      }\n  ~~~\n\n* 泛型类\n\n  ~~~java\n  //可以接受任何类型的参数\n  public class Box<T> {\n      private T t;\n  \n      public void add(T t) {\n          this.t = t;\n      }\n  \n      public T get() {\n          return t;\n      }\n   }\n  ~~~\n\n* 类型通配符\n\n  ~~~java\n  //可以接受任何类型的list\n  public static void getData(List<?> data) {\n        System.out.println(\"data :\" + data.get(0));\n     }\n  ~~~\n\n## 反射\n\n~~~java\npublic class App {\n    public static void main(String[] args) throws IllegalAccessException {\n        VisitorStats visitorStats = new VisitorStats(\"sa\", \"pp\", \"sf\", \"dd\");\n        Field[] fields = visitorStats.getClass().getDeclaredFields();\n        System.out.println(fields.length);\n        for (Field field : fields) {\n            field.setAccessible(true);//设置允许通过反射访问\n            System.out.println(field.getName()/*字段名字*/+\"--- \"+field.get(visitorStats)/*字段的值*/);\n        }\n    }\n}\n~~~\n\n\n\n\n\n## Stream流\n\n~~~java\nStream<String> stream = strings.stream();//转为流\nList<String> collect = stream.collect(Collectors.toList());//转为list\n\n//        过滤\n        strings.stream().filter(x->!x.isEmpty()).forEach(System.out::print);\n//        排序\n        strings.stream().sorted().forEach(System.out::println);\n//        reduce操作\n        Optional<String> reduce = strings.stream().reduce((x, y) -> x.length() > y.length() ? x : y);//求最长的字符串\n        System.out.println(reduce.get());\n        Integer reduce1 = strings.stream().reduce(0, (x, y) -> x + y.length(), (a, b) -> a + b);//求字符串的总长度\n        System.out.println(reduce1);\n//        map操作\n        strings.stream().map(x->x+\"功能增强\").forEach(System.out::println);\n~~~\n\n\n\n## lambdas表达式\n\n## 线程\n\n### 四种线程池\n\nhttps://www.cnblogs.com/zhujiabin/p/5404771.html\n\n## rocketMq-stream\n\n有时间窗口，水位语法，进行分组，计数，求和，均值，去重\n\n# ck\n\n## 分布式查询问题\n\n* 问题\n\n  * 直接join\n\n    ~~~sql\n    #实际使用的都是每个分片的本地表\n    SELECT uniq(id) FROM test_query_all WHERE repo = 100 AND id IN (SELECT id FROM test_query_local WHERE repo = 200)\n    #每个节点都对全局表发出了一次查询\n    SELECT uniq(id) FROM test_query_all WHERE repo = 100 AND id IN (SELECT id FROM test_query_all WHERE repo = 200)\n    \n    ~~~\n\n* GLOBAL\n  * 先进行分布式的查询，然后将结果汇总分发到每个分片节点\n\n~~~sql\n#将结果分发\nSELECT uniq(id) FROM test_query_all WHERE repo = 100 \nAND id GLOBAL IN (SELECT id FROM test_query_all WHERE repo = 200)\n\n#分发右表到t1\nSELECT * FROM test_query_all AS t1 \nGLOBAL JOIN test_query_all AS t2 ON t1.id = t2.id\n~~~\n\n# raid\n\n* 利用多磁盘，实现并行的对数据的存取\n\n# sql执行流程\n\n* 预处理为ast，抽象语法树\n* 逻辑优化\n  * 谓词和算子下推\n  * 公共子表达式消除,标量的直接替换\n  * 视图展开，简化常量运算表达式，谓词逻辑的重写，语义的优化等\n* 物理优化\n  * 负责把内部查询表达转化成一个高效的查询计划，指导DBMS如何去取表，如何进行排序，如何Join\n\n* 查询执行\n  * 负责执行具体的查询计划，从存储引擎中获取数据并且对数据应用查询计划得到结果\n\n# ck的执行流程\n\n~~~shell\n1.服务端接收客户端发来的SQL请求，具体形式是一个网络包，Server的协议层需要拆包把SQL解析出来\n2.Server负责初始化上下文与Network Handler，然后 Parser 对Query做词法和语法分析，解析成AST\n3.Interpreter的 SyntaxAnalyzer 会应用一些启发式规则对AST进行优化重写\n4.Interpreter的 ExpressionAnalyzer 根据上下文信息以及优化重写后的AST生成物理执行计划\n5.物理执行计划分发到本地或者分布式的executor,各自从存储引擎中获取数据,应用执行计划\n6.Server把执行后的结果以Block流的形式输出到Socket缓冲区,Client从Socket中读取即可得到结果\n~~~\n\n# ck引擎\n\n* ReplacingMergeTree\n  * 分区内同主键去重\n\n* CollapsingMergeTree\n  * 标记相反，主键相同的进行折叠，有分区的**限制**\n\n* VersionedCollapsingMergeTree\n  * 主键相同，且Version相同、Sign相反的行，在Compaction时会被删除\n\n* SummingMergeTree\n  * 合并的时候对数据进行聚合\n\n* AggregatingMergeTree\n  * 合并的时候指定聚合函数聚合\n\n# 拉链\n\n* union all和union的区别\n  * union all不去重\n\n~~~sql\n#原订单表\ncreate table wedw_ods.order_info_20200910(\n order_id     string    COMMENT '订单id'\n,order_status string    COMMENT '订单状态'\n,create_time  timestamp COMMENT '创建时间'\n,update_time  timestamp COMMENT '更新时间'\n) COMMENT '订单表'\nrow format delimited fields terminated by ','\n;\n#拉链表，增加了生效的开始&结束时间\ncreate table wedw_dwd.order_info_dz(\n order_id     string    COMMENT '订单id'\n,order_status string    COMMENT '订单状态'\n,create_time  timestamp COMMENT '创建时间'\n,update_time  timestamp COMMENT '更新时间'\n,start_dt     date      COMMENT '开始生效日期'\n,end_dt       date      COMMENT '结束生效日期'\n) COMMENT '订单表'\npartitioned by (date_id string)\nrow format delimited fields terminated by ','\n;\n\n#初始化，更新时间为开始时间，最大时间为结束时间\ninsert overwrite table wedw_dwd.order_info_dz partition(date_id = '2020-09-10')\nselect\n order_id    \n,order_status\n,create_time \n,update_time \n,to_date(update_time) as start_dt   \n,'9999-12-31' as end_dt  \nfrom\nwedw_ods.order_info_20200910\n;\n\n#每天写入，今天的全量&昨天的全部（状态修改的记录修改的状态）\ninsert overwrite table wedw_dwd.order_info_dz partition(date_id = '2020-09-11')\nselect\n t1.order_id    \n,t1.order_status\n,t1.create_time \n,t1.update_time\n,t1.start_dt\n,case when t1.end_dt = '9999-12-31' and t2.order_id is not null then t1.date_id else t1.end_dt end as end_dt\nfrom\nwedw_dwd.order_info_dz t1\nleft join wedw_ods.order_info_20200911 t2\non t1.order_id = t2.order_id\nwhere t1.date_id = '2020-09-10'\nunion all\nSELECT\n t1.order_id    \n,t1.order_status\n,t1.create_time \n,t1.update_time\n,to_date(update_time) as start_dt\n,'9999-12-31' as end_dt\nFROM wedw_ods.order_info_20200911 t1\n;\n\n#查询某天的快照\nselect \n* \nfrom \nwedw_dwd.order_info_dz \nwhere \ndate_id = '2020-09-10' \nand start_dt <= '2020-09-10' \nand end_dt >='2020-09-10'\n;\n~~~\n\n# 数据倾斜\n\n* 空值过滤\n* shuffle并行度\n  * \n\n# flink的ck-sink\n\n# Sql进阶\n\n## 约束\n\n~~~sql\nalter table 表名称 add constraint 约束名称 增加的约束类型 （列名）//mysql未实现\n//实现方式-枚举，触发器\n//枚举\n `Sex` enum('男','女') NOT NULL DEFAULT '男',\n//触发器\n https://www.cnblogs.com/geaozhang/p/6819648.html#chuangjian\n~~~\n\n## [SQL中exists和in的用法以及区别](https://www.cnblogs.com/hider/p/12446035.html)\n\n* `in` 和 `exists` 的区别： 如果子查询得出的结果集记录较少，主查询中的表较大且又有索引时应该用 `in`， 反之如果外层的主查询记录较少，子查询中的表大，又有索引时使用 `exists`。\n\n* **1. 外层查询表小于子查询表，则用 `exists`，外层查询表大于子查询表，则用 `in` ，如果外层和子查询表差不多，则爱用哪个用哪个。**\n\n  **2.not exists 比 not in 效率高。**\n\n## 多列求最值\n\n~~~sql\nSELECT GREATEST(10, 20, 30),  \n       LEAST(10, 20, 30); \n~~~\n\n\n\n## 指定列，按照内容排序\n\n~~~sql\nSELECT \nname\nfrom depts d2 \norder by CASE name \n\twhen 'jack' then 1\n\twhen 'dep1' then 2\n\twhen 'dep2' then 3\n\telse 4 END ; \n\t\n\t\n/*打印排序号*/\nSELECT \nname,\ncase name\nwhen 'jack' then 1\n\twhen 'dep1' then 2\n\twhen 'dep2' then 3\n\telse 4 END as tool_v\nfrom depts d2 \norder by tool_v ; \n~~~\n\n## 自连接实现开窗\n\n~~~sql\nSELECT P1.district, P1.name,\n P1.price,\n (SELECT COUNT(P2.price)\n FROM DistrictProducts P2\n WHERE P1.district = P2.district -- 在同一个地区内进行比较\n AND P2.price > P1.price) + 1 AS rank_1\n FROM DistrictProducts P1;\n \n SELECT P1.district, P1.name,\n MAX(P1.price) AS price, \n COUNT(P2.name) +1 AS rank_1\n FROM DistrictProducts P1 LEFT OUTER JOIN DistrictProducts P2\n ON P1.district = P2.district\n AND P1.price < P2.price\n GROUP BY P1.district, P1.name;\n \n /*取前几名*/\n SELECT \ng1.source,\ng1.name,\ng1.grade,\n(select count(g2.id)\nFROM grade g2 where g1.source = g2.source\nand g2.grade > g1.grade\n) + 1 as rank_1\nFROM \ngrade g1 having rank_1 < 3;\n \n~~~\n\n## COALESCE函数\n\n~~~\nSELECT COALESCE(NULL,NULL,3,4,5);//返回第一个非空的值，全部为空，则返回空\n~~~\n\n## SQL中的谓词\n\n~~~sql\n=、<、>、BETWEEN、LIKE、IN、IS NULL\n~~~\n\n## SQL执行顺序\n\n~~~sql\nfrom\non\njoin\nwhere\ngroup by \nwith\nhaving\nselect\ndistinct\norder by\nlimit\n~~~\n\n\n\n# hiveJOIN\n\n## 区别\n\n~~~\n//LEFT OUTER JOIN\nSELECT a.val, b.val FROM a LEFT OUTER JOIN b ON (a.key=b.key)\nWHERE a.ds='2009-07-07' AND b.ds='2009-07-07'\nSELECT a.val, b.val FROM a LEFT OUTER JOIN b\nON (a.key=b.key AND b.ds='2009-07-07' AND a.ds='2009-07-07')\n/*写where，会先过滤，再join，其他的会扫描全表*/\n\n~~~\n\n\n\n## STREAMTABLE\n\n```\nSELECT ``/*+ STREAMTABLE(a) */` `a.val, b.val, c.val FROM a JOIN b ON (a.key = b.key1) JOIN c ON (c.key = b.key1)\na表太大的话，不放在内存中，方式oom\n```\n\n## LEFT, RIGHT, and FULL OUTER join\n\n~~~\n//这个怎么join的\nSELECT a.val1, a.val2, b.val, c.val\nFROM a\nJOIN b ON (a.key = b.key)\nLEFT OUTER JOIN c ON (a.key = c.key)\n\n~~~\n\n## LEFT SEMI JOIN\n\n~~~sql\nSELECT a.key, a.value\nFROM a\nWHERE a.key in\n (SELECT b.key\n  FROM B);\n  \nSELECT a.key, a.val\nFROM a LEFT SEMI JOIN b ON (a.key = b.key)  \n~~~\n\n## 不进行reduce\n\n~~~sql\nSELECT /*+ MAPJOIN(b) */ a.key, a.value\nFROM a JOIN b ON a.key = b.key\n/*a被拆开，与bjoin*/\n~~~\n\n## 谓词下推\n\n~~~\nexplain \nSELECT\na.*,\nb.name\nFROM\nt_b a left join t_c b \nwhere a.login_date = \"2017-02-01\" and a.id = b.id;\na:predicate: ((login_date = '2017-02-01') and id is not null) (type: boolean)\nb:predicate: id is not null (type: boolean)\n\nexplain \nSELECT\na.*,\nb.name\nFROM\nt_b a left join t_c b \non a.login_date = \"2017-02-01\" and a.id = b.id;\na:\nb:\n\nexplain \nSELECT\na.*,\nb.name\nFROM\n(select\n*\nfrom\nt_b where login_date = \"2017-02-01\") a left join t_c b \nwhere a.id = b.id;\na:\nb:predicate: (login_date = '2017-02-01') (type: boolean)\n\n\n~~~\n\n## convert.join\n\n~~~shell\nset hive.auto.convert.join.noconditionaltask = true;\nset hive.auto.convert.join.noconditionaltask.size = 10000000;\n设置大小，可以自动将小的维度表进行广播\n~~~\n\n# Order, Sort, Cluster, and Distribute By\n\n## order by\n\n~~~\n一个reduce，严格模式要限制范围\n~~~\n\n## sort by\n\n~~~\n先设置了reduce的个数，生成指定数量的文件\n~~~\n\n## Distribute by和sort by\n\n~~~\n先设置了reduce的个数，生成指定数量的文件\ndistribyte指定的字段在每个文件中相同\n文件中数据按照sort排序\n~~~\n\n## cluster by\n\n~~~\n你应该已经知道了：当distribute by 和 sort by 所指定的字段相同时，即可以使用cluster by。但是，有人禁不住就要问：那cluster by有什么存在意义吗？按照XX字段分区又按照XX字段排序。\n      答案是：当分区数量小于字段种类时，就有意义。\n       举个例子：\n       有一张学生表，全校共有100个专业，但是因为性能问题，分区只能指定5个。这时候，按照专业分区，再按照专业排序就有存在的意义了。\n~~~\n\n## Distribute by实现全局排序\n\n~~~\nselect\n*\nfrom table_name  distribute by(case when age>25 then 0 when age>18 then 1 else 2 end) sort by age\n;\n~~~\n\n# hive列转行&行转列\n\n~~~sql\nSELECT\nid,\ncollect_set(login_date),\ncollect_list(login_date)\nFROM\nt_b\ngroup by id;\n\n\nselect id,unique_log_dt from t_b_group lateral VIEW explode(u_d) e_u_d as unique_log_dt;\n~~~\n\n# mysqlSQL优化\n\n## in和exist的使用\n\n使用 EXISTS 时更快的原因有以下两个。\n\n* 如果连接列（id）上建立了索引，那么查询 Class_B 时不用查实\n  际的表，只需查索引就可以了。\n* 如果使用 EXISTS，那么只要查到一行数据满足条件就会终止查询，\n    不用像使用 IN 时一样扫描全表。在这一点上 NOT EXISTS 也一样。\n\n~~~sql\n//in\nexplain\nSELECT * from grade g where id in (select id from order_tb ot);\nid|select_type|table|partitions|type |possible_keys|key    |key_len|ref|rows|filtered|Extra                                             |\n--|-----------|-----|----------|-----|-------------|-------|-------|---|----|--------|--------------------------------------------------|\n 1|SIMPLE     |ot   |          |index|PRIMARY      |PRIMARY|4      |   |   1|   100.0|Using index                                       |\n 1|SIMPLE     |g    |          |ALL  |             |       |       |   |   6|   16.67|Using where; Using join buffer (Block Nested Loop)|\n\n\n//exist\nexplain\nSELECT * from grade g where  EXISTS (select id from order_tb ot where ot.id = g.id);\nid|select_type       |table|partitions|type  |possible_keys|key    |key_len|ref         |rows|filtered|Extra      |\n--|------------------|-----|----------|------|-------------|-------|-------|------------|----|--------|-----------|\n 1|PRIMARY           |g    |          |ALL   |             |       |       |            |   6|   100.0|Using where|\n 2|DEPENDENT SUBQUERY|ot   |          |eq_ref|PRIMARY      |PRIMARY|4      |company.g.id|   1|   100.0|Using index|\n~~~\n\n## 参数是子查询时，使用连接代替 IN\n\n* 在有索引的情况下，有数据量等因素的限制，性能不好和exist比较，没有索引的情况下，用exist好一点\n\n~~~\nexplain\nselect g.* from grade g join order_tb ot on g.id = ot.id ;\n\nid|select_type|table|partitions|type |possible_keys|key    |key_len|ref|rows|filtered|Extra                                             |\n--|-----------|-----|----------|-----|-------------|-------|-------|---|----|--------|--------------------------------------------------|\n 1|SIMPLE     |ot   |          |index|PRIMARY      |PRIMARY|4      |   |   1|   100.0|Using index                                       |\n 1|SIMPLE     |g    |          |ALL  |             |       |       |   |   6|   16.67|Using where; Using join buffer (Block Nested Loop)|\n~~~\n\n## 使用exist去重的情况\n\n* 某个维度表商品的id是唯一的\n* 事实表中有多个商品记录，**还包含了维度表中不存在的商品**\n* 我们要找出有销售记录的维度表中的商品\n\n~~~sql\n1、使用in，子查询\n2、使用jion，再进行去重\n3、使用exists，用维度商品表驱动事实表（不会进行排序，加快了查询）\n\n注：默认使用排序的运算\nGROUP BY 子句\nORDER BY 子句\n聚合函数（SUM、COUNT、AVG、MAX、MIN）\nDISTINCT\n集合运算符（UNION、INTERSECT、EXCEPT） \n窗口函数（RANK、ROW_NUMBER 等）\n~~~\n\n## hiving子句\n\n~~~\nhiving默认进行排序\nhiving是对聚合后的视图进行筛选操作，一般没有了索引的支持\n建议先用where进行筛选，利用索引，减轻排序负担\n~~~","source":"_posts/一月杂项.md","raw":"title: 一月杂项\ndate: 2021-12-30 16:58:24\ntags: 随笔\ncategories: 综合\n# java\n\n## 泛型\n\n* 泛型方法\n\n  ~~~java\n   // 比较三个值并返回最大值\n      public static <T extends Comparable<T>> T maximum(T x, T y, T z) {\n          T max = x; // 假设x是初始最大值\n          if (y.compareTo(max) > 0) {\n              max = y; //y 更大\n          }\n          if (z.compareTo(max) > 0) {\n              max = z; // 现在 z 更大\n          }\n          return max; // 返回最大对象\n      }\n  ~~~\n\n* 泛型类\n\n  ~~~java\n  //可以接受任何类型的参数\n  public class Box<T> {\n      private T t;\n  \n      public void add(T t) {\n          this.t = t;\n      }\n  \n      public T get() {\n          return t;\n      }\n   }\n  ~~~\n\n* 类型通配符\n\n  ~~~java\n  //可以接受任何类型的list\n  public static void getData(List<?> data) {\n        System.out.println(\"data :\" + data.get(0));\n     }\n  ~~~\n\n## 反射\n\n~~~java\npublic class App {\n    public static void main(String[] args) throws IllegalAccessException {\n        VisitorStats visitorStats = new VisitorStats(\"sa\", \"pp\", \"sf\", \"dd\");\n        Field[] fields = visitorStats.getClass().getDeclaredFields();\n        System.out.println(fields.length);\n        for (Field field : fields) {\n            field.setAccessible(true);//设置允许通过反射访问\n            System.out.println(field.getName()/*字段名字*/+\"--- \"+field.get(visitorStats)/*字段的值*/);\n        }\n    }\n}\n~~~\n\n\n\n\n\n## Stream流\n\n~~~java\nStream<String> stream = strings.stream();//转为流\nList<String> collect = stream.collect(Collectors.toList());//转为list\n\n//        过滤\n        strings.stream().filter(x->!x.isEmpty()).forEach(System.out::print);\n//        排序\n        strings.stream().sorted().forEach(System.out::println);\n//        reduce操作\n        Optional<String> reduce = strings.stream().reduce((x, y) -> x.length() > y.length() ? x : y);//求最长的字符串\n        System.out.println(reduce.get());\n        Integer reduce1 = strings.stream().reduce(0, (x, y) -> x + y.length(), (a, b) -> a + b);//求字符串的总长度\n        System.out.println(reduce1);\n//        map操作\n        strings.stream().map(x->x+\"功能增强\").forEach(System.out::println);\n~~~\n\n\n\n## lambdas表达式\n\n## 线程\n\n### 四种线程池\n\nhttps://www.cnblogs.com/zhujiabin/p/5404771.html\n\n## rocketMq-stream\n\n有时间窗口，水位语法，进行分组，计数，求和，均值，去重\n\n# ck\n\n## 分布式查询问题\n\n* 问题\n\n  * 直接join\n\n    ~~~sql\n    #实际使用的都是每个分片的本地表\n    SELECT uniq(id) FROM test_query_all WHERE repo = 100 AND id IN (SELECT id FROM test_query_local WHERE repo = 200)\n    #每个节点都对全局表发出了一次查询\n    SELECT uniq(id) FROM test_query_all WHERE repo = 100 AND id IN (SELECT id FROM test_query_all WHERE repo = 200)\n    \n    ~~~\n\n* GLOBAL\n  * 先进行分布式的查询，然后将结果汇总分发到每个分片节点\n\n~~~sql\n#将结果分发\nSELECT uniq(id) FROM test_query_all WHERE repo = 100 \nAND id GLOBAL IN (SELECT id FROM test_query_all WHERE repo = 200)\n\n#分发右表到t1\nSELECT * FROM test_query_all AS t1 \nGLOBAL JOIN test_query_all AS t2 ON t1.id = t2.id\n~~~\n\n# raid\n\n* 利用多磁盘，实现并行的对数据的存取\n\n# sql执行流程\n\n* 预处理为ast，抽象语法树\n* 逻辑优化\n  * 谓词和算子下推\n  * 公共子表达式消除,标量的直接替换\n  * 视图展开，简化常量运算表达式，谓词逻辑的重写，语义的优化等\n* 物理优化\n  * 负责把内部查询表达转化成一个高效的查询计划，指导DBMS如何去取表，如何进行排序，如何Join\n\n* 查询执行\n  * 负责执行具体的查询计划，从存储引擎中获取数据并且对数据应用查询计划得到结果\n\n# ck的执行流程\n\n~~~shell\n1.服务端接收客户端发来的SQL请求，具体形式是一个网络包，Server的协议层需要拆包把SQL解析出来\n2.Server负责初始化上下文与Network Handler，然后 Parser 对Query做词法和语法分析，解析成AST\n3.Interpreter的 SyntaxAnalyzer 会应用一些启发式规则对AST进行优化重写\n4.Interpreter的 ExpressionAnalyzer 根据上下文信息以及优化重写后的AST生成物理执行计划\n5.物理执行计划分发到本地或者分布式的executor,各自从存储引擎中获取数据,应用执行计划\n6.Server把执行后的结果以Block流的形式输出到Socket缓冲区,Client从Socket中读取即可得到结果\n~~~\n\n# ck引擎\n\n* ReplacingMergeTree\n  * 分区内同主键去重\n\n* CollapsingMergeTree\n  * 标记相反，主键相同的进行折叠，有分区的**限制**\n\n* VersionedCollapsingMergeTree\n  * 主键相同，且Version相同、Sign相反的行，在Compaction时会被删除\n\n* SummingMergeTree\n  * 合并的时候对数据进行聚合\n\n* AggregatingMergeTree\n  * 合并的时候指定聚合函数聚合\n\n# 拉链\n\n* union all和union的区别\n  * union all不去重\n\n~~~sql\n#原订单表\ncreate table wedw_ods.order_info_20200910(\n order_id     string    COMMENT '订单id'\n,order_status string    COMMENT '订单状态'\n,create_time  timestamp COMMENT '创建时间'\n,update_time  timestamp COMMENT '更新时间'\n) COMMENT '订单表'\nrow format delimited fields terminated by ','\n;\n#拉链表，增加了生效的开始&结束时间\ncreate table wedw_dwd.order_info_dz(\n order_id     string    COMMENT '订单id'\n,order_status string    COMMENT '订单状态'\n,create_time  timestamp COMMENT '创建时间'\n,update_time  timestamp COMMENT '更新时间'\n,start_dt     date      COMMENT '开始生效日期'\n,end_dt       date      COMMENT '结束生效日期'\n) COMMENT '订单表'\npartitioned by (date_id string)\nrow format delimited fields terminated by ','\n;\n\n#初始化，更新时间为开始时间，最大时间为结束时间\ninsert overwrite table wedw_dwd.order_info_dz partition(date_id = '2020-09-10')\nselect\n order_id    \n,order_status\n,create_time \n,update_time \n,to_date(update_time) as start_dt   \n,'9999-12-31' as end_dt  \nfrom\nwedw_ods.order_info_20200910\n;\n\n#每天写入，今天的全量&昨天的全部（状态修改的记录修改的状态）\ninsert overwrite table wedw_dwd.order_info_dz partition(date_id = '2020-09-11')\nselect\n t1.order_id    \n,t1.order_status\n,t1.create_time \n,t1.update_time\n,t1.start_dt\n,case when t1.end_dt = '9999-12-31' and t2.order_id is not null then t1.date_id else t1.end_dt end as end_dt\nfrom\nwedw_dwd.order_info_dz t1\nleft join wedw_ods.order_info_20200911 t2\non t1.order_id = t2.order_id\nwhere t1.date_id = '2020-09-10'\nunion all\nSELECT\n t1.order_id    \n,t1.order_status\n,t1.create_time \n,t1.update_time\n,to_date(update_time) as start_dt\n,'9999-12-31' as end_dt\nFROM wedw_ods.order_info_20200911 t1\n;\n\n#查询某天的快照\nselect \n* \nfrom \nwedw_dwd.order_info_dz \nwhere \ndate_id = '2020-09-10' \nand start_dt <= '2020-09-10' \nand end_dt >='2020-09-10'\n;\n~~~\n\n# 数据倾斜\n\n* 空值过滤\n* shuffle并行度\n  * \n\n# flink的ck-sink\n\n# Sql进阶\n\n## 约束\n\n~~~sql\nalter table 表名称 add constraint 约束名称 增加的约束类型 （列名）//mysql未实现\n//实现方式-枚举，触发器\n//枚举\n `Sex` enum('男','女') NOT NULL DEFAULT '男',\n//触发器\n https://www.cnblogs.com/geaozhang/p/6819648.html#chuangjian\n~~~\n\n## [SQL中exists和in的用法以及区别](https://www.cnblogs.com/hider/p/12446035.html)\n\n* `in` 和 `exists` 的区别： 如果子查询得出的结果集记录较少，主查询中的表较大且又有索引时应该用 `in`， 反之如果外层的主查询记录较少，子查询中的表大，又有索引时使用 `exists`。\n\n* **1. 外层查询表小于子查询表，则用 `exists`，外层查询表大于子查询表，则用 `in` ，如果外层和子查询表差不多，则爱用哪个用哪个。**\n\n  **2.not exists 比 not in 效率高。**\n\n## 多列求最值\n\n~~~sql\nSELECT GREATEST(10, 20, 30),  \n       LEAST(10, 20, 30); \n~~~\n\n\n\n## 指定列，按照内容排序\n\n~~~sql\nSELECT \nname\nfrom depts d2 \norder by CASE name \n\twhen 'jack' then 1\n\twhen 'dep1' then 2\n\twhen 'dep2' then 3\n\telse 4 END ; \n\t\n\t\n/*打印排序号*/\nSELECT \nname,\ncase name\nwhen 'jack' then 1\n\twhen 'dep1' then 2\n\twhen 'dep2' then 3\n\telse 4 END as tool_v\nfrom depts d2 \norder by tool_v ; \n~~~\n\n## 自连接实现开窗\n\n~~~sql\nSELECT P1.district, P1.name,\n P1.price,\n (SELECT COUNT(P2.price)\n FROM DistrictProducts P2\n WHERE P1.district = P2.district -- 在同一个地区内进行比较\n AND P2.price > P1.price) + 1 AS rank_1\n FROM DistrictProducts P1;\n \n SELECT P1.district, P1.name,\n MAX(P1.price) AS price, \n COUNT(P2.name) +1 AS rank_1\n FROM DistrictProducts P1 LEFT OUTER JOIN DistrictProducts P2\n ON P1.district = P2.district\n AND P1.price < P2.price\n GROUP BY P1.district, P1.name;\n \n /*取前几名*/\n SELECT \ng1.source,\ng1.name,\ng1.grade,\n(select count(g2.id)\nFROM grade g2 where g1.source = g2.source\nand g2.grade > g1.grade\n) + 1 as rank_1\nFROM \ngrade g1 having rank_1 < 3;\n \n~~~\n\n## COALESCE函数\n\n~~~\nSELECT COALESCE(NULL,NULL,3,4,5);//返回第一个非空的值，全部为空，则返回空\n~~~\n\n## SQL中的谓词\n\n~~~sql\n=、<、>、BETWEEN、LIKE、IN、IS NULL\n~~~\n\n## SQL执行顺序\n\n~~~sql\nfrom\non\njoin\nwhere\ngroup by \nwith\nhaving\nselect\ndistinct\norder by\nlimit\n~~~\n\n\n\n# hiveJOIN\n\n## 区别\n\n~~~\n//LEFT OUTER JOIN\nSELECT a.val, b.val FROM a LEFT OUTER JOIN b ON (a.key=b.key)\nWHERE a.ds='2009-07-07' AND b.ds='2009-07-07'\nSELECT a.val, b.val FROM a LEFT OUTER JOIN b\nON (a.key=b.key AND b.ds='2009-07-07' AND a.ds='2009-07-07')\n/*写where，会先过滤，再join，其他的会扫描全表*/\n\n~~~\n\n\n\n## STREAMTABLE\n\n```\nSELECT ``/*+ STREAMTABLE(a) */` `a.val, b.val, c.val FROM a JOIN b ON (a.key = b.key1) JOIN c ON (c.key = b.key1)\na表太大的话，不放在内存中，方式oom\n```\n\n## LEFT, RIGHT, and FULL OUTER join\n\n~~~\n//这个怎么join的\nSELECT a.val1, a.val2, b.val, c.val\nFROM a\nJOIN b ON (a.key = b.key)\nLEFT OUTER JOIN c ON (a.key = c.key)\n\n~~~\n\n## LEFT SEMI JOIN\n\n~~~sql\nSELECT a.key, a.value\nFROM a\nWHERE a.key in\n (SELECT b.key\n  FROM B);\n  \nSELECT a.key, a.val\nFROM a LEFT SEMI JOIN b ON (a.key = b.key)  \n~~~\n\n## 不进行reduce\n\n~~~sql\nSELECT /*+ MAPJOIN(b) */ a.key, a.value\nFROM a JOIN b ON a.key = b.key\n/*a被拆开，与bjoin*/\n~~~\n\n## 谓词下推\n\n~~~\nexplain \nSELECT\na.*,\nb.name\nFROM\nt_b a left join t_c b \nwhere a.login_date = \"2017-02-01\" and a.id = b.id;\na:predicate: ((login_date = '2017-02-01') and id is not null) (type: boolean)\nb:predicate: id is not null (type: boolean)\n\nexplain \nSELECT\na.*,\nb.name\nFROM\nt_b a left join t_c b \non a.login_date = \"2017-02-01\" and a.id = b.id;\na:\nb:\n\nexplain \nSELECT\na.*,\nb.name\nFROM\n(select\n*\nfrom\nt_b where login_date = \"2017-02-01\") a left join t_c b \nwhere a.id = b.id;\na:\nb:predicate: (login_date = '2017-02-01') (type: boolean)\n\n\n~~~\n\n## convert.join\n\n~~~shell\nset hive.auto.convert.join.noconditionaltask = true;\nset hive.auto.convert.join.noconditionaltask.size = 10000000;\n设置大小，可以自动将小的维度表进行广播\n~~~\n\n# Order, Sort, Cluster, and Distribute By\n\n## order by\n\n~~~\n一个reduce，严格模式要限制范围\n~~~\n\n## sort by\n\n~~~\n先设置了reduce的个数，生成指定数量的文件\n~~~\n\n## Distribute by和sort by\n\n~~~\n先设置了reduce的个数，生成指定数量的文件\ndistribyte指定的字段在每个文件中相同\n文件中数据按照sort排序\n~~~\n\n## cluster by\n\n~~~\n你应该已经知道了：当distribute by 和 sort by 所指定的字段相同时，即可以使用cluster by。但是，有人禁不住就要问：那cluster by有什么存在意义吗？按照XX字段分区又按照XX字段排序。\n      答案是：当分区数量小于字段种类时，就有意义。\n       举个例子：\n       有一张学生表，全校共有100个专业，但是因为性能问题，分区只能指定5个。这时候，按照专业分区，再按照专业排序就有存在的意义了。\n~~~\n\n## Distribute by实现全局排序\n\n~~~\nselect\n*\nfrom table_name  distribute by(case when age>25 then 0 when age>18 then 1 else 2 end) sort by age\n;\n~~~\n\n# hive列转行&行转列\n\n~~~sql\nSELECT\nid,\ncollect_set(login_date),\ncollect_list(login_date)\nFROM\nt_b\ngroup by id;\n\n\nselect id,unique_log_dt from t_b_group lateral VIEW explode(u_d) e_u_d as unique_log_dt;\n~~~\n\n# mysqlSQL优化\n\n## in和exist的使用\n\n使用 EXISTS 时更快的原因有以下两个。\n\n* 如果连接列（id）上建立了索引，那么查询 Class_B 时不用查实\n  际的表，只需查索引就可以了。\n* 如果使用 EXISTS，那么只要查到一行数据满足条件就会终止查询，\n    不用像使用 IN 时一样扫描全表。在这一点上 NOT EXISTS 也一样。\n\n~~~sql\n//in\nexplain\nSELECT * from grade g where id in (select id from order_tb ot);\nid|select_type|table|partitions|type |possible_keys|key    |key_len|ref|rows|filtered|Extra                                             |\n--|-----------|-----|----------|-----|-------------|-------|-------|---|----|--------|--------------------------------------------------|\n 1|SIMPLE     |ot   |          |index|PRIMARY      |PRIMARY|4      |   |   1|   100.0|Using index                                       |\n 1|SIMPLE     |g    |          |ALL  |             |       |       |   |   6|   16.67|Using where; Using join buffer (Block Nested Loop)|\n\n\n//exist\nexplain\nSELECT * from grade g where  EXISTS (select id from order_tb ot where ot.id = g.id);\nid|select_type       |table|partitions|type  |possible_keys|key    |key_len|ref         |rows|filtered|Extra      |\n--|------------------|-----|----------|------|-------------|-------|-------|------------|----|--------|-----------|\n 1|PRIMARY           |g    |          |ALL   |             |       |       |            |   6|   100.0|Using where|\n 2|DEPENDENT SUBQUERY|ot   |          |eq_ref|PRIMARY      |PRIMARY|4      |company.g.id|   1|   100.0|Using index|\n~~~\n\n## 参数是子查询时，使用连接代替 IN\n\n* 在有索引的情况下，有数据量等因素的限制，性能不好和exist比较，没有索引的情况下，用exist好一点\n\n~~~\nexplain\nselect g.* from grade g join order_tb ot on g.id = ot.id ;\n\nid|select_type|table|partitions|type |possible_keys|key    |key_len|ref|rows|filtered|Extra                                             |\n--|-----------|-----|----------|-----|-------------|-------|-------|---|----|--------|--------------------------------------------------|\n 1|SIMPLE     |ot   |          |index|PRIMARY      |PRIMARY|4      |   |   1|   100.0|Using index                                       |\n 1|SIMPLE     |g    |          |ALL  |             |       |       |   |   6|   16.67|Using where; Using join buffer (Block Nested Loop)|\n~~~\n\n## 使用exist去重的情况\n\n* 某个维度表商品的id是唯一的\n* 事实表中有多个商品记录，**还包含了维度表中不存在的商品**\n* 我们要找出有销售记录的维度表中的商品\n\n~~~sql\n1、使用in，子查询\n2、使用jion，再进行去重\n3、使用exists，用维度商品表驱动事实表（不会进行排序，加快了查询）\n\n注：默认使用排序的运算\nGROUP BY 子句\nORDER BY 子句\n聚合函数（SUM、COUNT、AVG、MAX、MIN）\nDISTINCT\n集合运算符（UNION、INTERSECT、EXCEPT） \n窗口函数（RANK、ROW_NUMBER 等）\n~~~\n\n## hiving子句\n\n~~~\nhiving默认进行排序\nhiving是对聚合后的视图进行筛选操作，一般没有了索引的支持\n建议先用where进行筛选，利用索引，减轻排序负担\n~~~","slug":"一月杂项","published":1,"date":"2022-01-09T03:11:53.983Z","updated":"2022-01-23T03:10:35.658Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyv8edwl000538qh2vql97u2","content":"<p>title: 一月杂项<br>date: 2021-12-30 16:58:24<br>tags: 随笔<br>categories: 综合</p>\n<h1 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h1><h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><ul>\n<li><p>泛型方法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 比较三个值并返回最大值</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Comparable</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">maximum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> y<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token class-name\">T</span> max <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 假设x是初始最大值</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           max <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span> <span class=\"token comment\">//y 更大</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           max <span class=\"token operator\">=</span> z<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 现在 z 更大</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回最大对象</span>\n   <span class=\"token punctuation\">&#125;</span></code></pre></li>\n<li><p>泛型类</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//可以接受任何类型的参数</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Box</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> t<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span></code></pre></li>\n<li><p>类型通配符</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//可以接受任何类型的list</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data :\"</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span></code></pre></li>\n</ul>\n<h2 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h2><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IllegalAccessException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">VisitorStats</span> visitorStats <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VisitorStats</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sa\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sf\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields <span class=\"token operator\">=</span> visitorStats<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>fields<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> field <span class=\"token operator\">:</span> fields<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            field<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置允许通过反射访问</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">/*字段名字*/</span><span class=\"token operator\">+</span><span class=\"token string\">\"--- \"</span><span class=\"token operator\">+</span>field<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>visitorStats<span class=\"token punctuation\">)</span><span class=\"token comment\">/*字段的值*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n\n\n\n\n<h2 id=\"Stream流\"><a href=\"#Stream流\" class=\"headerlink\" title=\"Stream流\"></a>Stream流</h2><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//转为流</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> collect <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//转为list</span>\n\n<span class=\"token comment\">//        过滤</span>\n        strings<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span><span class=\"token operator\">!</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">print</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        排序</span>\n        strings<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        reduce操作</span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> reduce <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> y<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//求最长的字符串</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>reduce<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Integer</span> reduce1 <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//求字符串的总长度</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>reduce1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        map操作</span>\n        strings<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span>x<span class=\"token operator\">+</span><span class=\"token string\">\"功能增强\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n\n\n<h2 id=\"lambdas表达式\"><a href=\"#lambdas表达式\" class=\"headerlink\" title=\"lambdas表达式\"></a>lambdas表达式</h2><h2 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h2><h3 id=\"四种线程池\"><a href=\"#四种线程池\" class=\"headerlink\" title=\"四种线程池\"></a>四种线程池</h3><p><a href=\"https://www.cnblogs.com/zhujiabin/p/5404771.html\">https://www.cnblogs.com/zhujiabin/p/5404771.html</a></p>\n<h2 id=\"rocketMq-stream\"><a href=\"#rocketMq-stream\" class=\"headerlink\" title=\"rocketMq-stream\"></a>rocketMq-stream</h2><p>有时间窗口，水位语法，进行分组，计数，求和，均值，去重</p>\n<h1 id=\"ck\"><a href=\"#ck\" class=\"headerlink\" title=\"ck\"></a>ck</h1><h2 id=\"分布式查询问题\"><a href=\"#分布式查询问题\" class=\"headerlink\" title=\"分布式查询问题\"></a>分布式查询问题</h2><ul>\n<li><p>问题</p>\n<ul>\n<li><p>直接join</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#实际使用的都是每个分片的本地表</span>\n<span class=\"token keyword\">SELECT</span> uniq<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> test_query_all <span class=\"token keyword\">WHERE</span> repo <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token operator\">AND</span> id <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> id <span class=\"token keyword\">FROM</span> test_query_local <span class=\"token keyword\">WHERE</span> repo <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#每个节点都对全局表发出了一次查询</span>\n<span class=\"token keyword\">SELECT</span> uniq<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> test_query_all <span class=\"token keyword\">WHERE</span> repo <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token operator\">AND</span> id <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> id <span class=\"token keyword\">FROM</span> test_query_all <span class=\"token keyword\">WHERE</span> repo <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n</code></pre></li>\n</ul>\n</li>\n<li><p>GLOBAL</p>\n<ul>\n<li>先进行分布式的查询，然后将结果汇总分发到每个分片节点</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#将结果分发</span>\n<span class=\"token keyword\">SELECT</span> uniq<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> test_query_all <span class=\"token keyword\">WHERE</span> repo <span class=\"token operator\">=</span> <span class=\"token number\">100</span> \n<span class=\"token operator\">AND</span> id <span class=\"token keyword\">GLOBAL</span> <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> id <span class=\"token keyword\">FROM</span> test_query_all <span class=\"token keyword\">WHERE</span> repo <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#分发右表到t1</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> test_query_all <span class=\"token keyword\">AS</span> t1 \n<span class=\"token keyword\">GLOBAL</span> <span class=\"token keyword\">JOIN</span> test_query_all <span class=\"token keyword\">AS</span> t2 <span class=\"token keyword\">ON</span> t1<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span>id</code></pre>\n\n<h1 id=\"raid\"><a href=\"#raid\" class=\"headerlink\" title=\"raid\"></a>raid</h1><ul>\n<li>利用多磁盘，实现并行的对数据的存取</li>\n</ul>\n<h1 id=\"sql执行流程\"><a href=\"#sql执行流程\" class=\"headerlink\" title=\"sql执行流程\"></a>sql执行流程</h1><ul>\n<li><p>预处理为ast，抽象语法树</p>\n</li>\n<li><p>逻辑优化</p>\n<ul>\n<li>谓词和算子下推</li>\n<li>公共子表达式消除,标量的直接替换</li>\n<li>视图展开，简化常量运算表达式，谓词逻辑的重写，语义的优化等</li>\n</ul>\n</li>\n<li><p>物理优化</p>\n<ul>\n<li>负责把内部查询表达转化成一个高效的查询计划，指导DBMS如何去取表，如何进行排序，如何Join</li>\n</ul>\n</li>\n<li><p>查询执行</p>\n<ul>\n<li>负责执行具体的查询计划，从存储引擎中获取数据并且对数据应用查询计划得到结果</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"ck的执行流程\"><a href=\"#ck的执行流程\" class=\"headerlink\" title=\"ck的执行流程\"></a>ck的执行流程</h1><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token number\">1</span>.服务端接收客户端发来的SQL请求，具体形式是一个网络包，Server的协议层需要拆包把SQL解析出来\n<span class=\"token number\">2</span>.Server负责初始化上下文与Network Handler，然后 Parser 对Query做词法和语法分析，解析成AST\n<span class=\"token number\">3</span>.Interpreter的 SyntaxAnalyzer 会应用一些启发式规则对AST进行优化重写\n<span class=\"token number\">4</span>.Interpreter的 ExpressionAnalyzer 根据上下文信息以及优化重写后的AST生成物理执行计划\n<span class=\"token number\">5</span>.物理执行计划分发到本地或者分布式的executor,各自从存储引擎中获取数据,应用执行计划\n<span class=\"token number\">6</span>.Server把执行后的结果以Block流的形式输出到Socket缓冲区,Client从Socket中读取即可得到结果</code></pre>\n\n<h1 id=\"ck引擎\"><a href=\"#ck引擎\" class=\"headerlink\" title=\"ck引擎\"></a>ck引擎</h1><ul>\n<li><p>ReplacingMergeTree</p>\n<ul>\n<li>分区内同主键去重</li>\n</ul>\n</li>\n<li><p>CollapsingMergeTree</p>\n<ul>\n<li>标记相反，主键相同的进行折叠，有分区的<strong>限制</strong></li>\n</ul>\n</li>\n<li><p>VersionedCollapsingMergeTree</p>\n<ul>\n<li>主键相同，且Version相同、Sign相反的行，在Compaction时会被删除</li>\n</ul>\n</li>\n<li><p>SummingMergeTree</p>\n<ul>\n<li>合并的时候对数据进行聚合</li>\n</ul>\n</li>\n<li><p>AggregatingMergeTree</p>\n<ul>\n<li>合并的时候指定聚合函数聚合</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"拉链\"><a href=\"#拉链\" class=\"headerlink\" title=\"拉链\"></a>拉链</h1><ul>\n<li>union all和union的区别<ul>\n<li>union all不去重</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#原订单表</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> wedw_ods<span class=\"token punctuation\">.</span>order_info_20200910<span class=\"token punctuation\">(</span>\n order_id     string    <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'订单id'</span>\n<span class=\"token punctuation\">,</span>order_status string    <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'订单状态'</span>\n<span class=\"token punctuation\">,</span>create_time  <span class=\"token keyword\">timestamp</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'创建时间'</span>\n<span class=\"token punctuation\">,</span>update_time  <span class=\"token keyword\">timestamp</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'更新时间'</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'订单表'</span>\n<span class=\"token keyword\">row</span> format delimited <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">','</span>\n<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#拉链表，增加了生效的开始&amp;结束时间</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> wedw_dwd<span class=\"token punctuation\">.</span>order_info_dz<span class=\"token punctuation\">(</span>\n order_id     string    <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'订单id'</span>\n<span class=\"token punctuation\">,</span>order_status string    <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'订单状态'</span>\n<span class=\"token punctuation\">,</span>create_time  <span class=\"token keyword\">timestamp</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'创建时间'</span>\n<span class=\"token punctuation\">,</span>update_time  <span class=\"token keyword\">timestamp</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'更新时间'</span>\n<span class=\"token punctuation\">,</span>start_dt     <span class=\"token keyword\">date</span>      <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'开始生效日期'</span>\n<span class=\"token punctuation\">,</span>end_dt       <span class=\"token keyword\">date</span>      <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'结束生效日期'</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'订单表'</span>\npartitioned <span class=\"token keyword\">by</span> <span class=\"token punctuation\">(</span>date_id string<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">row</span> format delimited <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">','</span>\n<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#初始化，更新时间为开始时间，最大时间为结束时间</span>\n<span class=\"token keyword\">insert</span> overwrite <span class=\"token keyword\">table</span> wedw_dwd<span class=\"token punctuation\">.</span>order_info_dz <span class=\"token keyword\">partition</span><span class=\"token punctuation\">(</span>date_id <span class=\"token operator\">=</span> <span class=\"token string\">'2020-09-10'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">select</span>\n order_id    \n<span class=\"token punctuation\">,</span>order_status\n<span class=\"token punctuation\">,</span>create_time \n<span class=\"token punctuation\">,</span>update_time \n<span class=\"token punctuation\">,</span>to_date<span class=\"token punctuation\">(</span>update_time<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> start_dt   \n<span class=\"token punctuation\">,</span><span class=\"token string\">'9999-12-31'</span> <span class=\"token keyword\">as</span> end_dt  \n<span class=\"token keyword\">from</span>\nwedw_ods<span class=\"token punctuation\">.</span>order_info_20200910\n<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#每天写入，今天的全量&amp;昨天的全部（状态修改的记录修改的状态）</span>\n<span class=\"token keyword\">insert</span> overwrite <span class=\"token keyword\">table</span> wedw_dwd<span class=\"token punctuation\">.</span>order_info_dz <span class=\"token keyword\">partition</span><span class=\"token punctuation\">(</span>date_id <span class=\"token operator\">=</span> <span class=\"token string\">'2020-09-11'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">select</span>\n t1<span class=\"token punctuation\">.</span>order_id    \n<span class=\"token punctuation\">,</span>t1<span class=\"token punctuation\">.</span>order_status\n<span class=\"token punctuation\">,</span>t1<span class=\"token punctuation\">.</span>create_time \n<span class=\"token punctuation\">,</span>t1<span class=\"token punctuation\">.</span>update_time\n<span class=\"token punctuation\">,</span>t1<span class=\"token punctuation\">.</span>start_dt\n<span class=\"token punctuation\">,</span><span class=\"token keyword\">case</span> <span class=\"token keyword\">when</span> t1<span class=\"token punctuation\">.</span>end_dt <span class=\"token operator\">=</span> <span class=\"token string\">'9999-12-31'</span> <span class=\"token operator\">and</span> t2<span class=\"token punctuation\">.</span>order_id <span class=\"token operator\">is</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">then</span> t1<span class=\"token punctuation\">.</span>date_id <span class=\"token keyword\">else</span> t1<span class=\"token punctuation\">.</span>end_dt <span class=\"token keyword\">end</span> <span class=\"token keyword\">as</span> end_dt\n<span class=\"token keyword\">from</span>\nwedw_dwd<span class=\"token punctuation\">.</span>order_info_dz t1\n<span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> wedw_ods<span class=\"token punctuation\">.</span>order_info_20200911 t2\n<span class=\"token keyword\">on</span> t1<span class=\"token punctuation\">.</span>order_id <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span>order_id\n<span class=\"token keyword\">where</span> t1<span class=\"token punctuation\">.</span>date_id <span class=\"token operator\">=</span> <span class=\"token string\">'2020-09-10'</span>\n<span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span>\n<span class=\"token keyword\">SELECT</span>\n t1<span class=\"token punctuation\">.</span>order_id    \n<span class=\"token punctuation\">,</span>t1<span class=\"token punctuation\">.</span>order_status\n<span class=\"token punctuation\">,</span>t1<span class=\"token punctuation\">.</span>create_time \n<span class=\"token punctuation\">,</span>t1<span class=\"token punctuation\">.</span>update_time\n<span class=\"token punctuation\">,</span>to_date<span class=\"token punctuation\">(</span>update_time<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> start_dt\n<span class=\"token punctuation\">,</span><span class=\"token string\">'9999-12-31'</span> <span class=\"token keyword\">as</span> end_dt\n<span class=\"token keyword\">FROM</span> wedw_ods<span class=\"token punctuation\">.</span>order_info_20200911 t1\n<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#查询某天的快照</span>\n<span class=\"token keyword\">select</span> \n<span class=\"token operator\">*</span> \n<span class=\"token keyword\">from</span> \nwedw_dwd<span class=\"token punctuation\">.</span>order_info_dz \n<span class=\"token keyword\">where</span> \ndate_id <span class=\"token operator\">=</span> <span class=\"token string\">'2020-09-10'</span> \n<span class=\"token operator\">and</span> start_dt <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'2020-09-10'</span> \n<span class=\"token operator\">and</span> end_dt <span class=\"token operator\">>=</span><span class=\"token string\">'2020-09-10'</span>\n<span class=\"token punctuation\">;</span></code></pre>\n\n<h1 id=\"数据倾斜\"><a href=\"#数据倾斜\" class=\"headerlink\" title=\"数据倾斜\"></a>数据倾斜</h1><ul>\n<li>空值过滤</li>\n<li>shuffle并行度<br>* </li>\n</ul>\n<h1 id=\"flink的ck-sink\"><a href=\"#flink的ck-sink\" class=\"headerlink\" title=\"flink的ck-sink\"></a>flink的ck-sink</h1><h1 id=\"Sql进阶\"><a href=\"#Sql进阶\" class=\"headerlink\" title=\"Sql进阶\"></a>Sql进阶</h1><h2 id=\"约束\"><a href=\"#约束\" class=\"headerlink\" title=\"约束\"></a>约束</h2><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名称 <span class=\"token keyword\">add</span> <span class=\"token keyword\">constraint</span> 约束名称 增加的约束类型 （列名）<span class=\"token comment\">//mysql未实现</span>\n<span class=\"token comment\">//实现方式-枚举，触发器</span>\n<span class=\"token comment\">//枚举</span>\n <span class=\"token punctuation\">`</span>Sex<span class=\"token punctuation\">`</span> <span class=\"token keyword\">enum</span><span class=\"token punctuation\">(</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">//触发器</span>\n https:<span class=\"token comment\">//www.cnblogs.com/geaozhang/p/6819648.html#chuangjian</span></code></pre>\n\n<h2 id=\"SQL中exists和in的用法以及区别\"><a href=\"#SQL中exists和in的用法以及区别\" class=\"headerlink\" title=\"SQL中exists和in的用法以及区别\"></a><a href=\"https://www.cnblogs.com/hider/p/12446035.html\">SQL中exists和in的用法以及区别</a></h2><ul>\n<li><p><code>in</code> 和 <code>exists</code> 的区别： 如果子查询得出的结果集记录较少，主查询中的表较大且又有索引时应该用 <code>in</code>， 反之如果外层的主查询记录较少，子查询中的表大，又有索引时使用 <code>exists</code>。</p>\n</li>\n<li><p><strong>1. 外层查询表小于子查询表，则用 <code>exists</code>，外层查询表大于子查询表，则用 <code>in</code> ，如果外层和子查询表差不多，则爱用哪个用哪个。</strong></p>\n<p><strong>2.not exists 比 not in 效率高。</strong></p>\n</li>\n</ul>\n<h2 id=\"多列求最值\"><a href=\"#多列求最值\" class=\"headerlink\" title=\"多列求最值\"></a>多列求最值</h2><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> GREATEST<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n       LEAST<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </code></pre>\n\n\n\n<h2 id=\"指定列，按照内容排序\"><a href=\"#指定列，按照内容排序\" class=\"headerlink\" title=\"指定列，按照内容排序\"></a>指定列，按照内容排序</h2><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> \nname\n<span class=\"token keyword\">from</span> depts d2 \n<span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> <span class=\"token keyword\">CASE</span> name \n\t<span class=\"token keyword\">when</span> <span class=\"token string\">'jack'</span> <span class=\"token keyword\">then</span> <span class=\"token number\">1</span>\n\t<span class=\"token keyword\">when</span> <span class=\"token string\">'dep1'</span> <span class=\"token keyword\">then</span> <span class=\"token number\">2</span>\n\t<span class=\"token keyword\">when</span> <span class=\"token string\">'dep2'</span> <span class=\"token keyword\">then</span> <span class=\"token number\">3</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token number\">4</span> <span class=\"token keyword\">END</span> <span class=\"token punctuation\">;</span> \n\t\n\t\n<span class=\"token comment\">/*打印排序号*/</span>\n<span class=\"token keyword\">SELECT</span> \nname<span class=\"token punctuation\">,</span>\n<span class=\"token keyword\">case</span> name\n<span class=\"token keyword\">when</span> <span class=\"token string\">'jack'</span> <span class=\"token keyword\">then</span> <span class=\"token number\">1</span>\n\t<span class=\"token keyword\">when</span> <span class=\"token string\">'dep1'</span> <span class=\"token keyword\">then</span> <span class=\"token number\">2</span>\n\t<span class=\"token keyword\">when</span> <span class=\"token string\">'dep2'</span> <span class=\"token keyword\">then</span> <span class=\"token number\">3</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token number\">4</span> <span class=\"token keyword\">END</span> <span class=\"token keyword\">as</span> tool_v\n<span class=\"token keyword\">from</span> depts d2 \n<span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> tool_v <span class=\"token punctuation\">;</span> </code></pre>\n\n<h2 id=\"自连接实现开窗\"><a href=\"#自连接实现开窗\" class=\"headerlink\" title=\"自连接实现开窗\"></a>自连接实现开窗</h2><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> P1<span class=\"token punctuation\">.</span>district<span class=\"token punctuation\">,</span> P1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n P1<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span>P2<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">FROM</span> DistrictProducts P2\n <span class=\"token keyword\">WHERE</span> P1<span class=\"token punctuation\">.</span>district <span class=\"token operator\">=</span> P2<span class=\"token punctuation\">.</span>district <span class=\"token comment\">-- 在同一个地区内进行比较</span>\n <span class=\"token operator\">AND</span> P2<span class=\"token punctuation\">.</span>price <span class=\"token operator\">></span> P1<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token keyword\">AS</span> rank_1\n <span class=\"token keyword\">FROM</span> DistrictProducts P1<span class=\"token punctuation\">;</span>\n \n <span class=\"token keyword\">SELECT</span> P1<span class=\"token punctuation\">.</span>district<span class=\"token punctuation\">,</span> P1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>P1<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> price<span class=\"token punctuation\">,</span> \n <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span>P2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token keyword\">AS</span> rank_1\n <span class=\"token keyword\">FROM</span> DistrictProducts P1 <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">OUTER</span> <span class=\"token keyword\">JOIN</span> DistrictProducts P2\n <span class=\"token keyword\">ON</span> P1<span class=\"token punctuation\">.</span>district <span class=\"token operator\">=</span> P2<span class=\"token punctuation\">.</span>district\n <span class=\"token operator\">AND</span> P1<span class=\"token punctuation\">.</span>price <span class=\"token operator\">&lt;</span> P2<span class=\"token punctuation\">.</span>price\n <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> P1<span class=\"token punctuation\">.</span>district<span class=\"token punctuation\">,</span> P1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n \n <span class=\"token comment\">/*取前几名*/</span>\n <span class=\"token keyword\">SELECT</span> \ng1<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">,</span>\ng1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\ng1<span class=\"token punctuation\">.</span>grade<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>g2<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span> grade g2 <span class=\"token keyword\">where</span> g1<span class=\"token punctuation\">.</span>source <span class=\"token operator\">=</span> g2<span class=\"token punctuation\">.</span>source\n<span class=\"token operator\">and</span> g2<span class=\"token punctuation\">.</span>grade <span class=\"token operator\">></span> g1<span class=\"token punctuation\">.</span>grade\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token keyword\">as</span> rank_1\n<span class=\"token keyword\">FROM</span> \ngrade g1 <span class=\"token keyword\">having</span> rank_1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n </code></pre>\n\n<h2 id=\"COALESCE函数\"><a href=\"#COALESCE函数\" class=\"headerlink\" title=\"COALESCE函数\"></a>COALESCE函数</h2><pre class=\"language-none\"><code class=\"language-none\">SELECT COALESCE(NULL,NULL,3,4,5);&#x2F;&#x2F;返回第一个非空的值，全部为空，则返回空</code></pre>\n\n<h2 id=\"SQL中的谓词\"><a href=\"#SQL中的谓词\" class=\"headerlink\" title=\"SQL中的谓词\"></a>SQL中的谓词</h2><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token operator\">=</span>、<span class=\"token operator\">&lt;</span>、<span class=\"token operator\">></span>、<span class=\"token operator\">BETWEEN</span>、<span class=\"token operator\">LIKE</span>、<span class=\"token operator\">IN</span>、<span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span></code></pre>\n\n<h2 id=\"SQL执行顺序\"><a href=\"#SQL执行顺序\" class=\"headerlink\" title=\"SQL执行顺序\"></a>SQL执行顺序</h2><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">from</span>\n<span class=\"token keyword\">on</span>\n<span class=\"token keyword\">join</span>\n<span class=\"token keyword\">where</span>\n<span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> \n<span class=\"token keyword\">with</span>\n<span class=\"token keyword\">having</span>\n<span class=\"token keyword\">select</span>\n<span class=\"token keyword\">distinct</span>\n<span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span>\n<span class=\"token keyword\">limit</span></code></pre>\n\n\n\n<h1 id=\"hiveJOIN\"><a href=\"#hiveJOIN\" class=\"headerlink\" title=\"hiveJOIN\"></a>hiveJOIN</h1><h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><pre class=\"language-none\"><code class=\"language-none\">&#x2F;&#x2F;LEFT OUTER JOIN\nSELECT a.val, b.val FROM a LEFT OUTER JOIN b ON (a.key&#x3D;b.key)\nWHERE a.ds&#x3D;&#39;2009-07-07&#39; AND b.ds&#x3D;&#39;2009-07-07&#39;\nSELECT a.val, b.val FROM a LEFT OUTER JOIN b\nON (a.key&#x3D;b.key AND b.ds&#x3D;&#39;2009-07-07&#39; AND a.ds&#x3D;&#39;2009-07-07&#39;)\n&#x2F;*写where，会先过滤，再join，其他的会扫描全表*&#x2F;\n</code></pre>\n\n\n\n<h2 id=\"STREAMTABLE\"><a href=\"#STREAMTABLE\" class=\"headerlink\" title=\"STREAMTABLE\"></a>STREAMTABLE</h2><pre class=\"language-none\"><code class=\"language-none\">SELECT &#96;&#96;&#x2F;*+ STREAMTABLE(a) *&#x2F;&#96; &#96;a.val, b.val, c.val FROM a JOIN b ON (a.key &#x3D; b.key1) JOIN c ON (c.key &#x3D; b.key1)\na表太大的话，不放在内存中，方式oom</code></pre>\n\n<h2 id=\"LEFT-RIGHT-and-FULL-OUTER-join\"><a href=\"#LEFT-RIGHT-and-FULL-OUTER-join\" class=\"headerlink\" title=\"LEFT, RIGHT, and FULL OUTER join\"></a>LEFT, RIGHT, and FULL OUTER join</h2><pre class=\"language-none\"><code class=\"language-none\">&#x2F;&#x2F;这个怎么join的\nSELECT a.val1, a.val2, b.val, c.val\nFROM a\nJOIN b ON (a.key &#x3D; b.key)\nLEFT OUTER JOIN c ON (a.key &#x3D; c.key)\n</code></pre>\n\n<h2 id=\"LEFT-SEMI-JOIN\"><a href=\"#LEFT-SEMI-JOIN\" class=\"headerlink\" title=\"LEFT SEMI JOIN\"></a>LEFT SEMI JOIN</h2><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> a<span class=\"token punctuation\">.</span><span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span>\n<span class=\"token keyword\">FROM</span> a\n<span class=\"token keyword\">WHERE</span> a<span class=\"token punctuation\">.</span><span class=\"token keyword\">key</span> <span class=\"token operator\">in</span>\n <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> b<span class=\"token punctuation\">.</span><span class=\"token keyword\">key</span>\n  <span class=\"token keyword\">FROM</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">SELECT</span> a<span class=\"token punctuation\">.</span><span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>val\n<span class=\"token keyword\">FROM</span> a <span class=\"token keyword\">LEFT</span> SEMI <span class=\"token keyword\">JOIN</span> b <span class=\"token keyword\">ON</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token keyword\">key</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token keyword\">key</span><span class=\"token punctuation\">)</span>  </code></pre>\n\n<h2 id=\"不进行reduce\"><a href=\"#不进行reduce\" class=\"headerlink\" title=\"不进行reduce\"></a>不进行reduce</h2><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token comment\">/*+ MAPJOIN(b) */</span> a<span class=\"token punctuation\">.</span><span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span>\n<span class=\"token keyword\">FROM</span> a <span class=\"token keyword\">JOIN</span> b <span class=\"token keyword\">ON</span> a<span class=\"token punctuation\">.</span><span class=\"token keyword\">key</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token keyword\">key</span>\n<span class=\"token comment\">/*a被拆开，与bjoin*/</span></code></pre>\n\n<h2 id=\"谓词下推\"><a href=\"#谓词下推\" class=\"headerlink\" title=\"谓词下推\"></a>谓词下推</h2><pre class=\"language-none\"><code class=\"language-none\">explain \nSELECT\na.*,\nb.name\nFROM\nt_b a left join t_c b \nwhere a.login_date &#x3D; &quot;2017-02-01&quot; and a.id &#x3D; b.id;\na:predicate: ((login_date &#x3D; &#39;2017-02-01&#39;) and id is not null) (type: boolean)\nb:predicate: id is not null (type: boolean)\n\nexplain \nSELECT\na.*,\nb.name\nFROM\nt_b a left join t_c b \non a.login_date &#x3D; &quot;2017-02-01&quot; and a.id &#x3D; b.id;\na:\nb:\n\nexplain \nSELECT\na.*,\nb.name\nFROM\n(select\n*\nfrom\nt_b where login_date &#x3D; &quot;2017-02-01&quot;) a left join t_c b \nwhere a.id &#x3D; b.id;\na:\nb:predicate: (login_date &#x3D; &#39;2017-02-01&#39;) (type: boolean)\n\n</code></pre>\n\n<h2 id=\"convert-join\"><a href=\"#convert-join\" class=\"headerlink\" title=\"convert.join\"></a>convert.join</h2><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">set</span> hive.auto.convert.join.noconditionaltask <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin class-name\">set</span> hive.auto.convert.join.noconditionaltask.size <span class=\"token operator\">=</span> <span class=\"token number\">10000000</span><span class=\"token punctuation\">;</span>\n设置大小，可以自动将小的维度表进行广播</code></pre>\n\n<h1 id=\"Order-Sort-Cluster-and-Distribute-By\"><a href=\"#Order-Sort-Cluster-and-Distribute-By\" class=\"headerlink\" title=\"Order, Sort, Cluster, and Distribute By\"></a>Order, Sort, Cluster, and Distribute By</h1><h2 id=\"order-by\"><a href=\"#order-by\" class=\"headerlink\" title=\"order by\"></a>order by</h2><pre class=\"language-none\"><code class=\"language-none\">一个reduce，严格模式要限制范围</code></pre>\n\n<h2 id=\"sort-by\"><a href=\"#sort-by\" class=\"headerlink\" title=\"sort by\"></a>sort by</h2><pre class=\"language-none\"><code class=\"language-none\">先设置了reduce的个数，生成指定数量的文件</code></pre>\n\n<h2 id=\"Distribute-by和sort-by\"><a href=\"#Distribute-by和sort-by\" class=\"headerlink\" title=\"Distribute by和sort by\"></a>Distribute by和sort by</h2><pre class=\"language-none\"><code class=\"language-none\">先设置了reduce的个数，生成指定数量的文件\ndistribyte指定的字段在每个文件中相同\n文件中数据按照sort排序</code></pre>\n\n<h2 id=\"cluster-by\"><a href=\"#cluster-by\" class=\"headerlink\" title=\"cluster by\"></a>cluster by</h2><pre class=\"language-none\"><code class=\"language-none\">你应该已经知道了：当distribute by 和 sort by 所指定的字段相同时，即可以使用cluster by。但是，有人禁不住就要问：那cluster by有什么存在意义吗？按照XX字段分区又按照XX字段排序。\n      答案是：当分区数量小于字段种类时，就有意义。\n       举个例子：\n       有一张学生表，全校共有100个专业，但是因为性能问题，分区只能指定5个。这时候，按照专业分区，再按照专业排序就有存在的意义了。</code></pre>\n\n<h2 id=\"Distribute-by实现全局排序\"><a href=\"#Distribute-by实现全局排序\" class=\"headerlink\" title=\"Distribute by实现全局排序\"></a>Distribute by实现全局排序</h2><pre class=\"language-none\"><code class=\"language-none\">select\n*\nfrom table_name  distribute by(case when age&gt;25 then 0 when age&gt;18 then 1 else 2 end) sort by age\n;</code></pre>\n\n<h1 id=\"hive列转行-amp-行转列\"><a href=\"#hive列转行-amp-行转列\" class=\"headerlink\" title=\"hive列转行&amp;行转列\"></a>hive列转行&amp;行转列</h1><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span>\nid<span class=\"token punctuation\">,</span>\ncollect_set<span class=\"token punctuation\">(</span>login_date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\ncollect_list<span class=\"token punctuation\">(</span>login_date<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span>\nt_b\n<span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> id<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span>unique_log_dt <span class=\"token keyword\">from</span> t_b_group lateral <span class=\"token keyword\">VIEW</span> explode<span class=\"token punctuation\">(</span>u_d<span class=\"token punctuation\">)</span> e_u_d <span class=\"token keyword\">as</span> unique_log_dt<span class=\"token punctuation\">;</span></code></pre>\n\n<h1 id=\"mysqlSQL优化\"><a href=\"#mysqlSQL优化\" class=\"headerlink\" title=\"mysqlSQL优化\"></a>mysqlSQL优化</h1><h2 id=\"in和exist的使用\"><a href=\"#in和exist的使用\" class=\"headerlink\" title=\"in和exist的使用\"></a>in和exist的使用</h2><p>使用 EXISTS 时更快的原因有以下两个。</p>\n<ul>\n<li>如果连接列（id）上建立了索引，那么查询 Class_B 时不用查实<br>际的表，只需查索引就可以了。</li>\n<li>如果使用 EXISTS，那么只要查到一行数据满足条件就会终止查询，<br>  不用像使用 IN 时一样扫描全表。在这一点上 NOT EXISTS 也一样。</li>\n</ul>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">//in</span>\n<span class=\"token keyword\">explain</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> grade g <span class=\"token keyword\">where</span> id <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> id <span class=\"token keyword\">from</span> order_tb ot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nid<span class=\"token operator\">|</span>select_type<span class=\"token operator\">|</span><span class=\"token keyword\">table</span><span class=\"token operator\">|</span>partitions<span class=\"token operator\">|</span><span class=\"token keyword\">type</span> <span class=\"token operator\">|</span>possible_keys<span class=\"token operator\">|</span><span class=\"token keyword\">key</span>    <span class=\"token operator\">|</span>key_len<span class=\"token operator\">|</span>ref<span class=\"token operator\">|</span><span class=\"token keyword\">rows</span><span class=\"token operator\">|</span>filtered<span class=\"token operator\">|</span>Extra                                             <span class=\"token operator\">|</span>\n<span class=\"token comment\">--|-----------|-----|----------|-----|-------------|-------|-------|---|----|--------|--------------------------------------------------|</span>\n <span class=\"token number\">1</span><span class=\"token operator\">|</span><span class=\"token keyword\">SIMPLE</span>     <span class=\"token operator\">|</span>ot   <span class=\"token operator\">|</span>          <span class=\"token operator\">|</span><span class=\"token keyword\">index</span><span class=\"token operator\">|</span><span class=\"token keyword\">PRIMARY</span>      <span class=\"token operator\">|</span><span class=\"token keyword\">PRIMARY</span><span class=\"token operator\">|</span><span class=\"token number\">4</span>      <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token number\">1</span><span class=\"token operator\">|</span>   <span class=\"token number\">100.0</span><span class=\"token operator\">|</span><span class=\"token keyword\">Using</span> <span class=\"token keyword\">index</span>                                       <span class=\"token operator\">|</span>\n <span class=\"token number\">1</span><span class=\"token operator\">|</span><span class=\"token keyword\">SIMPLE</span>     <span class=\"token operator\">|</span>g    <span class=\"token operator\">|</span>          <span class=\"token operator\">|</span><span class=\"token keyword\">ALL</span>  <span class=\"token operator\">|</span>             <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token number\">6</span><span class=\"token operator\">|</span>   <span class=\"token number\">16.67</span><span class=\"token operator\">|</span><span class=\"token keyword\">Using</span> <span class=\"token keyword\">where</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">Using</span> <span class=\"token keyword\">join</span> buffer <span class=\"token punctuation\">(</span>Block Nested <span class=\"token keyword\">Loop</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span>\n\n\n<span class=\"token comment\">//exist</span>\n<span class=\"token keyword\">explain</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> grade g <span class=\"token keyword\">where</span>  <span class=\"token keyword\">EXISTS</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> id <span class=\"token keyword\">from</span> order_tb ot <span class=\"token keyword\">where</span> ot<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> g<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nid<span class=\"token operator\">|</span>select_type       <span class=\"token operator\">|</span><span class=\"token keyword\">table</span><span class=\"token operator\">|</span>partitions<span class=\"token operator\">|</span><span class=\"token keyword\">type</span>  <span class=\"token operator\">|</span>possible_keys<span class=\"token operator\">|</span><span class=\"token keyword\">key</span>    <span class=\"token operator\">|</span>key_len<span class=\"token operator\">|</span>ref         <span class=\"token operator\">|</span><span class=\"token keyword\">rows</span><span class=\"token operator\">|</span>filtered<span class=\"token operator\">|</span>Extra      <span class=\"token operator\">|</span>\n<span class=\"token comment\">--|------------------|-----|----------|------|-------------|-------|-------|------------|----|--------|-----------|</span>\n <span class=\"token number\">1</span><span class=\"token operator\">|</span><span class=\"token keyword\">PRIMARY</span>           <span class=\"token operator\">|</span>g    <span class=\"token operator\">|</span>          <span class=\"token operator\">|</span><span class=\"token keyword\">ALL</span>   <span class=\"token operator\">|</span>             <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>            <span class=\"token operator\">|</span>   <span class=\"token number\">6</span><span class=\"token operator\">|</span>   <span class=\"token number\">100.0</span><span class=\"token operator\">|</span><span class=\"token keyword\">Using</span> <span class=\"token keyword\">where</span><span class=\"token operator\">|</span>\n <span class=\"token number\">2</span><span class=\"token operator\">|</span>DEPENDENT SUBQUERY<span class=\"token operator\">|</span>ot   <span class=\"token operator\">|</span>          <span class=\"token operator\">|</span>eq_ref<span class=\"token operator\">|</span><span class=\"token keyword\">PRIMARY</span>      <span class=\"token operator\">|</span><span class=\"token keyword\">PRIMARY</span><span class=\"token operator\">|</span><span class=\"token number\">4</span>      <span class=\"token operator\">|</span>company<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">.</span>id<span class=\"token operator\">|</span>   <span class=\"token number\">1</span><span class=\"token operator\">|</span>   <span class=\"token number\">100.0</span><span class=\"token operator\">|</span><span class=\"token keyword\">Using</span> <span class=\"token keyword\">index</span><span class=\"token operator\">|</span></code></pre>\n\n<h2 id=\"参数是子查询时，使用连接代替-IN\"><a href=\"#参数是子查询时，使用连接代替-IN\" class=\"headerlink\" title=\"参数是子查询时，使用连接代替 IN\"></a>参数是子查询时，使用连接代替 IN</h2><ul>\n<li>在有索引的情况下，有数据量等因素的限制，性能不好和exist比较，没有索引的情况下，用exist好一点</li>\n</ul>\n<pre class=\"language-none\"><code class=\"language-none\">explain\nselect g.* from grade g join order_tb ot on g.id &#x3D; ot.id ;\n\nid|select_type|table|partitions|type |possible_keys|key    |key_len|ref|rows|filtered|Extra                                             |\n--|-----------|-----|----------|-----|-------------|-------|-------|---|----|--------|--------------------------------------------------|\n 1|SIMPLE     |ot   |          |index|PRIMARY      |PRIMARY|4      |   |   1|   100.0|Using index                                       |\n 1|SIMPLE     |g    |          |ALL  |             |       |       |   |   6|   16.67|Using where; Using join buffer (Block Nested Loop)|</code></pre>\n\n<h2 id=\"使用exist去重的情况\"><a href=\"#使用exist去重的情况\" class=\"headerlink\" title=\"使用exist去重的情况\"></a>使用exist去重的情况</h2><ul>\n<li>某个维度表商品的id是唯一的</li>\n<li>事实表中有多个商品记录，<strong>还包含了维度表中不存在的商品</strong></li>\n<li>我们要找出有销售记录的维度表中的商品</li>\n</ul>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token number\">1</span>、使用<span class=\"token operator\">in</span>，子查询\n<span class=\"token number\">2</span>、使用jion，再进行去重\n<span class=\"token number\">3</span>、使用<span class=\"token keyword\">exists</span>，用维度商品表驱动事实表（不会进行排序，加快了查询）\n\n注：默认使用排序的运算\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> 子句\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> 子句\n聚合函数（SUM、COUNT、AVG、MAX、MIN）\n<span class=\"token keyword\">DISTINCT</span>\n集合运算符（<span class=\"token keyword\">UNION</span>、<span class=\"token keyword\">INTERSECT</span>、<span class=\"token keyword\">EXCEPT</span>） \n窗口函数（RANK、ROW_NUMBER 等）</code></pre>\n\n<h2 id=\"hiving子句\"><a href=\"#hiving子句\" class=\"headerlink\" title=\"hiving子句\"></a>hiving子句</h2><pre class=\"language-none\"><code class=\"language-none\">hiving默认进行排序\nhiving是对聚合后的视图进行筛选操作，一般没有了索引的支持\n建议先用where进行筛选，利用索引，减轻排序负担</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>title: 一月杂项<br>date: 2021-12-30 16:58:24<br>tags: 随笔<br>categories: 综合</p>\n<h1 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h1><h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><ul>\n<li><p>泛型方法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 比较三个值并返回最大值</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Comparable</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">maximum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> y<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token class-name\">T</span> max <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 假设x是初始最大值</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           max <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span> <span class=\"token comment\">//y 更大</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           max <span class=\"token operator\">=</span> z<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 现在 z 更大</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回最大对象</span>\n   <span class=\"token punctuation\">&#125;</span></code></pre></li>\n<li><p>泛型类</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//可以接受任何类型的参数</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Box</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> t<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span></code></pre></li>\n<li><p>类型通配符</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//可以接受任何类型的list</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data :\"</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span></code></pre></li>\n</ul>\n<h2 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h2><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IllegalAccessException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">VisitorStats</span> visitorStats <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VisitorStats</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sa\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sf\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields <span class=\"token operator\">=</span> visitorStats<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>fields<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> field <span class=\"token operator\">:</span> fields<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            field<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置允许通过反射访问</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">/*字段名字*/</span><span class=\"token operator\">+</span><span class=\"token string\">\"--- \"</span><span class=\"token operator\">+</span>field<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>visitorStats<span class=\"token punctuation\">)</span><span class=\"token comment\">/*字段的值*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n\n\n\n\n<h2 id=\"Stream流\"><a href=\"#Stream流\" class=\"headerlink\" title=\"Stream流\"></a>Stream流</h2><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//转为流</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> collect <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//转为list</span>\n\n<span class=\"token comment\">//        过滤</span>\n        strings<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span><span class=\"token operator\">!</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">print</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        排序</span>\n        strings<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        reduce操作</span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> reduce <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> y<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//求最长的字符串</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>reduce<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Integer</span> reduce1 <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//求字符串的总长度</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>reduce1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        map操作</span>\n        strings<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span>x<span class=\"token operator\">+</span><span class=\"token string\">\"功能增强\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n\n\n<h2 id=\"lambdas表达式\"><a href=\"#lambdas表达式\" class=\"headerlink\" title=\"lambdas表达式\"></a>lambdas表达式</h2><h2 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h2><h3 id=\"四种线程池\"><a href=\"#四种线程池\" class=\"headerlink\" title=\"四种线程池\"></a>四种线程池</h3><p><a href=\"https://www.cnblogs.com/zhujiabin/p/5404771.html\">https://www.cnblogs.com/zhujiabin/p/5404771.html</a></p>\n<h2 id=\"rocketMq-stream\"><a href=\"#rocketMq-stream\" class=\"headerlink\" title=\"rocketMq-stream\"></a>rocketMq-stream</h2><p>有时间窗口，水位语法，进行分组，计数，求和，均值，去重</p>\n<h1 id=\"ck\"><a href=\"#ck\" class=\"headerlink\" title=\"ck\"></a>ck</h1><h2 id=\"分布式查询问题\"><a href=\"#分布式查询问题\" class=\"headerlink\" title=\"分布式查询问题\"></a>分布式查询问题</h2><ul>\n<li><p>问题</p>\n<ul>\n<li><p>直接join</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#实际使用的都是每个分片的本地表</span>\n<span class=\"token keyword\">SELECT</span> uniq<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> test_query_all <span class=\"token keyword\">WHERE</span> repo <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token operator\">AND</span> id <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> id <span class=\"token keyword\">FROM</span> test_query_local <span class=\"token keyword\">WHERE</span> repo <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#每个节点都对全局表发出了一次查询</span>\n<span class=\"token keyword\">SELECT</span> uniq<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> test_query_all <span class=\"token keyword\">WHERE</span> repo <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token operator\">AND</span> id <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> id <span class=\"token keyword\">FROM</span> test_query_all <span class=\"token keyword\">WHERE</span> repo <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n</code></pre></li>\n</ul>\n</li>\n<li><p>GLOBAL</p>\n<ul>\n<li>先进行分布式的查询，然后将结果汇总分发到每个分片节点</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#将结果分发</span>\n<span class=\"token keyword\">SELECT</span> uniq<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> test_query_all <span class=\"token keyword\">WHERE</span> repo <span class=\"token operator\">=</span> <span class=\"token number\">100</span> \n<span class=\"token operator\">AND</span> id <span class=\"token keyword\">GLOBAL</span> <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> id <span class=\"token keyword\">FROM</span> test_query_all <span class=\"token keyword\">WHERE</span> repo <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#分发右表到t1</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> test_query_all <span class=\"token keyword\">AS</span> t1 \n<span class=\"token keyword\">GLOBAL</span> <span class=\"token keyword\">JOIN</span> test_query_all <span class=\"token keyword\">AS</span> t2 <span class=\"token keyword\">ON</span> t1<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span>id</code></pre>\n\n<h1 id=\"raid\"><a href=\"#raid\" class=\"headerlink\" title=\"raid\"></a>raid</h1><ul>\n<li>利用多磁盘，实现并行的对数据的存取</li>\n</ul>\n<h1 id=\"sql执行流程\"><a href=\"#sql执行流程\" class=\"headerlink\" title=\"sql执行流程\"></a>sql执行流程</h1><ul>\n<li><p>预处理为ast，抽象语法树</p>\n</li>\n<li><p>逻辑优化</p>\n<ul>\n<li>谓词和算子下推</li>\n<li>公共子表达式消除,标量的直接替换</li>\n<li>视图展开，简化常量运算表达式，谓词逻辑的重写，语义的优化等</li>\n</ul>\n</li>\n<li><p>物理优化</p>\n<ul>\n<li>负责把内部查询表达转化成一个高效的查询计划，指导DBMS如何去取表，如何进行排序，如何Join</li>\n</ul>\n</li>\n<li><p>查询执行</p>\n<ul>\n<li>负责执行具体的查询计划，从存储引擎中获取数据并且对数据应用查询计划得到结果</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"ck的执行流程\"><a href=\"#ck的执行流程\" class=\"headerlink\" title=\"ck的执行流程\"></a>ck的执行流程</h1><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token number\">1</span>.服务端接收客户端发来的SQL请求，具体形式是一个网络包，Server的协议层需要拆包把SQL解析出来\n<span class=\"token number\">2</span>.Server负责初始化上下文与Network Handler，然后 Parser 对Query做词法和语法分析，解析成AST\n<span class=\"token number\">3</span>.Interpreter的 SyntaxAnalyzer 会应用一些启发式规则对AST进行优化重写\n<span class=\"token number\">4</span>.Interpreter的 ExpressionAnalyzer 根据上下文信息以及优化重写后的AST生成物理执行计划\n<span class=\"token number\">5</span>.物理执行计划分发到本地或者分布式的executor,各自从存储引擎中获取数据,应用执行计划\n<span class=\"token number\">6</span>.Server把执行后的结果以Block流的形式输出到Socket缓冲区,Client从Socket中读取即可得到结果</code></pre>\n\n<h1 id=\"ck引擎\"><a href=\"#ck引擎\" class=\"headerlink\" title=\"ck引擎\"></a>ck引擎</h1><ul>\n<li><p>ReplacingMergeTree</p>\n<ul>\n<li>分区内同主键去重</li>\n</ul>\n</li>\n<li><p>CollapsingMergeTree</p>\n<ul>\n<li>标记相反，主键相同的进行折叠，有分区的<strong>限制</strong></li>\n</ul>\n</li>\n<li><p>VersionedCollapsingMergeTree</p>\n<ul>\n<li>主键相同，且Version相同、Sign相反的行，在Compaction时会被删除</li>\n</ul>\n</li>\n<li><p>SummingMergeTree</p>\n<ul>\n<li>合并的时候对数据进行聚合</li>\n</ul>\n</li>\n<li><p>AggregatingMergeTree</p>\n<ul>\n<li>合并的时候指定聚合函数聚合</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"拉链\"><a href=\"#拉链\" class=\"headerlink\" title=\"拉链\"></a>拉链</h1><ul>\n<li>union all和union的区别<ul>\n<li>union all不去重</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#原订单表</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> wedw_ods<span class=\"token punctuation\">.</span>order_info_20200910<span class=\"token punctuation\">(</span>\n order_id     string    <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'订单id'</span>\n<span class=\"token punctuation\">,</span>order_status string    <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'订单状态'</span>\n<span class=\"token punctuation\">,</span>create_time  <span class=\"token keyword\">timestamp</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'创建时间'</span>\n<span class=\"token punctuation\">,</span>update_time  <span class=\"token keyword\">timestamp</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'更新时间'</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'订单表'</span>\n<span class=\"token keyword\">row</span> format delimited <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">','</span>\n<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#拉链表，增加了生效的开始&amp;结束时间</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> wedw_dwd<span class=\"token punctuation\">.</span>order_info_dz<span class=\"token punctuation\">(</span>\n order_id     string    <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'订单id'</span>\n<span class=\"token punctuation\">,</span>order_status string    <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'订单状态'</span>\n<span class=\"token punctuation\">,</span>create_time  <span class=\"token keyword\">timestamp</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'创建时间'</span>\n<span class=\"token punctuation\">,</span>update_time  <span class=\"token keyword\">timestamp</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'更新时间'</span>\n<span class=\"token punctuation\">,</span>start_dt     <span class=\"token keyword\">date</span>      <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'开始生效日期'</span>\n<span class=\"token punctuation\">,</span>end_dt       <span class=\"token keyword\">date</span>      <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'结束生效日期'</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'订单表'</span>\npartitioned <span class=\"token keyword\">by</span> <span class=\"token punctuation\">(</span>date_id string<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">row</span> format delimited <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">','</span>\n<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#初始化，更新时间为开始时间，最大时间为结束时间</span>\n<span class=\"token keyword\">insert</span> overwrite <span class=\"token keyword\">table</span> wedw_dwd<span class=\"token punctuation\">.</span>order_info_dz <span class=\"token keyword\">partition</span><span class=\"token punctuation\">(</span>date_id <span class=\"token operator\">=</span> <span class=\"token string\">'2020-09-10'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">select</span>\n order_id    \n<span class=\"token punctuation\">,</span>order_status\n<span class=\"token punctuation\">,</span>create_time \n<span class=\"token punctuation\">,</span>update_time \n<span class=\"token punctuation\">,</span>to_date<span class=\"token punctuation\">(</span>update_time<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> start_dt   \n<span class=\"token punctuation\">,</span><span class=\"token string\">'9999-12-31'</span> <span class=\"token keyword\">as</span> end_dt  \n<span class=\"token keyword\">from</span>\nwedw_ods<span class=\"token punctuation\">.</span>order_info_20200910\n<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#每天写入，今天的全量&amp;昨天的全部（状态修改的记录修改的状态）</span>\n<span class=\"token keyword\">insert</span> overwrite <span class=\"token keyword\">table</span> wedw_dwd<span class=\"token punctuation\">.</span>order_info_dz <span class=\"token keyword\">partition</span><span class=\"token punctuation\">(</span>date_id <span class=\"token operator\">=</span> <span class=\"token string\">'2020-09-11'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">select</span>\n t1<span class=\"token punctuation\">.</span>order_id    \n<span class=\"token punctuation\">,</span>t1<span class=\"token punctuation\">.</span>order_status\n<span class=\"token punctuation\">,</span>t1<span class=\"token punctuation\">.</span>create_time \n<span class=\"token punctuation\">,</span>t1<span class=\"token punctuation\">.</span>update_time\n<span class=\"token punctuation\">,</span>t1<span class=\"token punctuation\">.</span>start_dt\n<span class=\"token punctuation\">,</span><span class=\"token keyword\">case</span> <span class=\"token keyword\">when</span> t1<span class=\"token punctuation\">.</span>end_dt <span class=\"token operator\">=</span> <span class=\"token string\">'9999-12-31'</span> <span class=\"token operator\">and</span> t2<span class=\"token punctuation\">.</span>order_id <span class=\"token operator\">is</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">then</span> t1<span class=\"token punctuation\">.</span>date_id <span class=\"token keyword\">else</span> t1<span class=\"token punctuation\">.</span>end_dt <span class=\"token keyword\">end</span> <span class=\"token keyword\">as</span> end_dt\n<span class=\"token keyword\">from</span>\nwedw_dwd<span class=\"token punctuation\">.</span>order_info_dz t1\n<span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> wedw_ods<span class=\"token punctuation\">.</span>order_info_20200911 t2\n<span class=\"token keyword\">on</span> t1<span class=\"token punctuation\">.</span>order_id <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span>order_id\n<span class=\"token keyword\">where</span> t1<span class=\"token punctuation\">.</span>date_id <span class=\"token operator\">=</span> <span class=\"token string\">'2020-09-10'</span>\n<span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span>\n<span class=\"token keyword\">SELECT</span>\n t1<span class=\"token punctuation\">.</span>order_id    \n<span class=\"token punctuation\">,</span>t1<span class=\"token punctuation\">.</span>order_status\n<span class=\"token punctuation\">,</span>t1<span class=\"token punctuation\">.</span>create_time \n<span class=\"token punctuation\">,</span>t1<span class=\"token punctuation\">.</span>update_time\n<span class=\"token punctuation\">,</span>to_date<span class=\"token punctuation\">(</span>update_time<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> start_dt\n<span class=\"token punctuation\">,</span><span class=\"token string\">'9999-12-31'</span> <span class=\"token keyword\">as</span> end_dt\n<span class=\"token keyword\">FROM</span> wedw_ods<span class=\"token punctuation\">.</span>order_info_20200911 t1\n<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#查询某天的快照</span>\n<span class=\"token keyword\">select</span> \n<span class=\"token operator\">*</span> \n<span class=\"token keyword\">from</span> \nwedw_dwd<span class=\"token punctuation\">.</span>order_info_dz \n<span class=\"token keyword\">where</span> \ndate_id <span class=\"token operator\">=</span> <span class=\"token string\">'2020-09-10'</span> \n<span class=\"token operator\">and</span> start_dt <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'2020-09-10'</span> \n<span class=\"token operator\">and</span> end_dt <span class=\"token operator\">>=</span><span class=\"token string\">'2020-09-10'</span>\n<span class=\"token punctuation\">;</span></code></pre>\n\n<h1 id=\"数据倾斜\"><a href=\"#数据倾斜\" class=\"headerlink\" title=\"数据倾斜\"></a>数据倾斜</h1><ul>\n<li>空值过滤</li>\n<li>shuffle并行度<br>* </li>\n</ul>\n<h1 id=\"flink的ck-sink\"><a href=\"#flink的ck-sink\" class=\"headerlink\" title=\"flink的ck-sink\"></a>flink的ck-sink</h1><h1 id=\"Sql进阶\"><a href=\"#Sql进阶\" class=\"headerlink\" title=\"Sql进阶\"></a>Sql进阶</h1><h2 id=\"约束\"><a href=\"#约束\" class=\"headerlink\" title=\"约束\"></a>约束</h2><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名称 <span class=\"token keyword\">add</span> <span class=\"token keyword\">constraint</span> 约束名称 增加的约束类型 （列名）<span class=\"token comment\">//mysql未实现</span>\n<span class=\"token comment\">//实现方式-枚举，触发器</span>\n<span class=\"token comment\">//枚举</span>\n <span class=\"token punctuation\">`</span>Sex<span class=\"token punctuation\">`</span> <span class=\"token keyword\">enum</span><span class=\"token punctuation\">(</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">//触发器</span>\n https:<span class=\"token comment\">//www.cnblogs.com/geaozhang/p/6819648.html#chuangjian</span></code></pre>\n\n<h2 id=\"SQL中exists和in的用法以及区别\"><a href=\"#SQL中exists和in的用法以及区别\" class=\"headerlink\" title=\"SQL中exists和in的用法以及区别\"></a><a href=\"https://www.cnblogs.com/hider/p/12446035.html\">SQL中exists和in的用法以及区别</a></h2><ul>\n<li><p><code>in</code> 和 <code>exists</code> 的区别： 如果子查询得出的结果集记录较少，主查询中的表较大且又有索引时应该用 <code>in</code>， 反之如果外层的主查询记录较少，子查询中的表大，又有索引时使用 <code>exists</code>。</p>\n</li>\n<li><p><strong>1. 外层查询表小于子查询表，则用 <code>exists</code>，外层查询表大于子查询表，则用 <code>in</code> ，如果外层和子查询表差不多，则爱用哪个用哪个。</strong></p>\n<p><strong>2.not exists 比 not in 效率高。</strong></p>\n</li>\n</ul>\n<h2 id=\"多列求最值\"><a href=\"#多列求最值\" class=\"headerlink\" title=\"多列求最值\"></a>多列求最值</h2><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> GREATEST<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n       LEAST<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </code></pre>\n\n\n\n<h2 id=\"指定列，按照内容排序\"><a href=\"#指定列，按照内容排序\" class=\"headerlink\" title=\"指定列，按照内容排序\"></a>指定列，按照内容排序</h2><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> \nname\n<span class=\"token keyword\">from</span> depts d2 \n<span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> <span class=\"token keyword\">CASE</span> name \n\t<span class=\"token keyword\">when</span> <span class=\"token string\">'jack'</span> <span class=\"token keyword\">then</span> <span class=\"token number\">1</span>\n\t<span class=\"token keyword\">when</span> <span class=\"token string\">'dep1'</span> <span class=\"token keyword\">then</span> <span class=\"token number\">2</span>\n\t<span class=\"token keyword\">when</span> <span class=\"token string\">'dep2'</span> <span class=\"token keyword\">then</span> <span class=\"token number\">3</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token number\">4</span> <span class=\"token keyword\">END</span> <span class=\"token punctuation\">;</span> \n\t\n\t\n<span class=\"token comment\">/*打印排序号*/</span>\n<span class=\"token keyword\">SELECT</span> \nname<span class=\"token punctuation\">,</span>\n<span class=\"token keyword\">case</span> name\n<span class=\"token keyword\">when</span> <span class=\"token string\">'jack'</span> <span class=\"token keyword\">then</span> <span class=\"token number\">1</span>\n\t<span class=\"token keyword\">when</span> <span class=\"token string\">'dep1'</span> <span class=\"token keyword\">then</span> <span class=\"token number\">2</span>\n\t<span class=\"token keyword\">when</span> <span class=\"token string\">'dep2'</span> <span class=\"token keyword\">then</span> <span class=\"token number\">3</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token number\">4</span> <span class=\"token keyword\">END</span> <span class=\"token keyword\">as</span> tool_v\n<span class=\"token keyword\">from</span> depts d2 \n<span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> tool_v <span class=\"token punctuation\">;</span> </code></pre>\n\n<h2 id=\"自连接实现开窗\"><a href=\"#自连接实现开窗\" class=\"headerlink\" title=\"自连接实现开窗\"></a>自连接实现开窗</h2><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> P1<span class=\"token punctuation\">.</span>district<span class=\"token punctuation\">,</span> P1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n P1<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span>P2<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">FROM</span> DistrictProducts P2\n <span class=\"token keyword\">WHERE</span> P1<span class=\"token punctuation\">.</span>district <span class=\"token operator\">=</span> P2<span class=\"token punctuation\">.</span>district <span class=\"token comment\">-- 在同一个地区内进行比较</span>\n <span class=\"token operator\">AND</span> P2<span class=\"token punctuation\">.</span>price <span class=\"token operator\">></span> P1<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token keyword\">AS</span> rank_1\n <span class=\"token keyword\">FROM</span> DistrictProducts P1<span class=\"token punctuation\">;</span>\n \n <span class=\"token keyword\">SELECT</span> P1<span class=\"token punctuation\">.</span>district<span class=\"token punctuation\">,</span> P1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>P1<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> price<span class=\"token punctuation\">,</span> \n <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span>P2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token keyword\">AS</span> rank_1\n <span class=\"token keyword\">FROM</span> DistrictProducts P1 <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">OUTER</span> <span class=\"token keyword\">JOIN</span> DistrictProducts P2\n <span class=\"token keyword\">ON</span> P1<span class=\"token punctuation\">.</span>district <span class=\"token operator\">=</span> P2<span class=\"token punctuation\">.</span>district\n <span class=\"token operator\">AND</span> P1<span class=\"token punctuation\">.</span>price <span class=\"token operator\">&lt;</span> P2<span class=\"token punctuation\">.</span>price\n <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> P1<span class=\"token punctuation\">.</span>district<span class=\"token punctuation\">,</span> P1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n \n <span class=\"token comment\">/*取前几名*/</span>\n <span class=\"token keyword\">SELECT</span> \ng1<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">,</span>\ng1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\ng1<span class=\"token punctuation\">.</span>grade<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>g2<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span> grade g2 <span class=\"token keyword\">where</span> g1<span class=\"token punctuation\">.</span>source <span class=\"token operator\">=</span> g2<span class=\"token punctuation\">.</span>source\n<span class=\"token operator\">and</span> g2<span class=\"token punctuation\">.</span>grade <span class=\"token operator\">></span> g1<span class=\"token punctuation\">.</span>grade\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token keyword\">as</span> rank_1\n<span class=\"token keyword\">FROM</span> \ngrade g1 <span class=\"token keyword\">having</span> rank_1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n </code></pre>\n\n<h2 id=\"COALESCE函数\"><a href=\"#COALESCE函数\" class=\"headerlink\" title=\"COALESCE函数\"></a>COALESCE函数</h2><pre class=\"language-none\"><code class=\"language-none\">SELECT COALESCE(NULL,NULL,3,4,5);&#x2F;&#x2F;返回第一个非空的值，全部为空，则返回空</code></pre>\n\n<h2 id=\"SQL中的谓词\"><a href=\"#SQL中的谓词\" class=\"headerlink\" title=\"SQL中的谓词\"></a>SQL中的谓词</h2><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token operator\">=</span>、<span class=\"token operator\">&lt;</span>、<span class=\"token operator\">></span>、<span class=\"token operator\">BETWEEN</span>、<span class=\"token operator\">LIKE</span>、<span class=\"token operator\">IN</span>、<span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span></code></pre>\n\n<h2 id=\"SQL执行顺序\"><a href=\"#SQL执行顺序\" class=\"headerlink\" title=\"SQL执行顺序\"></a>SQL执行顺序</h2><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">from</span>\n<span class=\"token keyword\">on</span>\n<span class=\"token keyword\">join</span>\n<span class=\"token keyword\">where</span>\n<span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> \n<span class=\"token keyword\">with</span>\n<span class=\"token keyword\">having</span>\n<span class=\"token keyword\">select</span>\n<span class=\"token keyword\">distinct</span>\n<span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span>\n<span class=\"token keyword\">limit</span></code></pre>\n\n\n\n<h1 id=\"hiveJOIN\"><a href=\"#hiveJOIN\" class=\"headerlink\" title=\"hiveJOIN\"></a>hiveJOIN</h1><h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><pre class=\"language-none\"><code class=\"language-none\">&#x2F;&#x2F;LEFT OUTER JOIN\nSELECT a.val, b.val FROM a LEFT OUTER JOIN b ON (a.key&#x3D;b.key)\nWHERE a.ds&#x3D;&#39;2009-07-07&#39; AND b.ds&#x3D;&#39;2009-07-07&#39;\nSELECT a.val, b.val FROM a LEFT OUTER JOIN b\nON (a.key&#x3D;b.key AND b.ds&#x3D;&#39;2009-07-07&#39; AND a.ds&#x3D;&#39;2009-07-07&#39;)\n&#x2F;*写where，会先过滤，再join，其他的会扫描全表*&#x2F;\n</code></pre>\n\n\n\n<h2 id=\"STREAMTABLE\"><a href=\"#STREAMTABLE\" class=\"headerlink\" title=\"STREAMTABLE\"></a>STREAMTABLE</h2><pre class=\"language-none\"><code class=\"language-none\">SELECT &#96;&#96;&#x2F;*+ STREAMTABLE(a) *&#x2F;&#96; &#96;a.val, b.val, c.val FROM a JOIN b ON (a.key &#x3D; b.key1) JOIN c ON (c.key &#x3D; b.key1)\na表太大的话，不放在内存中，方式oom</code></pre>\n\n<h2 id=\"LEFT-RIGHT-and-FULL-OUTER-join\"><a href=\"#LEFT-RIGHT-and-FULL-OUTER-join\" class=\"headerlink\" title=\"LEFT, RIGHT, and FULL OUTER join\"></a>LEFT, RIGHT, and FULL OUTER join</h2><pre class=\"language-none\"><code class=\"language-none\">&#x2F;&#x2F;这个怎么join的\nSELECT a.val1, a.val2, b.val, c.val\nFROM a\nJOIN b ON (a.key &#x3D; b.key)\nLEFT OUTER JOIN c ON (a.key &#x3D; c.key)\n</code></pre>\n\n<h2 id=\"LEFT-SEMI-JOIN\"><a href=\"#LEFT-SEMI-JOIN\" class=\"headerlink\" title=\"LEFT SEMI JOIN\"></a>LEFT SEMI JOIN</h2><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> a<span class=\"token punctuation\">.</span><span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span>\n<span class=\"token keyword\">FROM</span> a\n<span class=\"token keyword\">WHERE</span> a<span class=\"token punctuation\">.</span><span class=\"token keyword\">key</span> <span class=\"token operator\">in</span>\n <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> b<span class=\"token punctuation\">.</span><span class=\"token keyword\">key</span>\n  <span class=\"token keyword\">FROM</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">SELECT</span> a<span class=\"token punctuation\">.</span><span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>val\n<span class=\"token keyword\">FROM</span> a <span class=\"token keyword\">LEFT</span> SEMI <span class=\"token keyword\">JOIN</span> b <span class=\"token keyword\">ON</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token keyword\">key</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token keyword\">key</span><span class=\"token punctuation\">)</span>  </code></pre>\n\n<h2 id=\"不进行reduce\"><a href=\"#不进行reduce\" class=\"headerlink\" title=\"不进行reduce\"></a>不进行reduce</h2><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token comment\">/*+ MAPJOIN(b) */</span> a<span class=\"token punctuation\">.</span><span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span>\n<span class=\"token keyword\">FROM</span> a <span class=\"token keyword\">JOIN</span> b <span class=\"token keyword\">ON</span> a<span class=\"token punctuation\">.</span><span class=\"token keyword\">key</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token keyword\">key</span>\n<span class=\"token comment\">/*a被拆开，与bjoin*/</span></code></pre>\n\n<h2 id=\"谓词下推\"><a href=\"#谓词下推\" class=\"headerlink\" title=\"谓词下推\"></a>谓词下推</h2><pre class=\"language-none\"><code class=\"language-none\">explain \nSELECT\na.*,\nb.name\nFROM\nt_b a left join t_c b \nwhere a.login_date &#x3D; &quot;2017-02-01&quot; and a.id &#x3D; b.id;\na:predicate: ((login_date &#x3D; &#39;2017-02-01&#39;) and id is not null) (type: boolean)\nb:predicate: id is not null (type: boolean)\n\nexplain \nSELECT\na.*,\nb.name\nFROM\nt_b a left join t_c b \non a.login_date &#x3D; &quot;2017-02-01&quot; and a.id &#x3D; b.id;\na:\nb:\n\nexplain \nSELECT\na.*,\nb.name\nFROM\n(select\n*\nfrom\nt_b where login_date &#x3D; &quot;2017-02-01&quot;) a left join t_c b \nwhere a.id &#x3D; b.id;\na:\nb:predicate: (login_date &#x3D; &#39;2017-02-01&#39;) (type: boolean)\n\n</code></pre>\n\n<h2 id=\"convert-join\"><a href=\"#convert-join\" class=\"headerlink\" title=\"convert.join\"></a>convert.join</h2><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">set</span> hive.auto.convert.join.noconditionaltask <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin class-name\">set</span> hive.auto.convert.join.noconditionaltask.size <span class=\"token operator\">=</span> <span class=\"token number\">10000000</span><span class=\"token punctuation\">;</span>\n设置大小，可以自动将小的维度表进行广播</code></pre>\n\n<h1 id=\"Order-Sort-Cluster-and-Distribute-By\"><a href=\"#Order-Sort-Cluster-and-Distribute-By\" class=\"headerlink\" title=\"Order, Sort, Cluster, and Distribute By\"></a>Order, Sort, Cluster, and Distribute By</h1><h2 id=\"order-by\"><a href=\"#order-by\" class=\"headerlink\" title=\"order by\"></a>order by</h2><pre class=\"language-none\"><code class=\"language-none\">一个reduce，严格模式要限制范围</code></pre>\n\n<h2 id=\"sort-by\"><a href=\"#sort-by\" class=\"headerlink\" title=\"sort by\"></a>sort by</h2><pre class=\"language-none\"><code class=\"language-none\">先设置了reduce的个数，生成指定数量的文件</code></pre>\n\n<h2 id=\"Distribute-by和sort-by\"><a href=\"#Distribute-by和sort-by\" class=\"headerlink\" title=\"Distribute by和sort by\"></a>Distribute by和sort by</h2><pre class=\"language-none\"><code class=\"language-none\">先设置了reduce的个数，生成指定数量的文件\ndistribyte指定的字段在每个文件中相同\n文件中数据按照sort排序</code></pre>\n\n<h2 id=\"cluster-by\"><a href=\"#cluster-by\" class=\"headerlink\" title=\"cluster by\"></a>cluster by</h2><pre class=\"language-none\"><code class=\"language-none\">你应该已经知道了：当distribute by 和 sort by 所指定的字段相同时，即可以使用cluster by。但是，有人禁不住就要问：那cluster by有什么存在意义吗？按照XX字段分区又按照XX字段排序。\n      答案是：当分区数量小于字段种类时，就有意义。\n       举个例子：\n       有一张学生表，全校共有100个专业，但是因为性能问题，分区只能指定5个。这时候，按照专业分区，再按照专业排序就有存在的意义了。</code></pre>\n\n<h2 id=\"Distribute-by实现全局排序\"><a href=\"#Distribute-by实现全局排序\" class=\"headerlink\" title=\"Distribute by实现全局排序\"></a>Distribute by实现全局排序</h2><pre class=\"language-none\"><code class=\"language-none\">select\n*\nfrom table_name  distribute by(case when age&gt;25 then 0 when age&gt;18 then 1 else 2 end) sort by age\n;</code></pre>\n\n<h1 id=\"hive列转行-amp-行转列\"><a href=\"#hive列转行-amp-行转列\" class=\"headerlink\" title=\"hive列转行&amp;行转列\"></a>hive列转行&amp;行转列</h1><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span>\nid<span class=\"token punctuation\">,</span>\ncollect_set<span class=\"token punctuation\">(</span>login_date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\ncollect_list<span class=\"token punctuation\">(</span>login_date<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span>\nt_b\n<span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> id<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span>unique_log_dt <span class=\"token keyword\">from</span> t_b_group lateral <span class=\"token keyword\">VIEW</span> explode<span class=\"token punctuation\">(</span>u_d<span class=\"token punctuation\">)</span> e_u_d <span class=\"token keyword\">as</span> unique_log_dt<span class=\"token punctuation\">;</span></code></pre>\n\n<h1 id=\"mysqlSQL优化\"><a href=\"#mysqlSQL优化\" class=\"headerlink\" title=\"mysqlSQL优化\"></a>mysqlSQL优化</h1><h2 id=\"in和exist的使用\"><a href=\"#in和exist的使用\" class=\"headerlink\" title=\"in和exist的使用\"></a>in和exist的使用</h2><p>使用 EXISTS 时更快的原因有以下两个。</p>\n<ul>\n<li>如果连接列（id）上建立了索引，那么查询 Class_B 时不用查实<br>际的表，只需查索引就可以了。</li>\n<li>如果使用 EXISTS，那么只要查到一行数据满足条件就会终止查询，<br>  不用像使用 IN 时一样扫描全表。在这一点上 NOT EXISTS 也一样。</li>\n</ul>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">//in</span>\n<span class=\"token keyword\">explain</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> grade g <span class=\"token keyword\">where</span> id <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> id <span class=\"token keyword\">from</span> order_tb ot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nid<span class=\"token operator\">|</span>select_type<span class=\"token operator\">|</span><span class=\"token keyword\">table</span><span class=\"token operator\">|</span>partitions<span class=\"token operator\">|</span><span class=\"token keyword\">type</span> <span class=\"token operator\">|</span>possible_keys<span class=\"token operator\">|</span><span class=\"token keyword\">key</span>    <span class=\"token operator\">|</span>key_len<span class=\"token operator\">|</span>ref<span class=\"token operator\">|</span><span class=\"token keyword\">rows</span><span class=\"token operator\">|</span>filtered<span class=\"token operator\">|</span>Extra                                             <span class=\"token operator\">|</span>\n<span class=\"token comment\">--|-----------|-----|----------|-----|-------------|-------|-------|---|----|--------|--------------------------------------------------|</span>\n <span class=\"token number\">1</span><span class=\"token operator\">|</span><span class=\"token keyword\">SIMPLE</span>     <span class=\"token operator\">|</span>ot   <span class=\"token operator\">|</span>          <span class=\"token operator\">|</span><span class=\"token keyword\">index</span><span class=\"token operator\">|</span><span class=\"token keyword\">PRIMARY</span>      <span class=\"token operator\">|</span><span class=\"token keyword\">PRIMARY</span><span class=\"token operator\">|</span><span class=\"token number\">4</span>      <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token number\">1</span><span class=\"token operator\">|</span>   <span class=\"token number\">100.0</span><span class=\"token operator\">|</span><span class=\"token keyword\">Using</span> <span class=\"token keyword\">index</span>                                       <span class=\"token operator\">|</span>\n <span class=\"token number\">1</span><span class=\"token operator\">|</span><span class=\"token keyword\">SIMPLE</span>     <span class=\"token operator\">|</span>g    <span class=\"token operator\">|</span>          <span class=\"token operator\">|</span><span class=\"token keyword\">ALL</span>  <span class=\"token operator\">|</span>             <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token number\">6</span><span class=\"token operator\">|</span>   <span class=\"token number\">16.67</span><span class=\"token operator\">|</span><span class=\"token keyword\">Using</span> <span class=\"token keyword\">where</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">Using</span> <span class=\"token keyword\">join</span> buffer <span class=\"token punctuation\">(</span>Block Nested <span class=\"token keyword\">Loop</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span>\n\n\n<span class=\"token comment\">//exist</span>\n<span class=\"token keyword\">explain</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> grade g <span class=\"token keyword\">where</span>  <span class=\"token keyword\">EXISTS</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> id <span class=\"token keyword\">from</span> order_tb ot <span class=\"token keyword\">where</span> ot<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> g<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nid<span class=\"token operator\">|</span>select_type       <span class=\"token operator\">|</span><span class=\"token keyword\">table</span><span class=\"token operator\">|</span>partitions<span class=\"token operator\">|</span><span class=\"token keyword\">type</span>  <span class=\"token operator\">|</span>possible_keys<span class=\"token operator\">|</span><span class=\"token keyword\">key</span>    <span class=\"token operator\">|</span>key_len<span class=\"token operator\">|</span>ref         <span class=\"token operator\">|</span><span class=\"token keyword\">rows</span><span class=\"token operator\">|</span>filtered<span class=\"token operator\">|</span>Extra      <span class=\"token operator\">|</span>\n<span class=\"token comment\">--|------------------|-----|----------|------|-------------|-------|-------|------------|----|--------|-----------|</span>\n <span class=\"token number\">1</span><span class=\"token operator\">|</span><span class=\"token keyword\">PRIMARY</span>           <span class=\"token operator\">|</span>g    <span class=\"token operator\">|</span>          <span class=\"token operator\">|</span><span class=\"token keyword\">ALL</span>   <span class=\"token operator\">|</span>             <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>            <span class=\"token operator\">|</span>   <span class=\"token number\">6</span><span class=\"token operator\">|</span>   <span class=\"token number\">100.0</span><span class=\"token operator\">|</span><span class=\"token keyword\">Using</span> <span class=\"token keyword\">where</span><span class=\"token operator\">|</span>\n <span class=\"token number\">2</span><span class=\"token operator\">|</span>DEPENDENT SUBQUERY<span class=\"token operator\">|</span>ot   <span class=\"token operator\">|</span>          <span class=\"token operator\">|</span>eq_ref<span class=\"token operator\">|</span><span class=\"token keyword\">PRIMARY</span>      <span class=\"token operator\">|</span><span class=\"token keyword\">PRIMARY</span><span class=\"token operator\">|</span><span class=\"token number\">4</span>      <span class=\"token operator\">|</span>company<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">.</span>id<span class=\"token operator\">|</span>   <span class=\"token number\">1</span><span class=\"token operator\">|</span>   <span class=\"token number\">100.0</span><span class=\"token operator\">|</span><span class=\"token keyword\">Using</span> <span class=\"token keyword\">index</span><span class=\"token operator\">|</span></code></pre>\n\n<h2 id=\"参数是子查询时，使用连接代替-IN\"><a href=\"#参数是子查询时，使用连接代替-IN\" class=\"headerlink\" title=\"参数是子查询时，使用连接代替 IN\"></a>参数是子查询时，使用连接代替 IN</h2><ul>\n<li>在有索引的情况下，有数据量等因素的限制，性能不好和exist比较，没有索引的情况下，用exist好一点</li>\n</ul>\n<pre class=\"language-none\"><code class=\"language-none\">explain\nselect g.* from grade g join order_tb ot on g.id &#x3D; ot.id ;\n\nid|select_type|table|partitions|type |possible_keys|key    |key_len|ref|rows|filtered|Extra                                             |\n--|-----------|-----|----------|-----|-------------|-------|-------|---|----|--------|--------------------------------------------------|\n 1|SIMPLE     |ot   |          |index|PRIMARY      |PRIMARY|4      |   |   1|   100.0|Using index                                       |\n 1|SIMPLE     |g    |          |ALL  |             |       |       |   |   6|   16.67|Using where; Using join buffer (Block Nested Loop)|</code></pre>\n\n<h2 id=\"使用exist去重的情况\"><a href=\"#使用exist去重的情况\" class=\"headerlink\" title=\"使用exist去重的情况\"></a>使用exist去重的情况</h2><ul>\n<li>某个维度表商品的id是唯一的</li>\n<li>事实表中有多个商品记录，<strong>还包含了维度表中不存在的商品</strong></li>\n<li>我们要找出有销售记录的维度表中的商品</li>\n</ul>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token number\">1</span>、使用<span class=\"token operator\">in</span>，子查询\n<span class=\"token number\">2</span>、使用jion，再进行去重\n<span class=\"token number\">3</span>、使用<span class=\"token keyword\">exists</span>，用维度商品表驱动事实表（不会进行排序，加快了查询）\n\n注：默认使用排序的运算\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> 子句\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> 子句\n聚合函数（SUM、COUNT、AVG、MAX、MIN）\n<span class=\"token keyword\">DISTINCT</span>\n集合运算符（<span class=\"token keyword\">UNION</span>、<span class=\"token keyword\">INTERSECT</span>、<span class=\"token keyword\">EXCEPT</span>） \n窗口函数（RANK、ROW_NUMBER 等）</code></pre>\n\n<h2 id=\"hiving子句\"><a href=\"#hiving子句\" class=\"headerlink\" title=\"hiving子句\"></a>hiving子句</h2><pre class=\"language-none\"><code class=\"language-none\">hiving默认进行排序\nhiving是对聚合后的视图进行筛选操作，一般没有了索引的支持\n建议先用where进行筛选，利用索引，减轻排序负担</code></pre>"},{"title":"输入迁移方案","date":"2022-01-26T01:25:00.000Z","author":"nove","_content":"\n# 增量和全量数据的合并\n\n* 传统方式：update+insert\n* 流行的大数据平台都不支持update，则——全外连接+insert overwrite的方式\n* 可以查询某一个时间的快照——拉链表\n\n## 场景\n\n* 用户维表，每天会新增和变化\n\n  ~~~sql\n  #mysql建表\n  create table user_info(\n  id int(10),\n  phone varchar(20),\n  create_time datetime,\n  update_time datetime\n  )\n  \n  #2022-01-23数据\n  1,11111,2022-01-23 14:51:59,2022-01-23 14:51:59\n  2,22222,2022-01-23 12:12:35,2022-01-23 12:12:35\n  3,33333,2022-01-23 12:02:54,2022-01-23 12:02:54\n  4,44444,2022-01-23 09:31:44,2022-01-23 09:31:44\n  5,55555,2022-01-22 21:57:55,2022-01-22 21:57:55\n  \n  ##2022-01-24数据,多了一条，改了两条\n  1,11111,2022-01-23 14:51:59,2022-01-23 14:51:59\n  2,22222,2022-01-23 12:12:35,2022-01-23 12:12:35\n  3,33333,2022-01-23 12:02:54,2022-01-23 12:02:54\n  4,44441,2022-01-23 09:31:44,2022-01-24 09:31:44\n  5,55551,2022-01-22 21:57:55,2022-01-24 21:57:55\n  6,66666,2022-01-24 21:57:55,2022-01-24 21:57:55\n  ~~~\n\n## 全量抽取\n\n~~~sql\n#定义ods的维表\ndrop table if exists ods.user_info;\nCREATE EXTERNAL TABLE ods.user_info (\n  user_num bigint COMMENT '用户id',\n  mobile STRING COMMENT '手机号码',\n  create_time STRING COMMENT '创建时间',\n  update_time STRING COMMENT '更新时间'\n  )\nCOMMENT '用户资料表'\nPARTITIONED BY (dt string);\n\n#定义dim层的维表，做模型的时候使用，要求为当天最新的数据——ods层的表可通用\nCREATE EXTERNAL TABLE dim.user_info (\n  user_num bigint COMMENT '用户id',\n  mobile STRING COMMENT '手机号码',\n  create_time STRING COMMENT '创建时间',\n  update_time STRING COMMENT '更新时间'\n  )\nCOMMENT '用户资料表'\nPARTITIONED BY (dt string);\n\n\n\n#2022-01-23数据抽取\ninsert into ods.user_info partition(dt = '2022-01-23') values\n(1,11111,'2022-01-23 14:51:59','2022-01-23 14:51:59'),\n(2,22222,'2022-01-23 12:12:35','2022-01-23 12:12:35'),\n(3,33333,'2022-01-23 12:02:54','2022-01-23 12:02:54'),\n(4,44444,'2022-01-23 09:31:44','2022-01-23 09:31:44'),\n(5,55555,'2022-01-22 21:57:55','2022-01-22 21:57:55');\n#2022-01-23数据全量写入\ninsert into dim.user_info partition(dt = '2022-01-23') select user_num,mobile,create_time,update_time from ods.user_info;\n\n\n\n#2022-01-24数据抽取\ninsert into ods.user_info partition(dt = '2022-01-24') values\n(1,11111,'2022-01-23 14:51:59','2022-01-23 14:51:59'),\n(2,22222,'2022-01-23 12:12:35','2022-01-23 12:12:35'),\n(3,33333,'2022-01-23 12:02:54','2022-01-23 12:02:54'),\n(4,44441,'2022-01-23 09:31:44','2022-01-24 09:31:44'),\n(5,55551,'2022-01-22 21:57:55','2022-01-24 21:57:55'),\n(6,66666,'2022-01-24 21:57:55','2022-01-24 21:57:55');\n#2022-01-24数据全量写入\ninsert into dim.user_info partition(dt = '2022-01-24') select user_num,mobile,create_time,update_time from ods.user_info;\n~~~\n\n## 增量抽取\n\n~~~sql\n#定义ods的维表\ndrop table if exists ods.user_info;\nCREATE EXTERNAL TABLE ods.user_info (\n  user_num bigint COMMENT '用户id',\n  mobile STRING COMMENT '手机号码',\n  create_time STRING COMMENT '创建时间',\n  update_time STRING COMMENT '更新时间'\n  )\nCOMMENT '用户资料表'\nPARTITIONED BY (dt string);\n\n#定义dim层的维表，做模型的时候使用，要求为当天最新的数据\nCREATE EXTERNAL TABLE dim.user_info (\n  user_num bigint COMMENT '用户id',\n  mobile STRING COMMENT '手机号码',\n  create_time STRING COMMENT '创建时间',\n  update_time STRING COMMENT '更新时间'\n  )\nCOMMENT '用户资料表'\nPARTITIONED BY (dt string);\n\n#初始化2022-01-23数据抽取\ninsert into ods.user_info partition(dt = '2022-01-23') values\n(1,11111,'2022-01-23 14:51:59','2022-01-23 14:51:59'),\n(2,22222,'2022-01-23 12:12:35','2022-01-23 12:12:35'),\n(3,33333,'2022-01-23 12:02:54','2022-01-23 12:02:54'),\n(4,44444,'2022-01-23 09:31:44','2022-01-23 09:31:44'),\n(5,55555,'2022-01-22 21:57:55','2022-01-22 21:57:55');\n#2022-01-23数据全量写入\ninsert into dim.user_info partition(dt = '2022-01-23') select user_num,mobile,create_time,update_time from ods.user_info;\n\n\n#增量抽取，抽取24号新增的和修改的\ninsert into ods.user_info partition(dt = '2022-01-24') values\n(4,44441,'2022-01-23 09:31:44','2022-01-24 09:31:44'),\n(5,55551,'2022-01-22 21:57:55','2022-01-24 21:57:55'),\n(6,66666,'2022-01-24 21:57:55','2022-01-24 21:57:55');\n\n#2022-01-24数据增量写入维度表\ninsert into dim.user_info partition(dt = '2022-01-24') \nselect\nta.user_num   \n,ta.mobile     \n,ta.create_time\n,ta.update_time\nfrom\ndim.user_info ta left join ods.user_info tb\non ta.user_num = tb.user_num\nand tb.dt = '2022-01-24' \nwhere tb.user_num is null\nunion all\nselect\nuser_num   \n,mobile     \n,create_time\n,update_time\nfrom\nods.user_info where dt = '2022-01-24';\n\nselect * from dim.user_info where dt = '2022-01-23';\nselect * from dim.user_info where dt = '2022-01-24';\n\n~~~\n\n## 拉链表\n\n~~~sql\n#定义ods的维表\ndrop table if exists ods.user_info;\nCREATE EXTERNAL TABLE ods.user_info (\n  user_num bigint COMMENT '用户id',\n  mobile STRING COMMENT '手机号码',\n  create_time STRING COMMENT '创建时间',\n  update_time STRING COMMENT '更新时间'\n  )\nCOMMENT '用户资料表'\nPARTITIONED BY (dt string);\n\n#定义拉链表，可以获取数据的快照状态\ndrop table if exists dim.zipper_user_info;\nCREATE EXTERNAL TABLE dim.zipper_user_info (\n  user_num bigint COMMENT '用户id',\n  mobile STRING COMMENT '手机号码',\n  create_time STRING COMMENT '创建时间',\n  update_time STRING COMMENT '更新时间',\n  start_time String COMMENT '生效开始时间',\n  end_time String COMMENT '结束有效时间'\n  )\nCOMMENT '用户资料表'\nPARTITIONED BY (dt string);\n\n#拉链的初始化,这里取  01-23号的ods全量数据\ninsert into dim.zipper_user_info partition(dt = '2022-01-23')\nselect\nuser_num   \n,mobile     \n,create_time\n,update_time\n,to_date(update_time) as start_time\n,'9999-12-31' as end_time\nfrom\nods.user_info where dt = '2022-01-23';\n\n#1月24号，进行拉链操作\ninsert into dim.zipper_user_info partition(dt = '2022-01-24')\nselect \nta.user_num   \n,ta.mobile     \n,ta.create_time\n,ta.update_time\n,to_date(ta.start_time) as start_time\n,case when ta.end_time = '9999-12-31' and tb.user_num is null then ta.end_time else ta.dt end as end_time\nfrom\ndim.zipper_user_info ta left join ods.user_info tb\non ta.user_num = tb.user_num\nand ta.dt = '2022-01-23' and tb.dt = '2022-01-24'\nunion all\nselect\ntc.user_num   \n,tc.mobile     \n,tc.create_time\n,tc.update_time\n,to_date(tc.update_time) as start_time\n,'9999-12-31' as end_time\nfrom\nods.user_info tc\nwhere tc.dt = '2022-01-24'\n; \n\n#快照查看\nselect\n*\nfrom\ndim.zipper_user_info \nwhere dt = '2022-01-24'\nand start_time <= '2022-01-24'\nand end_time >= '2022-01-24'\n\n\n~~~\n\n# 补充hive语句的执行顺序\n\n~~~sql\n(1)FROM <left_table> \n<join_type> JOIN <right_table> \nON <on_predicate>\n \n(2)WHERE <where_predicate>\n \n(3)GROUP BY <group_by_specification>\n \n(4)HAVING <having_predicate>\n \n(5)SELECT DISTINCT TOP(<top_specification>) <select_list>\n \n(6)ORDER BY <order_by_list>\n~~~\n\n\n\n","source":"_posts/拉链表.md","raw":"---\ntitle: 输入迁移方案\ndate: 2022-01-26 09:25:00\nauthor: nove\ncategories: 大数据\ntags:\n  - 数据仓库\n  - 数仓技术栈 \n---\n\n# 增量和全量数据的合并\n\n* 传统方式：update+insert\n* 流行的大数据平台都不支持update，则——全外连接+insert overwrite的方式\n* 可以查询某一个时间的快照——拉链表\n\n## 场景\n\n* 用户维表，每天会新增和变化\n\n  ~~~sql\n  #mysql建表\n  create table user_info(\n  id int(10),\n  phone varchar(20),\n  create_time datetime,\n  update_time datetime\n  )\n  \n  #2022-01-23数据\n  1,11111,2022-01-23 14:51:59,2022-01-23 14:51:59\n  2,22222,2022-01-23 12:12:35,2022-01-23 12:12:35\n  3,33333,2022-01-23 12:02:54,2022-01-23 12:02:54\n  4,44444,2022-01-23 09:31:44,2022-01-23 09:31:44\n  5,55555,2022-01-22 21:57:55,2022-01-22 21:57:55\n  \n  ##2022-01-24数据,多了一条，改了两条\n  1,11111,2022-01-23 14:51:59,2022-01-23 14:51:59\n  2,22222,2022-01-23 12:12:35,2022-01-23 12:12:35\n  3,33333,2022-01-23 12:02:54,2022-01-23 12:02:54\n  4,44441,2022-01-23 09:31:44,2022-01-24 09:31:44\n  5,55551,2022-01-22 21:57:55,2022-01-24 21:57:55\n  6,66666,2022-01-24 21:57:55,2022-01-24 21:57:55\n  ~~~\n\n## 全量抽取\n\n~~~sql\n#定义ods的维表\ndrop table if exists ods.user_info;\nCREATE EXTERNAL TABLE ods.user_info (\n  user_num bigint COMMENT '用户id',\n  mobile STRING COMMENT '手机号码',\n  create_time STRING COMMENT '创建时间',\n  update_time STRING COMMENT '更新时间'\n  )\nCOMMENT '用户资料表'\nPARTITIONED BY (dt string);\n\n#定义dim层的维表，做模型的时候使用，要求为当天最新的数据——ods层的表可通用\nCREATE EXTERNAL TABLE dim.user_info (\n  user_num bigint COMMENT '用户id',\n  mobile STRING COMMENT '手机号码',\n  create_time STRING COMMENT '创建时间',\n  update_time STRING COMMENT '更新时间'\n  )\nCOMMENT '用户资料表'\nPARTITIONED BY (dt string);\n\n\n\n#2022-01-23数据抽取\ninsert into ods.user_info partition(dt = '2022-01-23') values\n(1,11111,'2022-01-23 14:51:59','2022-01-23 14:51:59'),\n(2,22222,'2022-01-23 12:12:35','2022-01-23 12:12:35'),\n(3,33333,'2022-01-23 12:02:54','2022-01-23 12:02:54'),\n(4,44444,'2022-01-23 09:31:44','2022-01-23 09:31:44'),\n(5,55555,'2022-01-22 21:57:55','2022-01-22 21:57:55');\n#2022-01-23数据全量写入\ninsert into dim.user_info partition(dt = '2022-01-23') select user_num,mobile,create_time,update_time from ods.user_info;\n\n\n\n#2022-01-24数据抽取\ninsert into ods.user_info partition(dt = '2022-01-24') values\n(1,11111,'2022-01-23 14:51:59','2022-01-23 14:51:59'),\n(2,22222,'2022-01-23 12:12:35','2022-01-23 12:12:35'),\n(3,33333,'2022-01-23 12:02:54','2022-01-23 12:02:54'),\n(4,44441,'2022-01-23 09:31:44','2022-01-24 09:31:44'),\n(5,55551,'2022-01-22 21:57:55','2022-01-24 21:57:55'),\n(6,66666,'2022-01-24 21:57:55','2022-01-24 21:57:55');\n#2022-01-24数据全量写入\ninsert into dim.user_info partition(dt = '2022-01-24') select user_num,mobile,create_time,update_time from ods.user_info;\n~~~\n\n## 增量抽取\n\n~~~sql\n#定义ods的维表\ndrop table if exists ods.user_info;\nCREATE EXTERNAL TABLE ods.user_info (\n  user_num bigint COMMENT '用户id',\n  mobile STRING COMMENT '手机号码',\n  create_time STRING COMMENT '创建时间',\n  update_time STRING COMMENT '更新时间'\n  )\nCOMMENT '用户资料表'\nPARTITIONED BY (dt string);\n\n#定义dim层的维表，做模型的时候使用，要求为当天最新的数据\nCREATE EXTERNAL TABLE dim.user_info (\n  user_num bigint COMMENT '用户id',\n  mobile STRING COMMENT '手机号码',\n  create_time STRING COMMENT '创建时间',\n  update_time STRING COMMENT '更新时间'\n  )\nCOMMENT '用户资料表'\nPARTITIONED BY (dt string);\n\n#初始化2022-01-23数据抽取\ninsert into ods.user_info partition(dt = '2022-01-23') values\n(1,11111,'2022-01-23 14:51:59','2022-01-23 14:51:59'),\n(2,22222,'2022-01-23 12:12:35','2022-01-23 12:12:35'),\n(3,33333,'2022-01-23 12:02:54','2022-01-23 12:02:54'),\n(4,44444,'2022-01-23 09:31:44','2022-01-23 09:31:44'),\n(5,55555,'2022-01-22 21:57:55','2022-01-22 21:57:55');\n#2022-01-23数据全量写入\ninsert into dim.user_info partition(dt = '2022-01-23') select user_num,mobile,create_time,update_time from ods.user_info;\n\n\n#增量抽取，抽取24号新增的和修改的\ninsert into ods.user_info partition(dt = '2022-01-24') values\n(4,44441,'2022-01-23 09:31:44','2022-01-24 09:31:44'),\n(5,55551,'2022-01-22 21:57:55','2022-01-24 21:57:55'),\n(6,66666,'2022-01-24 21:57:55','2022-01-24 21:57:55');\n\n#2022-01-24数据增量写入维度表\ninsert into dim.user_info partition(dt = '2022-01-24') \nselect\nta.user_num   \n,ta.mobile     \n,ta.create_time\n,ta.update_time\nfrom\ndim.user_info ta left join ods.user_info tb\non ta.user_num = tb.user_num\nand tb.dt = '2022-01-24' \nwhere tb.user_num is null\nunion all\nselect\nuser_num   \n,mobile     \n,create_time\n,update_time\nfrom\nods.user_info where dt = '2022-01-24';\n\nselect * from dim.user_info where dt = '2022-01-23';\nselect * from dim.user_info where dt = '2022-01-24';\n\n~~~\n\n## 拉链表\n\n~~~sql\n#定义ods的维表\ndrop table if exists ods.user_info;\nCREATE EXTERNAL TABLE ods.user_info (\n  user_num bigint COMMENT '用户id',\n  mobile STRING COMMENT '手机号码',\n  create_time STRING COMMENT '创建时间',\n  update_time STRING COMMENT '更新时间'\n  )\nCOMMENT '用户资料表'\nPARTITIONED BY (dt string);\n\n#定义拉链表，可以获取数据的快照状态\ndrop table if exists dim.zipper_user_info;\nCREATE EXTERNAL TABLE dim.zipper_user_info (\n  user_num bigint COMMENT '用户id',\n  mobile STRING COMMENT '手机号码',\n  create_time STRING COMMENT '创建时间',\n  update_time STRING COMMENT '更新时间',\n  start_time String COMMENT '生效开始时间',\n  end_time String COMMENT '结束有效时间'\n  )\nCOMMENT '用户资料表'\nPARTITIONED BY (dt string);\n\n#拉链的初始化,这里取  01-23号的ods全量数据\ninsert into dim.zipper_user_info partition(dt = '2022-01-23')\nselect\nuser_num   \n,mobile     \n,create_time\n,update_time\n,to_date(update_time) as start_time\n,'9999-12-31' as end_time\nfrom\nods.user_info where dt = '2022-01-23';\n\n#1月24号，进行拉链操作\ninsert into dim.zipper_user_info partition(dt = '2022-01-24')\nselect \nta.user_num   \n,ta.mobile     \n,ta.create_time\n,ta.update_time\n,to_date(ta.start_time) as start_time\n,case when ta.end_time = '9999-12-31' and tb.user_num is null then ta.end_time else ta.dt end as end_time\nfrom\ndim.zipper_user_info ta left join ods.user_info tb\non ta.user_num = tb.user_num\nand ta.dt = '2022-01-23' and tb.dt = '2022-01-24'\nunion all\nselect\ntc.user_num   \n,tc.mobile     \n,tc.create_time\n,tc.update_time\n,to_date(tc.update_time) as start_time\n,'9999-12-31' as end_time\nfrom\nods.user_info tc\nwhere tc.dt = '2022-01-24'\n; \n\n#快照查看\nselect\n*\nfrom\ndim.zipper_user_info \nwhere dt = '2022-01-24'\nand start_time <= '2022-01-24'\nand end_time >= '2022-01-24'\n\n\n~~~\n\n# 补充hive语句的执行顺序\n\n~~~sql\n(1)FROM <left_table> \n<join_type> JOIN <right_table> \nON <on_predicate>\n \n(2)WHERE <where_predicate>\n \n(3)GROUP BY <group_by_specification>\n \n(4)HAVING <having_predicate>\n \n(5)SELECT DISTINCT TOP(<top_specification>) <select_list>\n \n(6)ORDER BY <order_by_list>\n~~~\n\n\n\n","slug":"拉链表","published":1,"updated":"2022-01-26T07:33:31.431Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyv8edwm000638qh1u1a1e22","content":"<h1 id=\"增量和全量数据的合并\"><a href=\"#增量和全量数据的合并\" class=\"headerlink\" title=\"增量和全量数据的合并\"></a>增量和全量数据的合并</h1><ul>\n<li>传统方式：update+insert</li>\n<li>流行的大数据平台都不支持update，则——全外连接+insert overwrite的方式</li>\n<li>可以查询某一个时间的快照——拉链表</li>\n</ul>\n<h2 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h2><ul>\n<li><p>用户维表，每天会新增和变化</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#mysql建表</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> user_info<span class=\"token punctuation\">(</span>\nid <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\nphone <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\ncreate_time <span class=\"token keyword\">datetime</span><span class=\"token punctuation\">,</span>\nupdate_time <span class=\"token keyword\">datetime</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#2022-01-23数据</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">11111</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">14</span>:<span class=\"token number\">51</span>:<span class=\"token number\">59</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">14</span>:<span class=\"token number\">51</span>:<span class=\"token number\">59</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">22222</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">12</span>:<span class=\"token number\">12</span>:<span class=\"token number\">35</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">12</span>:<span class=\"token number\">12</span>:<span class=\"token number\">35</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">33333</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">12</span>:<span class=\"token number\">02</span>:<span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">12</span>:<span class=\"token number\">02</span>:<span class=\"token number\">54</span>\n<span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">44444</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">09</span>:<span class=\"token number\">31</span>:<span class=\"token number\">44</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">09</span>:<span class=\"token number\">31</span>:<span class=\"token number\">44</span>\n<span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">55555</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">22</span> <span class=\"token number\">21</span>:<span class=\"token number\">57</span>:<span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">22</span> <span class=\"token number\">21</span>:<span class=\"token number\">57</span>:<span class=\"token number\">55</span>\n\n<span class=\"token comment\">##2022-01-24数据,多了一条，改了两条</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">11111</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">14</span>:<span class=\"token number\">51</span>:<span class=\"token number\">59</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">14</span>:<span class=\"token number\">51</span>:<span class=\"token number\">59</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">22222</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">12</span>:<span class=\"token number\">12</span>:<span class=\"token number\">35</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">12</span>:<span class=\"token number\">12</span>:<span class=\"token number\">35</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">33333</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">12</span>:<span class=\"token number\">02</span>:<span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">12</span>:<span class=\"token number\">02</span>:<span class=\"token number\">54</span>\n<span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">44441</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">09</span>:<span class=\"token number\">31</span>:<span class=\"token number\">44</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">24</span> <span class=\"token number\">09</span>:<span class=\"token number\">31</span>:<span class=\"token number\">44</span>\n<span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">55551</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">22</span> <span class=\"token number\">21</span>:<span class=\"token number\">57</span>:<span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">24</span> <span class=\"token number\">21</span>:<span class=\"token number\">57</span>:<span class=\"token number\">55</span>\n<span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">66666</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">24</span> <span class=\"token number\">21</span>:<span class=\"token number\">57</span>:<span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">24</span> <span class=\"token number\">21</span>:<span class=\"token number\">57</span>:<span class=\"token number\">55</span></code></pre></li>\n</ul>\n<h2 id=\"全量抽取\"><a href=\"#全量抽取\" class=\"headerlink\" title=\"全量抽取\"></a>全量抽取</h2><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#定义ods的维表</span>\n<span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">exists</span> ods<span class=\"token punctuation\">.</span>user_info<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> EXTERNAL <span class=\"token keyword\">TABLE</span> ods<span class=\"token punctuation\">.</span>user_info <span class=\"token punctuation\">(</span>\n  user_num <span class=\"token keyword\">bigint</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户id'</span><span class=\"token punctuation\">,</span>\n  mobile STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'手机号码'</span><span class=\"token punctuation\">,</span>\n  create_time STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span>\n  update_time STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'更新时间'</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户资料表'</span>\nPARTITIONED <span class=\"token keyword\">BY</span> <span class=\"token punctuation\">(</span>dt string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#定义dim层的维表，做模型的时候使用，要求为当天最新的数据——ods层的表可通用</span>\n<span class=\"token keyword\">CREATE</span> EXTERNAL <span class=\"token keyword\">TABLE</span> dim<span class=\"token punctuation\">.</span>user_info <span class=\"token punctuation\">(</span>\n  user_num <span class=\"token keyword\">bigint</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户id'</span><span class=\"token punctuation\">,</span>\n  mobile STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'手机号码'</span><span class=\"token punctuation\">,</span>\n  create_time STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span>\n  update_time STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'更新时间'</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户资料表'</span>\nPARTITIONED <span class=\"token keyword\">BY</span> <span class=\"token punctuation\">(</span>dt string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token comment\">#2022-01-23数据抽取</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> ods<span class=\"token punctuation\">.</span>user_info <span class=\"token keyword\">partition</span><span class=\"token punctuation\">(</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-23'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">11111</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 14:51:59'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 14:51:59'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">22222</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 12:12:35'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 12:12:35'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">33333</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 12:02:54'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 12:02:54'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">44444</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 09:31:44'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 09:31:44'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">55555</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-22 21:57:55'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-22 21:57:55'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#2022-01-23数据全量写入</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> dim<span class=\"token punctuation\">.</span>user_info <span class=\"token keyword\">partition</span><span class=\"token punctuation\">(</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-23'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">select</span> user_num<span class=\"token punctuation\">,</span>mobile<span class=\"token punctuation\">,</span>create_time<span class=\"token punctuation\">,</span>update_time <span class=\"token keyword\">from</span> ods<span class=\"token punctuation\">.</span>user_info<span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token comment\">#2022-01-24数据抽取</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> ods<span class=\"token punctuation\">.</span>user_info <span class=\"token keyword\">partition</span><span class=\"token punctuation\">(</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-24'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">11111</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 14:51:59'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 14:51:59'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">22222</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 12:12:35'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 12:12:35'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">33333</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 12:02:54'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 12:02:54'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">44441</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 09:31:44'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-24 09:31:44'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">55551</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-22 21:57:55'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-24 21:57:55'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">66666</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-24 21:57:55'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-24 21:57:55'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#2022-01-24数据全量写入</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> dim<span class=\"token punctuation\">.</span>user_info <span class=\"token keyword\">partition</span><span class=\"token punctuation\">(</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-24'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">select</span> user_num<span class=\"token punctuation\">,</span>mobile<span class=\"token punctuation\">,</span>create_time<span class=\"token punctuation\">,</span>update_time <span class=\"token keyword\">from</span> ods<span class=\"token punctuation\">.</span>user_info<span class=\"token punctuation\">;</span></code></pre>\n\n<h2 id=\"增量抽取\"><a href=\"#增量抽取\" class=\"headerlink\" title=\"增量抽取\"></a>增量抽取</h2><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#定义ods的维表</span>\n<span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">exists</span> ods<span class=\"token punctuation\">.</span>user_info<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> EXTERNAL <span class=\"token keyword\">TABLE</span> ods<span class=\"token punctuation\">.</span>user_info <span class=\"token punctuation\">(</span>\n  user_num <span class=\"token keyword\">bigint</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户id'</span><span class=\"token punctuation\">,</span>\n  mobile STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'手机号码'</span><span class=\"token punctuation\">,</span>\n  create_time STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span>\n  update_time STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'更新时间'</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户资料表'</span>\nPARTITIONED <span class=\"token keyword\">BY</span> <span class=\"token punctuation\">(</span>dt string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#定义dim层的维表，做模型的时候使用，要求为当天最新的数据</span>\n<span class=\"token keyword\">CREATE</span> EXTERNAL <span class=\"token keyword\">TABLE</span> dim<span class=\"token punctuation\">.</span>user_info <span class=\"token punctuation\">(</span>\n  user_num <span class=\"token keyword\">bigint</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户id'</span><span class=\"token punctuation\">,</span>\n  mobile STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'手机号码'</span><span class=\"token punctuation\">,</span>\n  create_time STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span>\n  update_time STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'更新时间'</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户资料表'</span>\nPARTITIONED <span class=\"token keyword\">BY</span> <span class=\"token punctuation\">(</span>dt string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#初始化2022-01-23数据抽取</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> ods<span class=\"token punctuation\">.</span>user_info <span class=\"token keyword\">partition</span><span class=\"token punctuation\">(</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-23'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">11111</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 14:51:59'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 14:51:59'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">22222</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 12:12:35'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 12:12:35'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">33333</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 12:02:54'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 12:02:54'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">44444</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 09:31:44'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 09:31:44'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">55555</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-22 21:57:55'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-22 21:57:55'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#2022-01-23数据全量写入</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> dim<span class=\"token punctuation\">.</span>user_info <span class=\"token keyword\">partition</span><span class=\"token punctuation\">(</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-23'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">select</span> user_num<span class=\"token punctuation\">,</span>mobile<span class=\"token punctuation\">,</span>create_time<span class=\"token punctuation\">,</span>update_time <span class=\"token keyword\">from</span> ods<span class=\"token punctuation\">.</span>user_info<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">#增量抽取，抽取24号新增的和修改的</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> ods<span class=\"token punctuation\">.</span>user_info <span class=\"token keyword\">partition</span><span class=\"token punctuation\">(</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-24'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">44441</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 09:31:44'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-24 09:31:44'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">55551</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-22 21:57:55'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-24 21:57:55'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">66666</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-24 21:57:55'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-24 21:57:55'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#2022-01-24数据增量写入维度表</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> dim<span class=\"token punctuation\">.</span>user_info <span class=\"token keyword\">partition</span><span class=\"token punctuation\">(</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-24'</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">select</span>\nta<span class=\"token punctuation\">.</span>user_num   \n<span class=\"token punctuation\">,</span>ta<span class=\"token punctuation\">.</span>mobile     \n<span class=\"token punctuation\">,</span>ta<span class=\"token punctuation\">.</span>create_time\n<span class=\"token punctuation\">,</span>ta<span class=\"token punctuation\">.</span>update_time\n<span class=\"token keyword\">from</span>\ndim<span class=\"token punctuation\">.</span>user_info ta <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> ods<span class=\"token punctuation\">.</span>user_info tb\n<span class=\"token keyword\">on</span> ta<span class=\"token punctuation\">.</span>user_num <span class=\"token operator\">=</span> tb<span class=\"token punctuation\">.</span>user_num\n<span class=\"token operator\">and</span> tb<span class=\"token punctuation\">.</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-24'</span> \n<span class=\"token keyword\">where</span> tb<span class=\"token punctuation\">.</span>user_num <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span>\n<span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span>\n<span class=\"token keyword\">select</span>\nuser_num   \n<span class=\"token punctuation\">,</span>mobile     \n<span class=\"token punctuation\">,</span>create_time\n<span class=\"token punctuation\">,</span>update_time\n<span class=\"token keyword\">from</span>\nods<span class=\"token punctuation\">.</span>user_info <span class=\"token keyword\">where</span> dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-24'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> dim<span class=\"token punctuation\">.</span>user_info <span class=\"token keyword\">where</span> dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-23'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> dim<span class=\"token punctuation\">.</span>user_info <span class=\"token keyword\">where</span> dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-24'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n\n<h2 id=\"拉链表\"><a href=\"#拉链表\" class=\"headerlink\" title=\"拉链表\"></a>拉链表</h2><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#定义ods的维表</span>\n<span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">exists</span> ods<span class=\"token punctuation\">.</span>user_info<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> EXTERNAL <span class=\"token keyword\">TABLE</span> ods<span class=\"token punctuation\">.</span>user_info <span class=\"token punctuation\">(</span>\n  user_num <span class=\"token keyword\">bigint</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户id'</span><span class=\"token punctuation\">,</span>\n  mobile STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'手机号码'</span><span class=\"token punctuation\">,</span>\n  create_time STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span>\n  update_time STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'更新时间'</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户资料表'</span>\nPARTITIONED <span class=\"token keyword\">BY</span> <span class=\"token punctuation\">(</span>dt string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#定义拉链表，可以获取数据的快照状态</span>\n<span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">exists</span> dim<span class=\"token punctuation\">.</span>zipper_user_info<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> EXTERNAL <span class=\"token keyword\">TABLE</span> dim<span class=\"token punctuation\">.</span>zipper_user_info <span class=\"token punctuation\">(</span>\n  user_num <span class=\"token keyword\">bigint</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户id'</span><span class=\"token punctuation\">,</span>\n  mobile STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'手机号码'</span><span class=\"token punctuation\">,</span>\n  create_time STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span>\n  update_time STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'更新时间'</span><span class=\"token punctuation\">,</span>\n  start_time String <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'生效开始时间'</span><span class=\"token punctuation\">,</span>\n  end_time String <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'结束有效时间'</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户资料表'</span>\nPARTITIONED <span class=\"token keyword\">BY</span> <span class=\"token punctuation\">(</span>dt string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#拉链的初始化,这里取  01-23号的ods全量数据</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> dim<span class=\"token punctuation\">.</span>zipper_user_info <span class=\"token keyword\">partition</span><span class=\"token punctuation\">(</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-23'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">select</span>\nuser_num   \n<span class=\"token punctuation\">,</span>mobile     \n<span class=\"token punctuation\">,</span>create_time\n<span class=\"token punctuation\">,</span>update_time\n<span class=\"token punctuation\">,</span>to_date<span class=\"token punctuation\">(</span>update_time<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> start_time\n<span class=\"token punctuation\">,</span><span class=\"token string\">'9999-12-31'</span> <span class=\"token keyword\">as</span> end_time\n<span class=\"token keyword\">from</span>\nods<span class=\"token punctuation\">.</span>user_info <span class=\"token keyword\">where</span> dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-23'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#1月24号，进行拉链操作</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> dim<span class=\"token punctuation\">.</span>zipper_user_info <span class=\"token keyword\">partition</span><span class=\"token punctuation\">(</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-24'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">select</span> \nta<span class=\"token punctuation\">.</span>user_num   \n<span class=\"token punctuation\">,</span>ta<span class=\"token punctuation\">.</span>mobile     \n<span class=\"token punctuation\">,</span>ta<span class=\"token punctuation\">.</span>create_time\n<span class=\"token punctuation\">,</span>ta<span class=\"token punctuation\">.</span>update_time\n<span class=\"token punctuation\">,</span>to_date<span class=\"token punctuation\">(</span>ta<span class=\"token punctuation\">.</span>start_time<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> start_time\n<span class=\"token punctuation\">,</span><span class=\"token keyword\">case</span> <span class=\"token keyword\">when</span> ta<span class=\"token punctuation\">.</span>end_time <span class=\"token operator\">=</span> <span class=\"token string\">'9999-12-31'</span> <span class=\"token operator\">and</span> tb<span class=\"token punctuation\">.</span>user_num <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">then</span> ta<span class=\"token punctuation\">.</span>end_time <span class=\"token keyword\">else</span> ta<span class=\"token punctuation\">.</span>dt <span class=\"token keyword\">end</span> <span class=\"token keyword\">as</span> end_time\n<span class=\"token keyword\">from</span>\ndim<span class=\"token punctuation\">.</span>zipper_user_info ta <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> ods<span class=\"token punctuation\">.</span>user_info tb\n<span class=\"token keyword\">on</span> ta<span class=\"token punctuation\">.</span>user_num <span class=\"token operator\">=</span> tb<span class=\"token punctuation\">.</span>user_num\n<span class=\"token operator\">and</span> ta<span class=\"token punctuation\">.</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-23'</span> <span class=\"token operator\">and</span> tb<span class=\"token punctuation\">.</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-24'</span>\n<span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span>\n<span class=\"token keyword\">select</span>\ntc<span class=\"token punctuation\">.</span>user_num   \n<span class=\"token punctuation\">,</span>tc<span class=\"token punctuation\">.</span>mobile     \n<span class=\"token punctuation\">,</span>tc<span class=\"token punctuation\">.</span>create_time\n<span class=\"token punctuation\">,</span>tc<span class=\"token punctuation\">.</span>update_time\n<span class=\"token punctuation\">,</span>to_date<span class=\"token punctuation\">(</span>tc<span class=\"token punctuation\">.</span>update_time<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> start_time\n<span class=\"token punctuation\">,</span><span class=\"token string\">'9999-12-31'</span> <span class=\"token keyword\">as</span> end_time\n<span class=\"token keyword\">from</span>\nods<span class=\"token punctuation\">.</span>user_info tc\n<span class=\"token keyword\">where</span> tc<span class=\"token punctuation\">.</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-24'</span>\n<span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">#快照查看</span>\n<span class=\"token keyword\">select</span>\n<span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span>\ndim<span class=\"token punctuation\">.</span>zipper_user_info \n<span class=\"token keyword\">where</span> dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-24'</span>\n<span class=\"token operator\">and</span> start_time <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'2022-01-24'</span>\n<span class=\"token operator\">and</span> end_time <span class=\"token operator\">>=</span> <span class=\"token string\">'2022-01-24'</span>\n\n</code></pre>\n\n<h1 id=\"补充hive语句的执行顺序\"><a href=\"#补充hive语句的执行顺序\" class=\"headerlink\" title=\"补充hive语句的执行顺序\"></a>补充hive语句的执行顺序</h1><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">FROM</span> <span class=\"token operator\">&lt;</span>left_table<span class=\"token operator\">></span> \n<span class=\"token operator\">&lt;</span>join_type<span class=\"token operator\">></span> <span class=\"token keyword\">JOIN</span> <span class=\"token operator\">&lt;</span>right_table<span class=\"token operator\">></span> \n<span class=\"token keyword\">ON</span> <span class=\"token operator\">&lt;</span>on_predicate<span class=\"token operator\">></span>\n \n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">WHERE</span> <span class=\"token operator\">&lt;</span>where_predicate<span class=\"token operator\">></span>\n \n<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> <span class=\"token operator\">&lt;</span>group_by_specification<span class=\"token operator\">></span>\n \n<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">HAVING</span> <span class=\"token operator\">&lt;</span>having_predicate<span class=\"token operator\">></span>\n \n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> <span class=\"token keyword\">TOP</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>top_specification<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span>select_list<span class=\"token operator\">></span>\n \n<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> <span class=\"token operator\">&lt;</span>order_by_list<span class=\"token operator\">></span></code></pre>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"增量和全量数据的合并\"><a href=\"#增量和全量数据的合并\" class=\"headerlink\" title=\"增量和全量数据的合并\"></a>增量和全量数据的合并</h1><ul>\n<li>传统方式：update+insert</li>\n<li>流行的大数据平台都不支持update，则——全外连接+insert overwrite的方式</li>\n<li>可以查询某一个时间的快照——拉链表</li>\n</ul>\n<h2 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h2><ul>\n<li><p>用户维表，每天会新增和变化</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#mysql建表</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> user_info<span class=\"token punctuation\">(</span>\nid <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\nphone <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\ncreate_time <span class=\"token keyword\">datetime</span><span class=\"token punctuation\">,</span>\nupdate_time <span class=\"token keyword\">datetime</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#2022-01-23数据</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">11111</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">14</span>:<span class=\"token number\">51</span>:<span class=\"token number\">59</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">14</span>:<span class=\"token number\">51</span>:<span class=\"token number\">59</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">22222</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">12</span>:<span class=\"token number\">12</span>:<span class=\"token number\">35</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">12</span>:<span class=\"token number\">12</span>:<span class=\"token number\">35</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">33333</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">12</span>:<span class=\"token number\">02</span>:<span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">12</span>:<span class=\"token number\">02</span>:<span class=\"token number\">54</span>\n<span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">44444</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">09</span>:<span class=\"token number\">31</span>:<span class=\"token number\">44</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">09</span>:<span class=\"token number\">31</span>:<span class=\"token number\">44</span>\n<span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">55555</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">22</span> <span class=\"token number\">21</span>:<span class=\"token number\">57</span>:<span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">22</span> <span class=\"token number\">21</span>:<span class=\"token number\">57</span>:<span class=\"token number\">55</span>\n\n<span class=\"token comment\">##2022-01-24数据,多了一条，改了两条</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">11111</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">14</span>:<span class=\"token number\">51</span>:<span class=\"token number\">59</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">14</span>:<span class=\"token number\">51</span>:<span class=\"token number\">59</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">22222</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">12</span>:<span class=\"token number\">12</span>:<span class=\"token number\">35</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">12</span>:<span class=\"token number\">12</span>:<span class=\"token number\">35</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">33333</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">12</span>:<span class=\"token number\">02</span>:<span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">12</span>:<span class=\"token number\">02</span>:<span class=\"token number\">54</span>\n<span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">44441</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">09</span>:<span class=\"token number\">31</span>:<span class=\"token number\">44</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">24</span> <span class=\"token number\">09</span>:<span class=\"token number\">31</span>:<span class=\"token number\">44</span>\n<span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">55551</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">22</span> <span class=\"token number\">21</span>:<span class=\"token number\">57</span>:<span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">24</span> <span class=\"token number\">21</span>:<span class=\"token number\">57</span>:<span class=\"token number\">55</span>\n<span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">66666</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">24</span> <span class=\"token number\">21</span>:<span class=\"token number\">57</span>:<span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">24</span> <span class=\"token number\">21</span>:<span class=\"token number\">57</span>:<span class=\"token number\">55</span></code></pre></li>\n</ul>\n<h2 id=\"全量抽取\"><a href=\"#全量抽取\" class=\"headerlink\" title=\"全量抽取\"></a>全量抽取</h2><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#定义ods的维表</span>\n<span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">exists</span> ods<span class=\"token punctuation\">.</span>user_info<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> EXTERNAL <span class=\"token keyword\">TABLE</span> ods<span class=\"token punctuation\">.</span>user_info <span class=\"token punctuation\">(</span>\n  user_num <span class=\"token keyword\">bigint</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户id'</span><span class=\"token punctuation\">,</span>\n  mobile STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'手机号码'</span><span class=\"token punctuation\">,</span>\n  create_time STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span>\n  update_time STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'更新时间'</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户资料表'</span>\nPARTITIONED <span class=\"token keyword\">BY</span> <span class=\"token punctuation\">(</span>dt string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#定义dim层的维表，做模型的时候使用，要求为当天最新的数据——ods层的表可通用</span>\n<span class=\"token keyword\">CREATE</span> EXTERNAL <span class=\"token keyword\">TABLE</span> dim<span class=\"token punctuation\">.</span>user_info <span class=\"token punctuation\">(</span>\n  user_num <span class=\"token keyword\">bigint</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户id'</span><span class=\"token punctuation\">,</span>\n  mobile STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'手机号码'</span><span class=\"token punctuation\">,</span>\n  create_time STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span>\n  update_time STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'更新时间'</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户资料表'</span>\nPARTITIONED <span class=\"token keyword\">BY</span> <span class=\"token punctuation\">(</span>dt string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token comment\">#2022-01-23数据抽取</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> ods<span class=\"token punctuation\">.</span>user_info <span class=\"token keyword\">partition</span><span class=\"token punctuation\">(</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-23'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">11111</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 14:51:59'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 14:51:59'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">22222</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 12:12:35'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 12:12:35'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">33333</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 12:02:54'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 12:02:54'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">44444</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 09:31:44'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 09:31:44'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">55555</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-22 21:57:55'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-22 21:57:55'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#2022-01-23数据全量写入</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> dim<span class=\"token punctuation\">.</span>user_info <span class=\"token keyword\">partition</span><span class=\"token punctuation\">(</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-23'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">select</span> user_num<span class=\"token punctuation\">,</span>mobile<span class=\"token punctuation\">,</span>create_time<span class=\"token punctuation\">,</span>update_time <span class=\"token keyword\">from</span> ods<span class=\"token punctuation\">.</span>user_info<span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token comment\">#2022-01-24数据抽取</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> ods<span class=\"token punctuation\">.</span>user_info <span class=\"token keyword\">partition</span><span class=\"token punctuation\">(</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-24'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">11111</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 14:51:59'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 14:51:59'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">22222</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 12:12:35'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 12:12:35'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">33333</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 12:02:54'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 12:02:54'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">44441</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 09:31:44'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-24 09:31:44'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">55551</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-22 21:57:55'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-24 21:57:55'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">66666</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-24 21:57:55'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-24 21:57:55'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#2022-01-24数据全量写入</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> dim<span class=\"token punctuation\">.</span>user_info <span class=\"token keyword\">partition</span><span class=\"token punctuation\">(</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-24'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">select</span> user_num<span class=\"token punctuation\">,</span>mobile<span class=\"token punctuation\">,</span>create_time<span class=\"token punctuation\">,</span>update_time <span class=\"token keyword\">from</span> ods<span class=\"token punctuation\">.</span>user_info<span class=\"token punctuation\">;</span></code></pre>\n\n<h2 id=\"增量抽取\"><a href=\"#增量抽取\" class=\"headerlink\" title=\"增量抽取\"></a>增量抽取</h2><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#定义ods的维表</span>\n<span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">exists</span> ods<span class=\"token punctuation\">.</span>user_info<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> EXTERNAL <span class=\"token keyword\">TABLE</span> ods<span class=\"token punctuation\">.</span>user_info <span class=\"token punctuation\">(</span>\n  user_num <span class=\"token keyword\">bigint</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户id'</span><span class=\"token punctuation\">,</span>\n  mobile STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'手机号码'</span><span class=\"token punctuation\">,</span>\n  create_time STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span>\n  update_time STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'更新时间'</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户资料表'</span>\nPARTITIONED <span class=\"token keyword\">BY</span> <span class=\"token punctuation\">(</span>dt string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#定义dim层的维表，做模型的时候使用，要求为当天最新的数据</span>\n<span class=\"token keyword\">CREATE</span> EXTERNAL <span class=\"token keyword\">TABLE</span> dim<span class=\"token punctuation\">.</span>user_info <span class=\"token punctuation\">(</span>\n  user_num <span class=\"token keyword\">bigint</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户id'</span><span class=\"token punctuation\">,</span>\n  mobile STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'手机号码'</span><span class=\"token punctuation\">,</span>\n  create_time STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span>\n  update_time STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'更新时间'</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户资料表'</span>\nPARTITIONED <span class=\"token keyword\">BY</span> <span class=\"token punctuation\">(</span>dt string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#初始化2022-01-23数据抽取</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> ods<span class=\"token punctuation\">.</span>user_info <span class=\"token keyword\">partition</span><span class=\"token punctuation\">(</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-23'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">11111</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 14:51:59'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 14:51:59'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">22222</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 12:12:35'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 12:12:35'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">33333</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 12:02:54'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 12:02:54'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">44444</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 09:31:44'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 09:31:44'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">55555</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-22 21:57:55'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-22 21:57:55'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#2022-01-23数据全量写入</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> dim<span class=\"token punctuation\">.</span>user_info <span class=\"token keyword\">partition</span><span class=\"token punctuation\">(</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-23'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">select</span> user_num<span class=\"token punctuation\">,</span>mobile<span class=\"token punctuation\">,</span>create_time<span class=\"token punctuation\">,</span>update_time <span class=\"token keyword\">from</span> ods<span class=\"token punctuation\">.</span>user_info<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">#增量抽取，抽取24号新增的和修改的</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> ods<span class=\"token punctuation\">.</span>user_info <span class=\"token keyword\">partition</span><span class=\"token punctuation\">(</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-24'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">44441</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-23 09:31:44'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-24 09:31:44'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">55551</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-22 21:57:55'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-24 21:57:55'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">66666</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-24 21:57:55'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2022-01-24 21:57:55'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#2022-01-24数据增量写入维度表</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> dim<span class=\"token punctuation\">.</span>user_info <span class=\"token keyword\">partition</span><span class=\"token punctuation\">(</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-24'</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">select</span>\nta<span class=\"token punctuation\">.</span>user_num   \n<span class=\"token punctuation\">,</span>ta<span class=\"token punctuation\">.</span>mobile     \n<span class=\"token punctuation\">,</span>ta<span class=\"token punctuation\">.</span>create_time\n<span class=\"token punctuation\">,</span>ta<span class=\"token punctuation\">.</span>update_time\n<span class=\"token keyword\">from</span>\ndim<span class=\"token punctuation\">.</span>user_info ta <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> ods<span class=\"token punctuation\">.</span>user_info tb\n<span class=\"token keyword\">on</span> ta<span class=\"token punctuation\">.</span>user_num <span class=\"token operator\">=</span> tb<span class=\"token punctuation\">.</span>user_num\n<span class=\"token operator\">and</span> tb<span class=\"token punctuation\">.</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-24'</span> \n<span class=\"token keyword\">where</span> tb<span class=\"token punctuation\">.</span>user_num <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span>\n<span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span>\n<span class=\"token keyword\">select</span>\nuser_num   \n<span class=\"token punctuation\">,</span>mobile     \n<span class=\"token punctuation\">,</span>create_time\n<span class=\"token punctuation\">,</span>update_time\n<span class=\"token keyword\">from</span>\nods<span class=\"token punctuation\">.</span>user_info <span class=\"token keyword\">where</span> dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-24'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> dim<span class=\"token punctuation\">.</span>user_info <span class=\"token keyword\">where</span> dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-23'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> dim<span class=\"token punctuation\">.</span>user_info <span class=\"token keyword\">where</span> dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-24'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n\n<h2 id=\"拉链表\"><a href=\"#拉链表\" class=\"headerlink\" title=\"拉链表\"></a>拉链表</h2><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#定义ods的维表</span>\n<span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">exists</span> ods<span class=\"token punctuation\">.</span>user_info<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> EXTERNAL <span class=\"token keyword\">TABLE</span> ods<span class=\"token punctuation\">.</span>user_info <span class=\"token punctuation\">(</span>\n  user_num <span class=\"token keyword\">bigint</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户id'</span><span class=\"token punctuation\">,</span>\n  mobile STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'手机号码'</span><span class=\"token punctuation\">,</span>\n  create_time STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span>\n  update_time STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'更新时间'</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户资料表'</span>\nPARTITIONED <span class=\"token keyword\">BY</span> <span class=\"token punctuation\">(</span>dt string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#定义拉链表，可以获取数据的快照状态</span>\n<span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">exists</span> dim<span class=\"token punctuation\">.</span>zipper_user_info<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> EXTERNAL <span class=\"token keyword\">TABLE</span> dim<span class=\"token punctuation\">.</span>zipper_user_info <span class=\"token punctuation\">(</span>\n  user_num <span class=\"token keyword\">bigint</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户id'</span><span class=\"token punctuation\">,</span>\n  mobile STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'手机号码'</span><span class=\"token punctuation\">,</span>\n  create_time STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span>\n  update_time STRING <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'更新时间'</span><span class=\"token punctuation\">,</span>\n  start_time String <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'生效开始时间'</span><span class=\"token punctuation\">,</span>\n  end_time String <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'结束有效时间'</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户资料表'</span>\nPARTITIONED <span class=\"token keyword\">BY</span> <span class=\"token punctuation\">(</span>dt string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#拉链的初始化,这里取  01-23号的ods全量数据</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> dim<span class=\"token punctuation\">.</span>zipper_user_info <span class=\"token keyword\">partition</span><span class=\"token punctuation\">(</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-23'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">select</span>\nuser_num   \n<span class=\"token punctuation\">,</span>mobile     \n<span class=\"token punctuation\">,</span>create_time\n<span class=\"token punctuation\">,</span>update_time\n<span class=\"token punctuation\">,</span>to_date<span class=\"token punctuation\">(</span>update_time<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> start_time\n<span class=\"token punctuation\">,</span><span class=\"token string\">'9999-12-31'</span> <span class=\"token keyword\">as</span> end_time\n<span class=\"token keyword\">from</span>\nods<span class=\"token punctuation\">.</span>user_info <span class=\"token keyword\">where</span> dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-23'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#1月24号，进行拉链操作</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> dim<span class=\"token punctuation\">.</span>zipper_user_info <span class=\"token keyword\">partition</span><span class=\"token punctuation\">(</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-24'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">select</span> \nta<span class=\"token punctuation\">.</span>user_num   \n<span class=\"token punctuation\">,</span>ta<span class=\"token punctuation\">.</span>mobile     \n<span class=\"token punctuation\">,</span>ta<span class=\"token punctuation\">.</span>create_time\n<span class=\"token punctuation\">,</span>ta<span class=\"token punctuation\">.</span>update_time\n<span class=\"token punctuation\">,</span>to_date<span class=\"token punctuation\">(</span>ta<span class=\"token punctuation\">.</span>start_time<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> start_time\n<span class=\"token punctuation\">,</span><span class=\"token keyword\">case</span> <span class=\"token keyword\">when</span> ta<span class=\"token punctuation\">.</span>end_time <span class=\"token operator\">=</span> <span class=\"token string\">'9999-12-31'</span> <span class=\"token operator\">and</span> tb<span class=\"token punctuation\">.</span>user_num <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">then</span> ta<span class=\"token punctuation\">.</span>end_time <span class=\"token keyword\">else</span> ta<span class=\"token punctuation\">.</span>dt <span class=\"token keyword\">end</span> <span class=\"token keyword\">as</span> end_time\n<span class=\"token keyword\">from</span>\ndim<span class=\"token punctuation\">.</span>zipper_user_info ta <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> ods<span class=\"token punctuation\">.</span>user_info tb\n<span class=\"token keyword\">on</span> ta<span class=\"token punctuation\">.</span>user_num <span class=\"token operator\">=</span> tb<span class=\"token punctuation\">.</span>user_num\n<span class=\"token operator\">and</span> ta<span class=\"token punctuation\">.</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-23'</span> <span class=\"token operator\">and</span> tb<span class=\"token punctuation\">.</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-24'</span>\n<span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span>\n<span class=\"token keyword\">select</span>\ntc<span class=\"token punctuation\">.</span>user_num   \n<span class=\"token punctuation\">,</span>tc<span class=\"token punctuation\">.</span>mobile     \n<span class=\"token punctuation\">,</span>tc<span class=\"token punctuation\">.</span>create_time\n<span class=\"token punctuation\">,</span>tc<span class=\"token punctuation\">.</span>update_time\n<span class=\"token punctuation\">,</span>to_date<span class=\"token punctuation\">(</span>tc<span class=\"token punctuation\">.</span>update_time<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> start_time\n<span class=\"token punctuation\">,</span><span class=\"token string\">'9999-12-31'</span> <span class=\"token keyword\">as</span> end_time\n<span class=\"token keyword\">from</span>\nods<span class=\"token punctuation\">.</span>user_info tc\n<span class=\"token keyword\">where</span> tc<span class=\"token punctuation\">.</span>dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-24'</span>\n<span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">#快照查看</span>\n<span class=\"token keyword\">select</span>\n<span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span>\ndim<span class=\"token punctuation\">.</span>zipper_user_info \n<span class=\"token keyword\">where</span> dt <span class=\"token operator\">=</span> <span class=\"token string\">'2022-01-24'</span>\n<span class=\"token operator\">and</span> start_time <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'2022-01-24'</span>\n<span class=\"token operator\">and</span> end_time <span class=\"token operator\">>=</span> <span class=\"token string\">'2022-01-24'</span>\n\n</code></pre>\n\n<h1 id=\"补充hive语句的执行顺序\"><a href=\"#补充hive语句的执行顺序\" class=\"headerlink\" title=\"补充hive语句的执行顺序\"></a>补充hive语句的执行顺序</h1><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">FROM</span> <span class=\"token operator\">&lt;</span>left_table<span class=\"token operator\">></span> \n<span class=\"token operator\">&lt;</span>join_type<span class=\"token operator\">></span> <span class=\"token keyword\">JOIN</span> <span class=\"token operator\">&lt;</span>right_table<span class=\"token operator\">></span> \n<span class=\"token keyword\">ON</span> <span class=\"token operator\">&lt;</span>on_predicate<span class=\"token operator\">></span>\n \n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">WHERE</span> <span class=\"token operator\">&lt;</span>where_predicate<span class=\"token operator\">></span>\n \n<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> <span class=\"token operator\">&lt;</span>group_by_specification<span class=\"token operator\">></span>\n \n<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">HAVING</span> <span class=\"token operator\">&lt;</span>having_predicate<span class=\"token operator\">></span>\n \n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> <span class=\"token keyword\">TOP</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>top_specification<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span>select_list<span class=\"token operator\">></span>\n \n<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> <span class=\"token operator\">&lt;</span>order_by_list<span class=\"token operator\">></span></code></pre>\n\n\n\n"},{"title":"事实表的类型","date":"2022-01-20T08:58:24.000Z","_content":"# 事实表的类型\n\n## 事务型事实表\n\n### 概述\n\n事务事实表用来记录各业务过程，它保存的是各业务过程的原子操作事件，即最细粒度的操作事件。粒度是指事实表中一行数据所表达的业务细节程度。\n\n事务型事实表可用于分析与各业务过程相关的各项统计指标，由于其保存了最细粒度的记录，可以提供最大限度的灵活性，可以支持无法预期的各种细节层次的统计需求。\n\n### 设计流程\n\n设计事务事实表时一般可遵循以下四个步骤：\n\n**选择业务过程**→**声明粒度**→**确认维度**→**确认事实**\n\n**选择业务过程**\n\n在业务系统中，挑选我们感兴趣的业务过程，业务过程可以概括为一个个不可拆分的行为事件，例如电商交易中的下单，取消订单，付款，退单等，都是业务过程。通常情况下，一个业务过程对应一张事务型事实表。\n\n**声明粒度**\n\n业务过程确定后，需要为每个业务过程声明粒度。即精确定义每张事务型事实表的每行数据表示什么，应该尽可能选择最细粒度，以此来应各种细节程度的需求。\n\n典型的粒度声明如下：\n\n订单事实表中一行数据表示的是一个订单中的一个商品项。\n\n**确定维度**\n\n确定维度具体是指，确定与每张事务型事实表相关的维度有哪些。\n\n确定维度时应尽量多的选择与业务过程相关的环境信息。因为维度的丰富程度就决定了维度模型能够支持的指标丰富程度。\n\n**确定事实**\n\n此处的“事实”一词，指的是每个业务过程的度量值（通常是可累加的数字类型的值，例如：次数、个数、件数、金额等）。\n\n经过上述四个步骤，事务型事实表就基本设计完成了。第一步选择业务过程可以确定有哪些事务型事实表，第二步可以确定每张事务型事实表的每行数据是什么，第三步可以确定每张事务型事实表的维度外键，第四步可以确定每张事务型事实表的度量值字段。\n\n## 周期快照事实表\n\n### 概述\n\n周期快照事实表以具有规律性的、可预见的时间间隔来记录事实，主要用于分析一些存量型（例如商品库存，账户余额）或者状态型（空气温度，行驶速度）指标。\n\n对于商品库存、账户余额这些存量型指标，业务系统中通常就会计算并保存最新结果，所以定期同步一份全量数据到数据仓库，构建周期型快照事实表，就能轻松应对此类统计需求，而无需再对事务型事实表中大量的历史记录进行聚合了。\n\n对于空气温度、行驶速度这些状态型指标，由于它们的值往往是连续的，我们无法捕获其变动的原子事务操作，所以无法使用事务型事实表统计此类需求。而只能定期对其进行采样，构建周期型快照事实表。\n\n### 设计流程\n\n**确定粒度**\n\n周期型快照事实表的粒度可由采样周期和维度描述，故确定采样周期和维度后即可确定粒度。\n\n采样周期通常选择每日。\n\n维度可根据统计指标决定，例如指标为统计每个仓库中每种商品的库存，则可确定维度为仓库和商品。\n\n确定完采样周期和维度后，即可确定该表粒度为每日-仓库-商品。\n\n**确认事实**\n\n事实也可根据统计指标决定，例如指标为统计每个仓库中每种商品的库存，则事实为商品库存。\n\n### 适用场景\n\n适用于分析存量型、状态型指标\n\n### 事实类型\n\n此处的事实类型是指度量值的类型，而非事实表的类型。事实（度量值）共分为三类，分别是可加事实，半可加事实和不可加事实。\n\n**可加事实**\n\n可加事实是指可以按照与事实表相关的所有维度进行累加，例如事务型事实表中的事实。\n\n**半可加事实**\n\n半可加事实是指只能按照与事实表相关的一部分维度进行累加，例如周期型快照事实表中的事实。以上述各仓库中各商品的库存每天快照事实表为例，这张表中的库存事实可以按照仓库或者商品维度进行累加，但是不能按照时间维度进行累加，因为将每天的库存累加起来是没有任何意义的。\n\n**不可加事实**\n\n不可加事实是指完全不具备可加性，例如比率型事实。不可加事实通常需要转化为可加事实，例如比率可转化为分子和分母。\n\n## 累计快照事实表\n\n### 概述\n\n累计快照事实表是基于一个业务流程中的多个关键业务过程联合处理而构建的事实表，如交易流程中的下单、支付、发货、确认收货业务过程。\n\n累积型快照事实表主要用于分析业务过程（里程碑）之间的时间间隔等需求。例如前文提到的用户下单到支付的平均时间间隔，使用累积型快照事实表进行统计，就能避免两个事务事实表的关联操作，从而变得十分简单高效。\n\n### 设计流程\n\n累积型快照事实表的设计流程同事务型事实表类似，也可采用以下四个步骤，下面重点描述与事务型事实表的不同之处。\n\n**选择业务过程**→**声明粒度**→**确认维度**→**确认事实**\n\n**选择业务过程**\n\n选择一个业务流程中需要关联分析的多个关键业务过程，多个业务过程对应一张累积型快照事实表。\n\n**声明粒度**\n\n精确定义每行数据表示的是什么，尽量选择最小粒度。\n\n**确认维度**\n\n选择与各业务过程相关的维度，需要注意的是，每各业务过程均需要一个日期维度。\n\n**确认事实**\n\n选择各业务过程的度量值。\n\n### 适用场景\n\n适用于处理多事务关联\n\n","source":"_posts/事实表的类型.md","raw":"---\ntitle: 事实表的类型\ndate: 2022-01-20 16:58:24\ntags: 数仓\ncategories: 数仓\n---\n# 事实表的类型\n\n## 事务型事实表\n\n### 概述\n\n事务事实表用来记录各业务过程，它保存的是各业务过程的原子操作事件，即最细粒度的操作事件。粒度是指事实表中一行数据所表达的业务细节程度。\n\n事务型事实表可用于分析与各业务过程相关的各项统计指标，由于其保存了最细粒度的记录，可以提供最大限度的灵活性，可以支持无法预期的各种细节层次的统计需求。\n\n### 设计流程\n\n设计事务事实表时一般可遵循以下四个步骤：\n\n**选择业务过程**→**声明粒度**→**确认维度**→**确认事实**\n\n**选择业务过程**\n\n在业务系统中，挑选我们感兴趣的业务过程，业务过程可以概括为一个个不可拆分的行为事件，例如电商交易中的下单，取消订单，付款，退单等，都是业务过程。通常情况下，一个业务过程对应一张事务型事实表。\n\n**声明粒度**\n\n业务过程确定后，需要为每个业务过程声明粒度。即精确定义每张事务型事实表的每行数据表示什么，应该尽可能选择最细粒度，以此来应各种细节程度的需求。\n\n典型的粒度声明如下：\n\n订单事实表中一行数据表示的是一个订单中的一个商品项。\n\n**确定维度**\n\n确定维度具体是指，确定与每张事务型事实表相关的维度有哪些。\n\n确定维度时应尽量多的选择与业务过程相关的环境信息。因为维度的丰富程度就决定了维度模型能够支持的指标丰富程度。\n\n**确定事实**\n\n此处的“事实”一词，指的是每个业务过程的度量值（通常是可累加的数字类型的值，例如：次数、个数、件数、金额等）。\n\n经过上述四个步骤，事务型事实表就基本设计完成了。第一步选择业务过程可以确定有哪些事务型事实表，第二步可以确定每张事务型事实表的每行数据是什么，第三步可以确定每张事务型事实表的维度外键，第四步可以确定每张事务型事实表的度量值字段。\n\n## 周期快照事实表\n\n### 概述\n\n周期快照事实表以具有规律性的、可预见的时间间隔来记录事实，主要用于分析一些存量型（例如商品库存，账户余额）或者状态型（空气温度，行驶速度）指标。\n\n对于商品库存、账户余额这些存量型指标，业务系统中通常就会计算并保存最新结果，所以定期同步一份全量数据到数据仓库，构建周期型快照事实表，就能轻松应对此类统计需求，而无需再对事务型事实表中大量的历史记录进行聚合了。\n\n对于空气温度、行驶速度这些状态型指标，由于它们的值往往是连续的，我们无法捕获其变动的原子事务操作，所以无法使用事务型事实表统计此类需求。而只能定期对其进行采样，构建周期型快照事实表。\n\n### 设计流程\n\n**确定粒度**\n\n周期型快照事实表的粒度可由采样周期和维度描述，故确定采样周期和维度后即可确定粒度。\n\n采样周期通常选择每日。\n\n维度可根据统计指标决定，例如指标为统计每个仓库中每种商品的库存，则可确定维度为仓库和商品。\n\n确定完采样周期和维度后，即可确定该表粒度为每日-仓库-商品。\n\n**确认事实**\n\n事实也可根据统计指标决定，例如指标为统计每个仓库中每种商品的库存，则事实为商品库存。\n\n### 适用场景\n\n适用于分析存量型、状态型指标\n\n### 事实类型\n\n此处的事实类型是指度量值的类型，而非事实表的类型。事实（度量值）共分为三类，分别是可加事实，半可加事实和不可加事实。\n\n**可加事实**\n\n可加事实是指可以按照与事实表相关的所有维度进行累加，例如事务型事实表中的事实。\n\n**半可加事实**\n\n半可加事实是指只能按照与事实表相关的一部分维度进行累加，例如周期型快照事实表中的事实。以上述各仓库中各商品的库存每天快照事实表为例，这张表中的库存事实可以按照仓库或者商品维度进行累加，但是不能按照时间维度进行累加，因为将每天的库存累加起来是没有任何意义的。\n\n**不可加事实**\n\n不可加事实是指完全不具备可加性，例如比率型事实。不可加事实通常需要转化为可加事实，例如比率可转化为分子和分母。\n\n## 累计快照事实表\n\n### 概述\n\n累计快照事实表是基于一个业务流程中的多个关键业务过程联合处理而构建的事实表，如交易流程中的下单、支付、发货、确认收货业务过程。\n\n累积型快照事实表主要用于分析业务过程（里程碑）之间的时间间隔等需求。例如前文提到的用户下单到支付的平均时间间隔，使用累积型快照事实表进行统计，就能避免两个事务事实表的关联操作，从而变得十分简单高效。\n\n### 设计流程\n\n累积型快照事实表的设计流程同事务型事实表类似，也可采用以下四个步骤，下面重点描述与事务型事实表的不同之处。\n\n**选择业务过程**→**声明粒度**→**确认维度**→**确认事实**\n\n**选择业务过程**\n\n选择一个业务流程中需要关联分析的多个关键业务过程，多个业务过程对应一张累积型快照事实表。\n\n**声明粒度**\n\n精确定义每行数据表示的是什么，尽量选择最小粒度。\n\n**确认维度**\n\n选择与各业务过程相关的维度，需要注意的是，每各业务过程均需要一个日期维度。\n\n**确认事实**\n\n选择各业务过程的度量值。\n\n### 适用场景\n\n适用于处理多事务关联\n\n","slug":"事实表的类型","published":1,"updated":"2022-01-23T03:10:52.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyv8edwo000738qha4tg07nk","content":"<h1 id=\"事实表的类型\"><a href=\"#事实表的类型\" class=\"headerlink\" title=\"事实表的类型\"></a>事实表的类型</h1><h2 id=\"事务型事实表\"><a href=\"#事务型事实表\" class=\"headerlink\" title=\"事务型事实表\"></a>事务型事实表</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>事务事实表用来记录各业务过程，它保存的是各业务过程的原子操作事件，即最细粒度的操作事件。粒度是指事实表中一行数据所表达的业务细节程度。</p>\n<p>事务型事实表可用于分析与各业务过程相关的各项统计指标，由于其保存了最细粒度的记录，可以提供最大限度的灵活性，可以支持无法预期的各种细节层次的统计需求。</p>\n<h3 id=\"设计流程\"><a href=\"#设计流程\" class=\"headerlink\" title=\"设计流程\"></a>设计流程</h3><p>设计事务事实表时一般可遵循以下四个步骤：</p>\n<p><strong>选择业务过程</strong>→<strong>声明粒度</strong>→<strong>确认维度</strong>→<strong>确认事实</strong></p>\n<p><strong>选择业务过程</strong></p>\n<p>在业务系统中，挑选我们感兴趣的业务过程，业务过程可以概括为一个个不可拆分的行为事件，例如电商交易中的下单，取消订单，付款，退单等，都是业务过程。通常情况下，一个业务过程对应一张事务型事实表。</p>\n<p><strong>声明粒度</strong></p>\n<p>业务过程确定后，需要为每个业务过程声明粒度。即精确定义每张事务型事实表的每行数据表示什么，应该尽可能选择最细粒度，以此来应各种细节程度的需求。</p>\n<p>典型的粒度声明如下：</p>\n<p>订单事实表中一行数据表示的是一个订单中的一个商品项。</p>\n<p><strong>确定维度</strong></p>\n<p>确定维度具体是指，确定与每张事务型事实表相关的维度有哪些。</p>\n<p>确定维度时应尽量多的选择与业务过程相关的环境信息。因为维度的丰富程度就决定了维度模型能够支持的指标丰富程度。</p>\n<p><strong>确定事实</strong></p>\n<p>此处的“事实”一词，指的是每个业务过程的度量值（通常是可累加的数字类型的值，例如：次数、个数、件数、金额等）。</p>\n<p>经过上述四个步骤，事务型事实表就基本设计完成了。第一步选择业务过程可以确定有哪些事务型事实表，第二步可以确定每张事务型事实表的每行数据是什么，第三步可以确定每张事务型事实表的维度外键，第四步可以确定每张事务型事实表的度量值字段。</p>\n<h2 id=\"周期快照事实表\"><a href=\"#周期快照事实表\" class=\"headerlink\" title=\"周期快照事实表\"></a>周期快照事实表</h2><h3 id=\"概述-1\"><a href=\"#概述-1\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>周期快照事实表以具有规律性的、可预见的时间间隔来记录事实，主要用于分析一些存量型（例如商品库存，账户余额）或者状态型（空气温度，行驶速度）指标。</p>\n<p>对于商品库存、账户余额这些存量型指标，业务系统中通常就会计算并保存最新结果，所以定期同步一份全量数据到数据仓库，构建周期型快照事实表，就能轻松应对此类统计需求，而无需再对事务型事实表中大量的历史记录进行聚合了。</p>\n<p>对于空气温度、行驶速度这些状态型指标，由于它们的值往往是连续的，我们无法捕获其变动的原子事务操作，所以无法使用事务型事实表统计此类需求。而只能定期对其进行采样，构建周期型快照事实表。</p>\n<h3 id=\"设计流程-1\"><a href=\"#设计流程-1\" class=\"headerlink\" title=\"设计流程\"></a>设计流程</h3><p><strong>确定粒度</strong></p>\n<p>周期型快照事实表的粒度可由采样周期和维度描述，故确定采样周期和维度后即可确定粒度。</p>\n<p>采样周期通常选择每日。</p>\n<p>维度可根据统计指标决定，例如指标为统计每个仓库中每种商品的库存，则可确定维度为仓库和商品。</p>\n<p>确定完采样周期和维度后，即可确定该表粒度为每日-仓库-商品。</p>\n<p><strong>确认事实</strong></p>\n<p>事实也可根据统计指标决定，例如指标为统计每个仓库中每种商品的库存，则事实为商品库存。</p>\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><p>适用于分析存量型、状态型指标</p>\n<h3 id=\"事实类型\"><a href=\"#事实类型\" class=\"headerlink\" title=\"事实类型\"></a>事实类型</h3><p>此处的事实类型是指度量值的类型，而非事实表的类型。事实（度量值）共分为三类，分别是可加事实，半可加事实和不可加事实。</p>\n<p><strong>可加事实</strong></p>\n<p>可加事实是指可以按照与事实表相关的所有维度进行累加，例如事务型事实表中的事实。</p>\n<p><strong>半可加事实</strong></p>\n<p>半可加事实是指只能按照与事实表相关的一部分维度进行累加，例如周期型快照事实表中的事实。以上述各仓库中各商品的库存每天快照事实表为例，这张表中的库存事实可以按照仓库或者商品维度进行累加，但是不能按照时间维度进行累加，因为将每天的库存累加起来是没有任何意义的。</p>\n<p><strong>不可加事实</strong></p>\n<p>不可加事实是指完全不具备可加性，例如比率型事实。不可加事实通常需要转化为可加事实，例如比率可转化为分子和分母。</p>\n<h2 id=\"累计快照事实表\"><a href=\"#累计快照事实表\" class=\"headerlink\" title=\"累计快照事实表\"></a>累计快照事实表</h2><h3 id=\"概述-2\"><a href=\"#概述-2\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>累计快照事实表是基于一个业务流程中的多个关键业务过程联合处理而构建的事实表，如交易流程中的下单、支付、发货、确认收货业务过程。</p>\n<p>累积型快照事实表主要用于分析业务过程（里程碑）之间的时间间隔等需求。例如前文提到的用户下单到支付的平均时间间隔，使用累积型快照事实表进行统计，就能避免两个事务事实表的关联操作，从而变得十分简单高效。</p>\n<h3 id=\"设计流程-2\"><a href=\"#设计流程-2\" class=\"headerlink\" title=\"设计流程\"></a>设计流程</h3><p>累积型快照事实表的设计流程同事务型事实表类似，也可采用以下四个步骤，下面重点描述与事务型事实表的不同之处。</p>\n<p><strong>选择业务过程</strong>→<strong>声明粒度</strong>→<strong>确认维度</strong>→<strong>确认事实</strong></p>\n<p><strong>选择业务过程</strong></p>\n<p>选择一个业务流程中需要关联分析的多个关键业务过程，多个业务过程对应一张累积型快照事实表。</p>\n<p><strong>声明粒度</strong></p>\n<p>精确定义每行数据表示的是什么，尽量选择最小粒度。</p>\n<p><strong>确认维度</strong></p>\n<p>选择与各业务过程相关的维度，需要注意的是，每各业务过程均需要一个日期维度。</p>\n<p><strong>确认事实</strong></p>\n<p>选择各业务过程的度量值。</p>\n<h3 id=\"适用场景-1\"><a href=\"#适用场景-1\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><p>适用于处理多事务关联</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"事实表的类型\"><a href=\"#事实表的类型\" class=\"headerlink\" title=\"事实表的类型\"></a>事实表的类型</h1><h2 id=\"事务型事实表\"><a href=\"#事务型事实表\" class=\"headerlink\" title=\"事务型事实表\"></a>事务型事实表</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>事务事实表用来记录各业务过程，它保存的是各业务过程的原子操作事件，即最细粒度的操作事件。粒度是指事实表中一行数据所表达的业务细节程度。</p>\n<p>事务型事实表可用于分析与各业务过程相关的各项统计指标，由于其保存了最细粒度的记录，可以提供最大限度的灵活性，可以支持无法预期的各种细节层次的统计需求。</p>\n<h3 id=\"设计流程\"><a href=\"#设计流程\" class=\"headerlink\" title=\"设计流程\"></a>设计流程</h3><p>设计事务事实表时一般可遵循以下四个步骤：</p>\n<p><strong>选择业务过程</strong>→<strong>声明粒度</strong>→<strong>确认维度</strong>→<strong>确认事实</strong></p>\n<p><strong>选择业务过程</strong></p>\n<p>在业务系统中，挑选我们感兴趣的业务过程，业务过程可以概括为一个个不可拆分的行为事件，例如电商交易中的下单，取消订单，付款，退单等，都是业务过程。通常情况下，一个业务过程对应一张事务型事实表。</p>\n<p><strong>声明粒度</strong></p>\n<p>业务过程确定后，需要为每个业务过程声明粒度。即精确定义每张事务型事实表的每行数据表示什么，应该尽可能选择最细粒度，以此来应各种细节程度的需求。</p>\n<p>典型的粒度声明如下：</p>\n<p>订单事实表中一行数据表示的是一个订单中的一个商品项。</p>\n<p><strong>确定维度</strong></p>\n<p>确定维度具体是指，确定与每张事务型事实表相关的维度有哪些。</p>\n<p>确定维度时应尽量多的选择与业务过程相关的环境信息。因为维度的丰富程度就决定了维度模型能够支持的指标丰富程度。</p>\n<p><strong>确定事实</strong></p>\n<p>此处的“事实”一词，指的是每个业务过程的度量值（通常是可累加的数字类型的值，例如：次数、个数、件数、金额等）。</p>\n<p>经过上述四个步骤，事务型事实表就基本设计完成了。第一步选择业务过程可以确定有哪些事务型事实表，第二步可以确定每张事务型事实表的每行数据是什么，第三步可以确定每张事务型事实表的维度外键，第四步可以确定每张事务型事实表的度量值字段。</p>\n<h2 id=\"周期快照事实表\"><a href=\"#周期快照事实表\" class=\"headerlink\" title=\"周期快照事实表\"></a>周期快照事实表</h2><h3 id=\"概述-1\"><a href=\"#概述-1\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>周期快照事实表以具有规律性的、可预见的时间间隔来记录事实，主要用于分析一些存量型（例如商品库存，账户余额）或者状态型（空气温度，行驶速度）指标。</p>\n<p>对于商品库存、账户余额这些存量型指标，业务系统中通常就会计算并保存最新结果，所以定期同步一份全量数据到数据仓库，构建周期型快照事实表，就能轻松应对此类统计需求，而无需再对事务型事实表中大量的历史记录进行聚合了。</p>\n<p>对于空气温度、行驶速度这些状态型指标，由于它们的值往往是连续的，我们无法捕获其变动的原子事务操作，所以无法使用事务型事实表统计此类需求。而只能定期对其进行采样，构建周期型快照事实表。</p>\n<h3 id=\"设计流程-1\"><a href=\"#设计流程-1\" class=\"headerlink\" title=\"设计流程\"></a>设计流程</h3><p><strong>确定粒度</strong></p>\n<p>周期型快照事实表的粒度可由采样周期和维度描述，故确定采样周期和维度后即可确定粒度。</p>\n<p>采样周期通常选择每日。</p>\n<p>维度可根据统计指标决定，例如指标为统计每个仓库中每种商品的库存，则可确定维度为仓库和商品。</p>\n<p>确定完采样周期和维度后，即可确定该表粒度为每日-仓库-商品。</p>\n<p><strong>确认事实</strong></p>\n<p>事实也可根据统计指标决定，例如指标为统计每个仓库中每种商品的库存，则事实为商品库存。</p>\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><p>适用于分析存量型、状态型指标</p>\n<h3 id=\"事实类型\"><a href=\"#事实类型\" class=\"headerlink\" title=\"事实类型\"></a>事实类型</h3><p>此处的事实类型是指度量值的类型，而非事实表的类型。事实（度量值）共分为三类，分别是可加事实，半可加事实和不可加事实。</p>\n<p><strong>可加事实</strong></p>\n<p>可加事实是指可以按照与事实表相关的所有维度进行累加，例如事务型事实表中的事实。</p>\n<p><strong>半可加事实</strong></p>\n<p>半可加事实是指只能按照与事实表相关的一部分维度进行累加，例如周期型快照事实表中的事实。以上述各仓库中各商品的库存每天快照事实表为例，这张表中的库存事实可以按照仓库或者商品维度进行累加，但是不能按照时间维度进行累加，因为将每天的库存累加起来是没有任何意义的。</p>\n<p><strong>不可加事实</strong></p>\n<p>不可加事实是指完全不具备可加性，例如比率型事实。不可加事实通常需要转化为可加事实，例如比率可转化为分子和分母。</p>\n<h2 id=\"累计快照事实表\"><a href=\"#累计快照事实表\" class=\"headerlink\" title=\"累计快照事实表\"></a>累计快照事实表</h2><h3 id=\"概述-2\"><a href=\"#概述-2\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>累计快照事实表是基于一个业务流程中的多个关键业务过程联合处理而构建的事实表，如交易流程中的下单、支付、发货、确认收货业务过程。</p>\n<p>累积型快照事实表主要用于分析业务过程（里程碑）之间的时间间隔等需求。例如前文提到的用户下单到支付的平均时间间隔，使用累积型快照事实表进行统计，就能避免两个事务事实表的关联操作，从而变得十分简单高效。</p>\n<h3 id=\"设计流程-2\"><a href=\"#设计流程-2\" class=\"headerlink\" title=\"设计流程\"></a>设计流程</h3><p>累积型快照事实表的设计流程同事务型事实表类似，也可采用以下四个步骤，下面重点描述与事务型事实表的不同之处。</p>\n<p><strong>选择业务过程</strong>→<strong>声明粒度</strong>→<strong>确认维度</strong>→<strong>确认事实</strong></p>\n<p><strong>选择业务过程</strong></p>\n<p>选择一个业务流程中需要关联分析的多个关键业务过程，多个业务过程对应一张累积型快照事实表。</p>\n<p><strong>声明粒度</strong></p>\n<p>精确定义每行数据表示的是什么，尽量选择最小粒度。</p>\n<p><strong>确认维度</strong></p>\n<p>选择与各业务过程相关的维度，需要注意的是，每各业务过程均需要一个日期维度。</p>\n<p><strong>确认事实</strong></p>\n<p>选择各业务过程的度量值。</p>\n<h3 id=\"适用场景-1\"><a href=\"#适用场景-1\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><p>适用于处理多事务关联</p>\n"},{"title":"数据仓库梳理","date":"2022-01-01T01:25:00.000Z","author":"nove","_content":"# 数据仓库\n\n## 概念\n\n* 什么是数据仓库\n  * 存放数据的对象：特点：\n  * 面像主题：不同场景有不同的主题域\n  * 集成的：多个源头，做归一化处理\n  * 随时间变化的：时间内有效的局限性\n  * 非易失的：可以稳定保存\n* 主题\n  * 可以通过某个关键字关联起来的一系列表\n* 粒度\n  * 最小粒度原则，可以原子的反应某个或者某组行为的概念\n  * 上卷：粒度变大\n  * 下钻：粒度变小\n* 维度\n  * 研究行为的角度\n  * 好的模型在于已经有的维度满足对模型的需求\n\n## 设计数据仓库\n\n## 选型\n\n* 硬件\n  * ssd，机械，云\n* 软件\n  * olap引擎，存储引擎，调度，管理\n\n## 数据流程\n\n* 集成\n  * 兼容历史\n  * 不同数据源的口径统一\n  * 主题域划分\n  * 时间语义设计\n* 模型设计\n  * 概念模型\n    * 数据界限划分，主题划分\n    * 确定实体，关系，主题域\n  * 逻辑模型\n    * 关系梳理，带入表相关内容\n    * 梳理主题域间的关系\n  * 物理模型\n    * 粒度，分区，冗余的设计和取舍\n    * 落地规划，满足可靠，效率的综合要求\n    * 规范化&反规范化\n      * k-v的格式存储-具体需求\n      * 宽表的格式-冗余，性能问题\n      * 索引构建-MPP类型引擎考虑分区问题\n      * 使用频率划分-资源分配问题，热数据，冷数据\n\n## 元数据\n\n* 概念\n  * 不包含数据信息，用来描述数据的数据\n  * 数据结构信息\n  * etl操作信息\n  * 数仓的信息\n  * 操作，抽取记录\n  * 模型&仓库间的关系\n* 操作方式\n  * 保证重要操作有记录（日志&文档）\n  * 便于查阅，检索，管理\n\n## 快照概念\n\n* 快照包含\n  * 一系列的描述\n  * 具体的有用的数据\n\n# 优化\n\n## 分层\n\n* ods\n  * 尽可能包保持和原来数据一样\n* dw层\n  * 轻度的数据汇总，通过一些方法进行汇总\n    * 可累计的值，pv\n    * 不可累计的值，uv\n    * 由具体的需求设计出来具体的时间段划分\n  * dwd\n    * etl后的原始数据层，有统一的口径，理论上最小粒度的数据\n  * dws\n    * 按照具体的需求，天，月，任意时间段汇总\n* ads\n  * 面向用户端\n  * 固化的展示或者通过交互的方式进行查询\n\n## 数据质量控制\n\n* 事前探查\n  * 格式问题，口径问题，是否由系统的bug产生的脏数据\n* 事中监控\n  * 资源调度，任务链的执行情况\n* 事后核对","source":"_posts/数据仓库.md","raw":"---\ntitle: 数据仓库梳理\ndate: 2022-01-01 09:25:00\nauthor: nove\ncategories: 大数据\ntags:\n  - 数据仓库\n  - 维度建模\n---\n# 数据仓库\n\n## 概念\n\n* 什么是数据仓库\n  * 存放数据的对象：特点：\n  * 面像主题：不同场景有不同的主题域\n  * 集成的：多个源头，做归一化处理\n  * 随时间变化的：时间内有效的局限性\n  * 非易失的：可以稳定保存\n* 主题\n  * 可以通过某个关键字关联起来的一系列表\n* 粒度\n  * 最小粒度原则，可以原子的反应某个或者某组行为的概念\n  * 上卷：粒度变大\n  * 下钻：粒度变小\n* 维度\n  * 研究行为的角度\n  * 好的模型在于已经有的维度满足对模型的需求\n\n## 设计数据仓库\n\n## 选型\n\n* 硬件\n  * ssd，机械，云\n* 软件\n  * olap引擎，存储引擎，调度，管理\n\n## 数据流程\n\n* 集成\n  * 兼容历史\n  * 不同数据源的口径统一\n  * 主题域划分\n  * 时间语义设计\n* 模型设计\n  * 概念模型\n    * 数据界限划分，主题划分\n    * 确定实体，关系，主题域\n  * 逻辑模型\n    * 关系梳理，带入表相关内容\n    * 梳理主题域间的关系\n  * 物理模型\n    * 粒度，分区，冗余的设计和取舍\n    * 落地规划，满足可靠，效率的综合要求\n    * 规范化&反规范化\n      * k-v的格式存储-具体需求\n      * 宽表的格式-冗余，性能问题\n      * 索引构建-MPP类型引擎考虑分区问题\n      * 使用频率划分-资源分配问题，热数据，冷数据\n\n## 元数据\n\n* 概念\n  * 不包含数据信息，用来描述数据的数据\n  * 数据结构信息\n  * etl操作信息\n  * 数仓的信息\n  * 操作，抽取记录\n  * 模型&仓库间的关系\n* 操作方式\n  * 保证重要操作有记录（日志&文档）\n  * 便于查阅，检索，管理\n\n## 快照概念\n\n* 快照包含\n  * 一系列的描述\n  * 具体的有用的数据\n\n# 优化\n\n## 分层\n\n* ods\n  * 尽可能包保持和原来数据一样\n* dw层\n  * 轻度的数据汇总，通过一些方法进行汇总\n    * 可累计的值，pv\n    * 不可累计的值，uv\n    * 由具体的需求设计出来具体的时间段划分\n  * dwd\n    * etl后的原始数据层，有统一的口径，理论上最小粒度的数据\n  * dws\n    * 按照具体的需求，天，月，任意时间段汇总\n* ads\n  * 面向用户端\n  * 固化的展示或者通过交互的方式进行查询\n\n## 数据质量控制\n\n* 事前探查\n  * 格式问题，口径问题，是否由系统的bug产生的脏数据\n* 事中监控\n  * 资源调度，任务链的执行情况\n* 事后核对","slug":"数据仓库","published":1,"updated":"2022-01-23T03:11:30.608Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyv8edwq000a38qhdouaa7o2","content":"<h1 id=\"数据仓库\"><a href=\"#数据仓库\" class=\"headerlink\" title=\"数据仓库\"></a>数据仓库</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><ul>\n<li>什么是数据仓库<ul>\n<li>存放数据的对象：特点：</li>\n<li>面像主题：不同场景有不同的主题域</li>\n<li>集成的：多个源头，做归一化处理</li>\n<li>随时间变化的：时间内有效的局限性</li>\n<li>非易失的：可以稳定保存</li>\n</ul>\n</li>\n<li>主题<ul>\n<li>可以通过某个关键字关联起来的一系列表</li>\n</ul>\n</li>\n<li>粒度<ul>\n<li>最小粒度原则，可以原子的反应某个或者某组行为的概念</li>\n<li>上卷：粒度变大</li>\n<li>下钻：粒度变小</li>\n</ul>\n</li>\n<li>维度<ul>\n<li>研究行为的角度</li>\n<li>好的模型在于已经有的维度满足对模型的需求</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"设计数据仓库\"><a href=\"#设计数据仓库\" class=\"headerlink\" title=\"设计数据仓库\"></a>设计数据仓库</h2><h2 id=\"选型\"><a href=\"#选型\" class=\"headerlink\" title=\"选型\"></a>选型</h2><ul>\n<li>硬件<ul>\n<li>ssd，机械，云</li>\n</ul>\n</li>\n<li>软件<ul>\n<li>olap引擎，存储引擎，调度，管理</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据流程\"><a href=\"#数据流程\" class=\"headerlink\" title=\"数据流程\"></a>数据流程</h2><ul>\n<li>集成<ul>\n<li>兼容历史</li>\n<li>不同数据源的口径统一</li>\n<li>主题域划分</li>\n<li>时间语义设计</li>\n</ul>\n</li>\n<li>模型设计<ul>\n<li>概念模型<ul>\n<li>数据界限划分，主题划分</li>\n<li>确定实体，关系，主题域</li>\n</ul>\n</li>\n<li>逻辑模型<ul>\n<li>关系梳理，带入表相关内容</li>\n<li>梳理主题域间的关系</li>\n</ul>\n</li>\n<li>物理模型<ul>\n<li>粒度，分区，冗余的设计和取舍</li>\n<li>落地规划，满足可靠，效率的综合要求</li>\n<li>规范化&amp;反规范化<ul>\n<li>k-v的格式存储-具体需求</li>\n<li>宽表的格式-冗余，性能问题</li>\n<li>索引构建-MPP类型引擎考虑分区问题</li>\n<li>使用频率划分-资源分配问题，热数据，冷数据</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"元数据\"><a href=\"#元数据\" class=\"headerlink\" title=\"元数据\"></a>元数据</h2><ul>\n<li>概念<ul>\n<li>不包含数据信息，用来描述数据的数据</li>\n<li>数据结构信息</li>\n<li>etl操作信息</li>\n<li>数仓的信息</li>\n<li>操作，抽取记录</li>\n<li>模型&amp;仓库间的关系</li>\n</ul>\n</li>\n<li>操作方式<ul>\n<li>保证重要操作有记录（日志&amp;文档）</li>\n<li>便于查阅，检索，管理</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"快照概念\"><a href=\"#快照概念\" class=\"headerlink\" title=\"快照概念\"></a>快照概念</h2><ul>\n<li>快照包含<ul>\n<li>一系列的描述</li>\n<li>具体的有用的数据</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h1><h2 id=\"分层\"><a href=\"#分层\" class=\"headerlink\" title=\"分层\"></a>分层</h2><ul>\n<li>ods<ul>\n<li>尽可能包保持和原来数据一样</li>\n</ul>\n</li>\n<li>dw层<ul>\n<li>轻度的数据汇总，通过一些方法进行汇总<ul>\n<li>可累计的值，pv</li>\n<li>不可累计的值，uv</li>\n<li>由具体的需求设计出来具体的时间段划分</li>\n</ul>\n</li>\n<li>dwd<ul>\n<li>etl后的原始数据层，有统一的口径，理论上最小粒度的数据</li>\n</ul>\n</li>\n<li>dws<ul>\n<li>按照具体的需求，天，月，任意时间段汇总</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>ads<ul>\n<li>面向用户端</li>\n<li>固化的展示或者通过交互的方式进行查询</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据质量控制\"><a href=\"#数据质量控制\" class=\"headerlink\" title=\"数据质量控制\"></a>数据质量控制</h2><ul>\n<li>事前探查<ul>\n<li>格式问题，口径问题，是否由系统的bug产生的脏数据</li>\n</ul>\n</li>\n<li>事中监控<ul>\n<li>资源调度，任务链的执行情况</li>\n</ul>\n</li>\n<li>事后核对</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"数据仓库\"><a href=\"#数据仓库\" class=\"headerlink\" title=\"数据仓库\"></a>数据仓库</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><ul>\n<li>什么是数据仓库<ul>\n<li>存放数据的对象：特点：</li>\n<li>面像主题：不同场景有不同的主题域</li>\n<li>集成的：多个源头，做归一化处理</li>\n<li>随时间变化的：时间内有效的局限性</li>\n<li>非易失的：可以稳定保存</li>\n</ul>\n</li>\n<li>主题<ul>\n<li>可以通过某个关键字关联起来的一系列表</li>\n</ul>\n</li>\n<li>粒度<ul>\n<li>最小粒度原则，可以原子的反应某个或者某组行为的概念</li>\n<li>上卷：粒度变大</li>\n<li>下钻：粒度变小</li>\n</ul>\n</li>\n<li>维度<ul>\n<li>研究行为的角度</li>\n<li>好的模型在于已经有的维度满足对模型的需求</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"设计数据仓库\"><a href=\"#设计数据仓库\" class=\"headerlink\" title=\"设计数据仓库\"></a>设计数据仓库</h2><h2 id=\"选型\"><a href=\"#选型\" class=\"headerlink\" title=\"选型\"></a>选型</h2><ul>\n<li>硬件<ul>\n<li>ssd，机械，云</li>\n</ul>\n</li>\n<li>软件<ul>\n<li>olap引擎，存储引擎，调度，管理</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据流程\"><a href=\"#数据流程\" class=\"headerlink\" title=\"数据流程\"></a>数据流程</h2><ul>\n<li>集成<ul>\n<li>兼容历史</li>\n<li>不同数据源的口径统一</li>\n<li>主题域划分</li>\n<li>时间语义设计</li>\n</ul>\n</li>\n<li>模型设计<ul>\n<li>概念模型<ul>\n<li>数据界限划分，主题划分</li>\n<li>确定实体，关系，主题域</li>\n</ul>\n</li>\n<li>逻辑模型<ul>\n<li>关系梳理，带入表相关内容</li>\n<li>梳理主题域间的关系</li>\n</ul>\n</li>\n<li>物理模型<ul>\n<li>粒度，分区，冗余的设计和取舍</li>\n<li>落地规划，满足可靠，效率的综合要求</li>\n<li>规范化&amp;反规范化<ul>\n<li>k-v的格式存储-具体需求</li>\n<li>宽表的格式-冗余，性能问题</li>\n<li>索引构建-MPP类型引擎考虑分区问题</li>\n<li>使用频率划分-资源分配问题，热数据，冷数据</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"元数据\"><a href=\"#元数据\" class=\"headerlink\" title=\"元数据\"></a>元数据</h2><ul>\n<li>概念<ul>\n<li>不包含数据信息，用来描述数据的数据</li>\n<li>数据结构信息</li>\n<li>etl操作信息</li>\n<li>数仓的信息</li>\n<li>操作，抽取记录</li>\n<li>模型&amp;仓库间的关系</li>\n</ul>\n</li>\n<li>操作方式<ul>\n<li>保证重要操作有记录（日志&amp;文档）</li>\n<li>便于查阅，检索，管理</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"快照概念\"><a href=\"#快照概念\" class=\"headerlink\" title=\"快照概念\"></a>快照概念</h2><ul>\n<li>快照包含<ul>\n<li>一系列的描述</li>\n<li>具体的有用的数据</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h1><h2 id=\"分层\"><a href=\"#分层\" class=\"headerlink\" title=\"分层\"></a>分层</h2><ul>\n<li>ods<ul>\n<li>尽可能包保持和原来数据一样</li>\n</ul>\n</li>\n<li>dw层<ul>\n<li>轻度的数据汇总，通过一些方法进行汇总<ul>\n<li>可累计的值，pv</li>\n<li>不可累计的值，uv</li>\n<li>由具体的需求设计出来具体的时间段划分</li>\n</ul>\n</li>\n<li>dwd<ul>\n<li>etl后的原始数据层，有统一的口径，理论上最小粒度的数据</li>\n</ul>\n</li>\n<li>dws<ul>\n<li>按照具体的需求，天，月，任意时间段汇总</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>ads<ul>\n<li>面向用户端</li>\n<li>固化的展示或者通过交互的方式进行查询</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据质量控制\"><a href=\"#数据质量控制\" class=\"headerlink\" title=\"数据质量控制\"></a>数据质量控制</h2><ul>\n<li>事前探查<ul>\n<li>格式问题，口径问题，是否由系统的bug产生的脏数据</li>\n</ul>\n</li>\n<li>事中监控<ul>\n<li>资源调度，任务链的执行情况</li>\n</ul>\n</li>\n<li>事后核对</li>\n</ul>\n"},{"title":"常用linux命令","date":"2022-01-19T08:58:24.000Z","_content":"## Linux（vi/vim）\n### 一般模式\n| 语法          | 功能描述                      |\n| ------------- | ----------------------------- |\n| yy            | 复制光标当前一行              |\n| y数字y        | 复制一段（从第几行到第几行）  |\n| p             | 箭头移动到目的行粘贴          |\n| u             | 撤销上一步                    |\n| dd            | 删除光标当前行                |\n| d数字d        | 删除光标（含）后多少行        |\n| x             | 删除一个字母，相当于del       |\n| X             | 删除一个字母，相当于Backspace |\n| yw            | 复制一个词                    |\n| dw            | 删除一个词                    |\n| shift+^       | 移动到行头                    |\n| shift+$       | 移动到行尾                    |\n| 1+shift+g     | 移动到页头，数字              |\n| shift+g       | 移动到页尾                    |\n| 数字N+shift+g | 移动到目标行                  |\n\n### 编辑模式\n| 按键 | 功能               |\n| ---- | ------------------ |\n| i    | 当前光标前         |\n| a    | 当前光标后         |\n| o    | 当前光标行的下一行 |\n| I    | 光标所在行最前     |\n| A    | 光标所在行最后     |\n| O    | 当前光标行的上一行 |\n\n### 指令模式\n| 命令         | 功能                             |\n| ------------ | -------------------------------- |\n| :w           | 保存                             |\n| :q           | 退出                             |\n| :!           | 强制执行                         |\n| /要查找的词  | n 查找下一个，N 往上查找         |\n| ? 要查找的词 | n是查找上一个，shift+n是往下查找 |\n| :set nu      | 显示行号                         |\n| :set nonu    | 关闭行号                         |\n\n### 压缩和解压\n#### gzip/gunzip 压缩\n\n（1）只能压缩文件不能压缩目录\n\n（2）不保留原来的文件\n\ngzip压缩：gzip hello.txt\n\ngunzip解压缩文件：gunzip hello.txt.gz\n\n#### zip/unzip 压缩\n可以压缩目录且保留源文件\n\nzip压缩（压缩 1.txt 和2.txt，压缩后的名称为mypackage.zip）：zip hello.zip hello.txt world.txt\n\nunzip解压：unzip hello.zip\n\nunzip解压到指定目录：unzip hello.zip -d /opt\n\n#### tar 打包\ntar压缩多个文件：tar -zcvf hello.txt world.txt\n\ntar压缩目录：tar -zcvf hello.tar.gz opt/\n\ntar解压到当前目录：tar -zxvf hello.tar.gz\n\ntar解压到指定目录：tar -zxvf hello.tar.gz -C /opt\n\n### RPM\nRPM查询命令：rpm -qa |grep firefox\n\nRPM卸载命令：\n\nrpm -e xxxxxx\n\nrpm -e --nodeps xxxxxx（不检查依赖）\n\nRPM安装命令：\n\nrpm -ivh xxxxxx.rpm\n\nrpm -ivh --nodeps fxxxxxx.rpm（--nodeps，不检测依赖进度）\n\n| 选项     | 功能                     |\n| -------- | ------------------------ |\n| -i       | -i=install，安装         |\n| -v       | -v=verbose，显示详细信息 |\n| -h       | -h=hash，进度条          |\n| --nodeps | --nodeps，不检测依赖进度 |\n\n\n---\n\n## Shell\n### 输入/输出重定向\n| 命令            | 功能说明                                         |\n| --------------- | ------------------------------------------------ |\n| command > file  | 将输出重定向到 file                              |\n| command < file  | 将输入重定向到 file                              |\n| command >> file | 将输出以追加的方式重定向到 file                  |\n| n > file        | 将文件描述符为 n 的文件重定向到 file             |\n| n >> file       | 将文件描述符为 n 的文件以追加的方式重定向到 file |\n| n >& m          | 将输出文件 m 和 n 合并                           |\n| n <& m          | 将输入文件 m 和 n 合并                           |\n| << tag          | 将开始标记 tag 和结束标记 tag 之间的内容作为输入 |\n\n### 脚本编辑\n| 快捷方式 | 功能说明   |\n| -------- | ---------- |\n| shift    | 参数左移   |\n| $@       | 所有的参数 |\n| $#       | 参数的个数 |\n\n\n---\n\n## Hadoop\n### 启动类命令\n\n| 功能说明     | 命令脚本           |\n| ------------ | ------------------ |\n| 启动hdfs集群 | sbin/start-dfs.sh  |\n| 启动yarn     | sbin/start-yarn.sh |\n\n### hadoop fs/hdfs dfs 命令\n\n| 功能说明                                                     | 命令                                         |\n| ------------------------------------------------------------ | -------------------------------------------- |\n| 创建目录                                                     | hdfs dfs -mkdir -p /data/flink               |\n| 显示目录                                                     | hdfs dfs -ls /                               |\n| 从HDFS拷贝到本地                                             | hdfs dfs -copyToLocal /data/data.txt ./      |\n| 文件上传到集群(从本地)                                       | hhdfs dfs -copyFromLocal data.txt /          |\n| 文件下载                                                     | hdfs dfs -get /data/flink                    |\n| 删除集群的文件                                               | hdfs dfs -rm /data/flink                     |\n| 删除文件夹                                                   | hdfs dfs -rm -r -skipTrash /data             |\n| 从本地剪切粘贴到HDFS                                         | hdfs dfs  -moveFromLocal data.txt /data/     |\n| 追加一个文件到已经存在的文件末尾hdfs dfs -appendToFile data1.txt /data/data.txt |                                              |\n| 显示文件内容                                                 | hdfs dfs -cat data.txt                       |\n| 修改文件所属权限                                             | hdfs dfs  -chmod  777 xxx.sh                 |\n| 修改文件所属用户组                                           | hdfs dfs  -chown  root:root data.txt         |\n| 从HDFS的一个路径拷贝到HDFS的另一个路径                       | hdfs dfs -cp data.txt /data1.txt             |\n| 在HDFS目录中移动文件                                         | hdfs dfs -mv data.txt /opt/                  |\n| 合并下载多个文件                                             | hdfs dfs  -getmerge /data/* ./data_merge.txt |\n| hadoop fs -put                                               | 等同于copyFromLocal                          |\n| 显示一个文件的末尾                                           | hdfs dfs -tail data.txt                      |\n| 删除文件或文件夹                                             | hdfs dfs -rm /data/data.txt                  |\n| 删除空目录                                                   | hdfs dfs -rmdir /data                        |\n| 统计文件夹的大小信息                                         | hdfs dfs -s -h /data                         |\n| 统计文件夹下的文件大小信息                                   | hdfs dfs  -h /data                           |\n| 设置HDFS中文件的副本数量                                     | hdfs dfs -setrep 3 /data/data.txt            |\n\n\n### yarn命令\n| 功能说明                   | 命令                           |\n| -------------------------- | ------------------------------ |\n| 查看正在运行的yarn任务列表 | yarn application -list appID   |\n| kill掉指定id的yarn任务     | yarn application -kill appID   |\n| 查看任务日志信息           | yarn logs -applicationId appID |\n\n---\n\n## Zookeeper\n###  启动命令\n| 功能说明            | 命令脚本                        |\n| ------------------- | ------------------------------- |\n| 启动zookeeper服务   | zkServer.sh start               |\n| 查看zookeeper状态   | zkServer.sh status              |\n| 停止zookeeper服务   | zkServer.sh stop                |\n| 启动zookeeper客户端 | zkCli.sh -server 127.0.0.1:2181 |\n| 退出zookeeper客户端 | quit                            |\n\n###  基本操作\n| 功能说明                                  | 命令脚本                      |\n| ----------------------------------------- | ----------------------------- |\n| 当前znode中所包含的内容                   | ls /                          |\n| 创建普通节点(前面是节点的路径，后面是值） | create /bigdata/flink \"flink\" |\n| 获取节点的值                              | get /bigdata                  |\n| 修改节点的值                              | set /bigdata/flink \"flinksql\" |\n| 删除节点                                  | delete /bigdata/flink         |\n| 递归删除节点                              | rmr /bigdata                  |\n\n### 四字母命令\n\n| 命令 | 功能说明                                                     | 例子                           |\n| ---- | ------------------------------------------------------------ | ------------------------------ |\n| conf | zk服务配置的详细信息                                         | echo conf \\| nc 127.0.0.1 2181 |\n| stat | 客户端与zk连接的简要信息                                     | 参考上面                       |\n| srvr | zk服务的详细信息                                             | 参考上面                       |\n| cons | 客户端与zk连接的详细信息                                     | 参考上面                       |\n| mntr | zk服务目前的性能状况                                         | 参考上面                       |\n| crst | 重置当前的所有连接、会话                                     | 参考上面                       |\n| dump | 列出未经处理的会话和连接信息                                 | 参考上面                       |\n| envi | 列出zk的版本信息、主机名称、Java版本、服务器名称等等         | 参考上面                       |\n| ruok | 测试服务器是否正在运行，如果在运行返回imok，否则返回空       | 参考上面                       |\n| srst | 重置Zookeeper的所有统计信息                                  | 参考上面                       |\n| wchs | 列出watch的总数，连接数                                      | 参考上面                       |\n| wchp | 列出所有watch的路径及sessionID                               | 参考上面                       |\n| mntr | 列出集群的关键性能数据，包括zk的版本、node数量、临时节点数等等 | 参考上面                       |\n\n\n---\n\n## Kafka\n**注:** 这里机器我只写一个。命令你们也可使用 ./bin/xx.sh (如：./bin/kafka-topics.sh) \n\n### 查看当前服务器中的所有topic\n~~~shell\nkafka-topics --zookeeper xxxxxx:2181 --list --exclude-internal \n\n说明：\n\nexclude-internal：排除kafka内部topic\n\n比如： --exclude-internal  --topic \"test_.*\"\n~~~\n### 创建topic\n\n~~~shell\nkafka-topics --zookeeper xxxxxx:2181  --create \n--replication-factor \n--partitions 1 \n--topic topic_name\n\n说明：\n\n--topic 定义topic名\n\n--replication-factor  定义副本数\n\n--partitions  定义分区数\n~~~\n\n### 删除topic\n\n**注意:** 需要server.properties中设置delete.topic.enable=true否则只是标记删除\n~~~shell\nkafka-topics --zookeeper xxxxxx:2181 --delete --topic topic_name\n~~~\n\n### 生产者\n~~~shell\nkafka-console-producer --broker-list xxxxxx:9092 --topic topic_name\n\n可加：--property parse.key=true（有key消息）\n~~~\n### 消费者\n~~~shell\nkafka-console-consumer --bootstrap-server xxxxxx:9092 --topic topic_name\n\n注：可选\n\n--from-beginning：会把主题中以往所有的数据都读取出来\n\n--whitelist '.*' ：消费所有的topic\n\n--property print.key=true：显示key进行消费\n\n--partition 0：指定分区消费\n\n--offset：指定起始偏移量消费\n~~~\n\n### 查看某个Topic的详情\n~~~shell\nkafka-topics --zookeeper xxxxxx:2181 --describe --topic topic_name\n~~~\n\n### 修改分区数 \n~~~shell\nkafka-topics --zookeeper xxxxxx:2181 --alter --topic topic_name --partitions 6\n~~~\n\n### 查看某个消费者组信息\n~~~shell\nkafka-consumer-groups --bootstrap-server  xxxxxx:9092  --describe --group group_name \n~~~\n### 删除消费者组\n~~~shell\nkafka-consumer-groups --bootstrap-server  xxxxxx:9092  ---delete --group group_name \n~~~\n\n### 重置offset\n~~~shell\nkafka-consumer-groups --bootstrap-server  xxxxxx:9092  --group group_name\n\n--reset-offsets --all-topics --to-latest --execute \n~~~\n\n### leader重新选举\n\n指定Topic指定分区用重新PREFERRED：优先副本策略 进行Leader重选举\n~~~shell\nkafka-leader-election --bootstrap-server xxxxxx:9092 \n--topic topic_name --election-type PREFERRED --partition 0\n~~~\n\n所有Topic所有分区用重新PREFERRED：优先副本策略 进行Leader重选举\n~~~shell\nkafka-leader-election --bootstrap-server xxxxxx:9092 \n--election-type preferred  --all-topic-partitions\n~~~\n\n### 查询kafka版本信息\n~~~shell\nkafka-configs --bootstrap-server xxxxxx:9092\n--describe --version\n~~~\n### 增删改配置\n\n| 功能说明      | 参数                                                         |\n| ------------- | ------------------------------------------------------------ |\n| 选择类型      | --entity-type (topics/clients/users/brokers/broker- loggers) |\n| 类型名称      | --entity-name                                                |\n| 删除配置      | --delete-config k1=v1,k2=v2                                  |\n| 添加/修改配置 | --add-config k1,k2                                           |\n\ntopic添加/修改动态配置\n~~~shell\nkafka-configs --bootstrap-server xxxxxx:9092\n--alter --entity-type topics --entity-name topic_name \n--add-config file.delete.delay.ms=222222,retention.ms=999999\n~~~\n\ntopic删除动态配置\n~~~shell\nkafka-configs --bootstrap-server xxxxxx:9092 \n--alter --entity-type topics --entity-name topic_name \n--delete-config file.delete.delay.ms,retention.ms\n~~~\n\n### 持续批量拉取消息\n\n单次最大消费10条消息(不加参数意为持续消费)\n~~~shell\nkafka-verifiable-consumer --bootstrap-server xxxxxx:9092 \n--group group_name\n--topic topic_name --max-messages 10\n~~~\n\n### 删除指定分区的消息\n\n删除指定topic的某个分区的消息删除至offset为1024\n\njson文件offset-json-file.json\n~~~\n{\n    \"partitions\": [\n        {\n            \"topic\": \"topic_name\",\n            \"partition\": 0,\n            \"offset\": 1024\n        }\n    ],\n    \"version\": 1\n}\n~~~\n\n~~~shell\nkafka-delete-records --bootstrap-server xxxxxx:9092 \n--offset-json-file offset-json-file.json\n~~~\n\n### 查看Broker磁盘信息\n\n查询指定topic磁盘信息\n~~~shell\nkafka-log-dirs --bootstrap-server xxxxxx:9090 \n--describe --topic-list topic1,topic2\n~~~\n\n查询指定Broker磁盘信息\n~~~shell\nkafka-log-dirs --bootstrap-server xxxxxx:9090 \n--describe --topic-list topic1 --broker-list 0\n~~~\n\n## Hive\n### 启动类\n| 功能说明            | 命令                                           |\n| ------------------- | ---------------------------------------------- |\n| 启动hiveserver2服务 | bin/hiveserver2                                |\n| 启动beeline         | bin/beeline                                    |\n| 连接hiveserver2     | beeline> !connect jdbc:hive2://hadoop102:10000 |\n| metastroe服务       | bin/hive --service metastore                   |\n\nhive 启动元数据服务（metastore和hiveserver2）和优雅关闭脚本\n~~~\n启动： hive.sh start\n关闭： hive.sh stop\n重启： hive.sh restart\n状态： hive.sh status\n~~~\n脚本如下\n~~~\n#!/bin/bash\nHIVE_LOG_DIR=$HIVE_HOME/logs\n\nmkdir -p $HIVE_LOG_DIR\n\n#检查进程是否运行正常，参数1为进程名，参数2为进程端口\nfunction check_process()\n{\n    pid=$(ps -ef 2>/dev/null | grep -v grep | grep -i $1 | awk '{print $2}')\n    ppid=$(netstat -nltp 2>/dev/null | grep $2 | awk '{print $7}' | cut -d '/' -f 1)\n    echo $pid\n    [[ \"$pid\" =~ \"$ppid\" ]] && [ \"$ppid\" ] && return 0 || return 1\n}\n\nfunction hive_start()\n{\n    metapid=$(check_process HiveMetastore 9083)\n    cmd=\"nohup hive --service metastore >$HIVE_LOG_DIR/metastore.log 2>&1 &\"\n    cmd=$cmd\" sleep4; hdfs dfsadmin -safemode wait >/dev/null 2>&1\"\n    [ -z \"$metapid\" ] && eval $cmd || echo \"Metastroe服务已启动\"\n    server2pid=$(check_process HiveServer2 10000)\n    cmd=\"nohup hive --service hiveserver2 >$HIVE_LOG_DIR/hiveServer2.log 2>&1 &\"\n    [ -z \"$server2pid\" ] && eval $cmd || echo \"HiveServer2服务已启动\"\n}\n\nfunction hive_stop()\n{\n    metapid=$(check_process HiveMetastore 9083)\n    [ \"$metapid\" ] && kill $metapid || echo \"Metastore服务未启动\"\n    server2pid=$(check_process HiveServer2 10000)\n    [ \"$server2pid\" ] && kill $server2pid || echo \"HiveServer2服务未启动\"\n}\n\ncase $1 in\n\"start\")\n    hive_start\n    ;;\n\"stop\")\n    hive_stop\n    ;;\n\"restart\")\n    hive_stop\n    sleep 2\n    hive_start\n    ;;\n\"status\")\n    check_process HiveMetastore 9083 >/dev/null && echo \"Metastore服务运行正常\" || echo \"Metastore服务运行异常\"\n    check_process HiveServer2 10000 >/dev/null && echo \"HiveServer2服务运行正常\" || echo \"HiveServer2服务运行异常\"\n    ;;\n*)\n    echo Invalid Args!\n    echo 'Usage: '$(basename $0)' start|stop|restart|status'\n    ;;\nesac\n~~~\n\n### 常用交互命令\n| 功能说明                    | 命令                  |\n| --------------------------- | --------------------- |\n| 不进入hive的交互窗口执行sql | bin/hive -e \"sql语句\" |\n| 执行脚本中sql语句           | bin/hive -f hive.sql  |\n| 退出hive窗口                | exit 或 quit          |\n| 命令窗口中查看hdfs文件系统  | dfs -ls /             |\n| 命令窗口中查看hdfs文件系统  | ! ls /data/h          |\n\n### SQL类(特殊的)\n| 说明                   | 语句                                                         |\n| ---------------------- | ------------------------------------------------------------ |\n| 查看hive中的所有数据库 | show databases                                               |\n| 用default数据库        | use default                                                  |\n| 查询表结构             | desc table_name                                              |\n| 查看数据库             | show databases                                               |\n| 重命名表名             | alter table table1 rename to table2                          |\n| 修改表中字段           | alter table table_name change name user_name String          |\n| 修改字段类型           | alter table table_name change salary salary Double           |\n| 创建外部表             | create external table ....                                   |\n| 查询外部表信息         | desc formatted outsidetable                                  |\n| 创建视图               | create view view_name as select * from table_name .....      |\n| 添加数据               | load data local inpath 'xxx'  overwrite into table table_name partition(day='2021-12-01') |\n\n### 内置函数\n\n（1） NVL\n\n给值为NULL的数据赋值，它的格式是NVL( value，default_value)。它的功能是如果value为NULL，则NVL函数返回default_value的值，否则返回value的值，如果两个参数都为NULL ，则返回NULL\n\n~~~\nselect nvl(column, 0) from xxx；\n~~~\n\n（2）行转列\n\n| 函数                                 | 描述                                                         |\n| ------------------------------------ | ------------------------------------------------------------ |\n| CONCAT(string A/col, string B/col…)  | 返回输入字符串连接后的结果，支持任意个输入字符串             |\n| CONCAT_WS(separator, str1, str2,...) | 第一个参数参数间的分隔符，如果分隔符是 NULL，返回值也将为 NULL。这个函数会跳过分隔符参数后的任何 NULL 和空字符串。分隔符将被加到被连接的字符串之间。 |\n| COLLECT_SET(col)                     | 将某字段的值进行去重汇总，产生array类型字段                  |\n| COLLECT_LIST(col)                    | 函数只接受基本数据类型，它的主要作用是将某字段的值进行不去重汇总，产生array类型字段。 |\n\n（3）列转行(一列转多行)\n\n**Split(str, separator)：** 将字符串按照后面的分隔符切割，转换成字符array。\n\n**EXPLODE(col)：**\n将hive一列中复杂的array或者map结构拆分成多行。\n\n**LATERAL VIEW**\n~~~\n用法：\n\nLATERAL VIEW udtf(expression) tableAlias AS columnAlias\n~~~\n解释：lateral view用于和split, explode等UDTF一起使用，它能够将一行数据拆成多行数据，在此基础上可以对拆分后的数据进行聚合。\n\nlateral view首先为原始表的每行调用UDTF，UDTF会把一行拆分成一或者多行，lateral view再把结果组合，产生一个支持别名表的虚拟表。\n\n**准备数据源测试**\n\n| movie     | category       |\n| --------- | -------------- |\n| 《功勋》  | 记录,剧情      |\n| 《战狼2》 | 战争,动作,灾难 |\n\n**SQL**\n\n~~~\nSELECT movie,category_name \nFROM movie_info \nlateral VIEW\nexplode(split(category,\",\")) movie_info_tmp  AS category_name ;\n\n~~~\n\n**测试结果**\n~~~\n《功勋》      记录\n《功勋》      剧情\n《战狼2》     战争\n《战狼2》     动作\n《战狼2》     灾难\n\n~~~\n\n### 窗口函数\n\n（1）OVER()\n\n定分析函数工作的数据窗口大小，这个数据窗口大小可能会随着行的变而变化。\n\n（2）CURRENT ROW（当前行）\n\n~~~\nn PRECEDING：往前n行数据\n\nn FOLLOWING：往后n行数据\n~~~\n\n（3）UNBOUNDED（无边界）\n\n~~~\nUNBOUNDED PRECEDING 前无边界，表示从前面的起点\n\nUNBOUNDED FOLLOWING后无边界，表示到后面的终点\n~~~\n\n**SQL案例：由起点到当前行的聚合**\n\n~~~\nselect \n    sum(money) over(partition by user_id order by pay_time rows between UNBOUNDED PRECEDING and current row) \nfrom or_order;\n~~~\n\n**SQL案例：当前行和前面一行做聚合**\n\n~~~\nselect \n    sum(money) over(partition by user_id order by pay_time rows between 1 PRECEDING and current row) \nfrom or_order;\n~~~\n\n**SQL案例：当前行和前面一行和后一行做聚合**\n\n~~~\nselect \n    sum(money) over(partition by user_id order by pay_time rows between 1 PRECEDING AND 1 FOLLOWING )\nfrom or_order;\n~~~\n\n**SQL案例：当前行及后面所有行**\n~~~\nselect \n    sum(money) over(partition by user_id order by pay_time rows between current row and UNBOUNDED FOLLOWING  )\nfrom or_order;\n~~~\n\n（4）LAG(col,n,default_val)\n\n往前第n行数据，没有的话default_val\n\n（5）LEAD(col,n, default_val)\n\n往后第n行数据，没有的话default_val\n\n**SQL案例：查询用户购买明细以及上次的购买时间和下次购买时间**\n\n~~~\nselect \n\tuser_id,,pay_time,money,\n\t\n\tlag(pay_time,1,'1970-01-01') over(PARTITION by name order by pay_time) prev_time,\n\t\n\tlead(pay_time,1,'1970-01-01') over(PARTITION by name order by pay_time) next_time\nfrom or_order;\n\n~~~\n\n（6）FIRST_VALUE(col,true/false)\n\n当前窗口下的第一个值，第二个参数为true，跳过空值。\n\n（7）LAST_VALUE (col,true/false)\n\n当前窗口下的最后一个值，第二个参数为true，跳过空值。\n\n**SQL案例：查询用户每个月第一次的购买时间 和 每个月的最后一次购买时间**\n\n~~~\nselect\n\tFIRST_VALUE(pay_time) \n\t    over(\n\t        partition by user_id,month(pay_time) order by pay_time \n\t        rows between UNBOUNDED PRECEDING and UNBOUNDED FOLLOWING\n\t        ) first_time,\n\t\n\tLAST_VALUE(pay_time) \n\t    over(partition by user_id,month(pay_time) order by pay_time rows between UNBOUNDED PRECEDING and UNBOUNDED FOLLOWING\n\t    ) last_time\nfrom or_order;\n\n~~~\n\n\n（8）NTILE(n)\n\n把有序窗口的行分发到指定数据的组中，各个组有编号，编号从1开始，对于每一行，NTILE返回此行所属的组的编号。（用于将分组数据按照顺序切分成n片，返回当前切片值）\n\n**SQL案例：查询前25%时间的订单信息**\n\n~~~\nselect * from (\n    select User_id,pay_time,money,\n    \n    ntile(4) over(order by pay_time) sorted\n    \n    from or_order\n) t\nwhere sorted = 1;\n\n~~~\n\n### 4个By\n（1）Order By\n\n全局排序，只有一个Reducer。\n\n（2）Sort By\n\n分区内有序。\n\n（3）Distrbute By\n\n类似MR中Partition，进行分区，结合sort by使用。\n\n（4） Cluster By\n\n当Distribute by和Sorts by字段相同时，可以使用Cluster by方式。Cluster by除了具有Distribute by的功能外还兼具Sort by的功能。但是排序只能是升序排序，不能指定排序规则为ASC或者DESC。\n\n在生产环境中Order By用的比较少，容易导致OOM。\n\n在生产环境中Sort By+ Distrbute By用的多。\n\n### 排序函数\n\n（1）RANK() \n\n排序相同时会重复，总数不会变\n~~~\n1\n1\n3\n3\n5\n~~~\n（2）DENSE_RANK() \n\n排序相同时会重复，总数会减少\n~~~\n1\n1\n2\n2\n3\n~~~\n（3）ROW_NUMBER()\n\n会根据顺序计算\n~~~\n1\n2\n3\n4\n5\n~~~\n\n### 日期函数\ndatediff：返回结束日期减去开始日期的天数\n~~~\ndatediff(string enddate, string startdate) \n\nselect datediff('2021-11-20','2021-11-22') \n~~~\n\ndate_add：返回开始日期startdate增加days天后的日期\n~~~\ndate_add(string startdate, int days) \n\nselect date_add('2021-11-20',3) \n~~~\ndate_sub：返回开始日期startdate减少days天后的日期\n\n~~~\ndate_sub (string startdate, int days) \n\nselect date_sub('2021-11-22',3)\n~~~\n\n## Impala(时间处理，可类比到hive可用)\n\n### 1. 获取当前时间\ntimestamp 样式2021-12-10 04:36:48.147046000\n\nbigint 样式 1639110956\n\n\n| 函数/方法           | 输出类型  | 说明/样式                    |\n| ------------------- | --------- | ---------------------------- |\n| current_timestamp() | timestamp | 所在时区的当前时间           |\n| now()               | timestamp | 所在时区的当前时间           |\n| unix_timestamp()    | bigint    | 所在时区的当前时间戳         |\n| utc_timestamp       | timestamp | UTC时区的当前时间            |\n| timeofday()         | string    | Fri Dec 10 12:39:46 2021 CST |\n\n### 2. 获取时间指定单位函数\n| 序号 | 函数/方法                     | 输出类型       | 说明/样式                                                 |\n| ---- | ----------------------------- | -------------- | --------------------------------------------------------- |\n| 1    | year(timestamp/date)          | int            | 获取年 yyyy                                               |\n| 2    | quarter(timestamp/date)       | int            | 获取季节（1,2,3,4）                                       |\n| 3    | month(timestamp/date)         | int            | 获取月                                                    |\n| 4    | monthname(timestamp/date)     | string         | 获取月份名称 December                                     |\n| 5    | week(timestamp/date)          | int            | 获取周（1-53）                                            |\n| 6    | weekofyear(timestamp/date)    | int            | 获取周（1-53）                                            |\n| 7    | dayofweek(timestamp/date)     | int            | 获取天（本周第多少天,周日算第一天）                       |\n| 8    | dayname(timestamp/date)       | string         | 获取天（星期几）Friday                                    |\n| 9    | next_day(timestamp/date, 10   | day(string))   | timestamp/date                                            |\n| 11   | day(timestamp/date)           | int            | 获取天（本月第多少天）                                    |\n| 12   | dayofmonth(timestamp/date)    | int            | 获取天（本月第多少天）                                    |\n| 13   | last_day(timestamp/date)      | timestamp/date | 获取天（本月的最后一天日期）                              |\n| 14   | dayofyear(timestamp/date)     | int            | 获取天（本年第多少天）                                    |\n| 15   | hour(timestamp/date)          | int            | 获取小时                                                  |\n| 16   | minute(timestamp date)        | int            | 获取分钟                                                  |\n| 17   | second(timestamp date)        | int            | 获取秒                                                    |\n| 18   | millisecond(timestamp date)   | int            | 获取毫秒                                                  |\n| 19   | extract (YEAR FROM timestamp) | bigint         | 获取参数指定的时间单位 YEAR MONTH DAY  HOUR MINUTE SECOND |\n| 20   | date_part('year',timestamp)   | bigint         | 获取参数指定的时间单位 YEAR MONTH DAY  HOUR MINUTE SECOND |\n| 21   | trunc(timestamp/date,unit)    | timestamp/date | 获取截断为指定单位的时间                                  |\n\n\n| unit                                 | 截取说明                               |\n| ------------------------------------ | -------------------------------------- |\n| SYYYY，YYYY，YEAR，SYEAR，YYY，YY，Y | 年                                     |\n| Q                                    | 季节                                   |\n| MONTH，MON，MM，RM                   | 月                                     |\n| WW                                   | 最近的日期是与一年中的第一天相同的日期 |\n| W                                    | 最近的日期是与该月的第一天相同的星期几 |\n| DDD，DD，J                           | 天                                     |\n| DAY，DY，D                           | 星期几（星期一）的开始                 |\n| HH，HH12，HH24                       | 小时                                   |\n| MI                                   | 分钟                                   |\n\n### 3. 时间比较函数\n| 序号 | 函数/方法                                 | 输出类型 | 说明/样式                             |\n| ---- | ----------------------------------------- | -------- | ------------------------------------- |\n| 1    | datediff(timestamp enddate,startdate)     | int      | 返回endDate比startDate多多少天        |\n| 2    | int_months_between(timestamp t1,t2)       | int      | 返回两个日期相差的整数月份个数        |\n| 3    | months_between(timestamp t1,t2)           | double   | 返回浮点数的月数相差的数              |\n| 4    | date_cmp(DATE date1, DATE date2)          | int      | 比较是否相等，返回-1,0,1,null四种数值 |\n| 5    | timestamp_cmp(timestamp t1，timestamp t2) | int      | 比较是否相等，返回-1,0,1,null四种数值 |\n\n### 4. 时间格式转换函数\n| 序号 | 函数/方法                                          | 输出类型  | 说明/样式                                |\n| ---- | -------------------------------------------------- | --------- | ---------------------------------------- |\n| 1    | to_date(timestamp date)                            | string    | 返回时间戳对应的date                     |\n| 2    | to_timestamp(bigint unixtime)                      | timestamp | 返回整数对应的timestamp值                |\n| 3    | to_timestamp(string date，string pattern)          | timestamp | 返回字符串对应的timestamp值              |\n| 4    | to_utc_timestamp(timestamp t，string timezone)     | timestamp | 指定时区的时间戳转化为UTC时区的时间戳    |\n| 5    | from_timestamp(timestamp t，string pattern)        | string    | 把timestamp按照pattern进行格式化         |\n| 6    | from_timestamp(string date，string pattern)        | string    | 把date按照pattern进行格式化              |\n| 7    | from_unixtime(bigint unixtime)                     | string    | 把时间戳秒数转化为本地地区中的字符串     |\n| 8    | from_unixtime(bigint unixtime，string pattern）    | string    | 时间戳转化为本地时区字符串，pattern格式  |\n| 9    | from_utc_timestamp（timestamp t，string timezone） | timestamp | UTC时区指定时间戳转化为指定时区时间戳    |\n| 10   | unix_timestamp(string datetime)                    | bigint    | 把string类型的date或日期转化成时间戳Unix |\n| 11   | unix_timestamp(timestamp datetime)                 | bigint    | 把string类型的timestamp转化成时间戳Unix  |\n| 12   | unix_timestamp(string datetime，string pattern)    | bigint    | 日期按pattern转化成时间戳Unix            |\n\n\n### 5. 时间计算函数\n| 序号 | 函数/方法                                               | 输出类型       | 说明/样式                      |\n| ---- | ------------------------------------------------------- | -------------- | ------------------------------ |\n| 1    | years_add(timestamp/date date, int/bigint years)        | timestamp/date | 增加指定年数                   |\n| 2    | years_sub(timestamp/date date, int/bigint years)        | timestamp/date | 减少指定年数                   |\n| 3    | months_add(timestamp/date date, int/bigint months)      | timestamp/date | 增加指定月数                   |\n| 4    | months_sub(timestamp/date date, int/bigint months)      | timestamp/date | 减少指定月数                   |\n| 5    | add_months(timestamp/date date, int/bigint months)      | timestamp/date | 增加指定月数                   |\n| 6    | weeks_add(timestamp/date date, int/bigint weeks)        | timestamp/date | 增加指定周数                   |\n| 7    | weeks_sub(timestamp/date date, int/bigint weeks)        | timestamp/date | 减少指定周数                   |\n| 8    | days_add(timestamp/date startdate, int/bigint days)     | timestamp/date | 增加指定天数                   |\n| 9    | days_sub(timestamp/date startdate, int/bigint days)     | timestamp/date | 减少指定天数                   |\n| 10   | date_add(timestamp/date startdate, int/bigint days)     | timestamp/date | 增加指定天数                   |\n| 11   | date_sub(timestamp/date startdate, int/bigint days)     | timestamp/date | 减少指定天数                   |\n| 12   | adddate(timestamp/date startdate, int/int days)         | timestamp/date | 增加指定天数                   |\n| 13   | subdate(timestamp/date startdate，bigint/int days)      | timestamp/date | 减少指定天数                   |\n| 14   | hours_add(timestamp date, int/bigint hours)             | timestamp      | 增加指定小时                   |\n| 15   | hours_sub(timestamp date, int/bigint hours)             | timestamp      | 减少指定小时                   |\n| 16   | minutes_add(timestamp date, int/bigint minutes)         | timestamp      | 增加指定分钟                   |\n| 17   | minutes_sub(timestamp date, int/bigint minutes)         | timestamp      | 减少指定分钟                   |\n| 18   | seconds_add(timestamp date, int/bigint seconds)         | timestamp      | 增加指定秒数                   |\n| 19   | seconds_sub(timestamp date, int/bigint seconds)         | timestamp      | 减少指定秒数                   |\n| 20   | milliseconds_add(timestamp t, int/bigint s）            | timestamp      | 增加指定毫秒数                 |\n| 21   | milliseconds_sub(timestamp t, int/bigint s）            | timestamp      | 减少指定毫秒数                 |\n| 22   | microseconds_add(timestamp t, int/bigint s)             | timestamp      | 增加指定微秒数                 |\n| 23   | microseconds_sub(timestamp t, int/bigint s)             | timestamp      | 减少指定微秒数                 |\n| 24   | nanoseconds_add(timestamp t, int/bigint s）             | timestamp      | 增加指定纳秒数                 |\n| 25   | nanoseconds_sub(timestamp t, int/bigint s）             | timestamp      | 减少指定纳秒数                 |\n| 26   | date_add(timestamp/date startdate, interval_expression) | timestamp/date | 使用参数计算日期增量值（增加） |\n| 27   | date_sub(timestamp/date startdate, interval_expression) | timestamp/date | 使用参数计算日期增量值（减少） |\n---\n\n\n## Redis\n### 启动类\n\n### key\n| 命令                   | 功能说明                                     |\n| ---------------------- | -------------------------------------------- |\n| keys  *                | 查看当前库的所有键                           |\n| exists <key>           | 判断某个键是否存在                           |\n| type <key>             | 查看键的类型                                 |\n| del <key>              | 删除某个键                                   |\n| expire <key> <seconds> | 为键值设置过期时间，单位秒                   |\n| ttl <key>              | 查看还有多久过期,-1表示永不过期,-2表示已过期 |\n| dbsize                 | 查看当前数据库中key的数量                    |\n| flushdb                | 清空当前库                                   |\n| Flushall               | 通杀全部库                                   |\n\n### String\n| 命令                                   | 功能说明                                                     |\n| -------------------------------------- | ------------------------------------------------------------ |\n| get <key>                              | 查询对应键值                                                 |\n| set <key> <value>                      | 添加键值对                                                   |\n| append <key> <value>                   | 将给定的<value>追加到原值的末尾                              |\n| strlen <key>                           | 获取值的长度                                                 |\n| setnx <key> <value>                    | 只有在key 不存在时设置key的值                                |\n| incr <key>                             | 将key中存储的数字值增1只能对数字值操作，如果为空，新增值为1  |\n| decr <key>                             | 将key中存储的数字值减1只能对数字之操作，如果为空,新增值为-1  |\n| incrby /decrby <key> 步长              | 将key中存储的数字值增减，自定义步长                          |\n| mset <key1> <value1> <key2> <value2>   | 同时设置一个或多个key-value对                                |\n| mget <key1> <key2>  <key3>             | 同时获取一个或多个value                                      |\n| msetnx <key1> <value1> <key2> <value2> | 同时设置一个或多个key-value对，当且仅当所有给定的key都不存在 |\n| getrange <key> <起始位置> <结束位置>   | 获得值的范围,类似java中的substring                           |\n| setrange <key> <起始位置> <value>      | 用<value>覆盖<key>所存储的字符串值，从<起始位置>开始         |\n| setex <key> <过期时间> <value>         | 设置键值的同时，设置过去时间，单位秒                         |\n| getset <key> <value>                   | 以新换旧,设置了新值的同时获取旧值                            |\n\n### List\n| 命令                                      | 功能说明                                       |\n| ----------------------------------------- | ---------------------------------------------- |\n| lpush/rpush  <key>  <value1>  <value2>    | 从左边/右边插入一个或多个值。                  |\n| lpop/rpop  <key>                          | 从左边/右边吐出一个值。值在键在，值光键亡。    |\n| rpoplpush  <key1>  <key2>                 | 从<key1>列表右边吐出一个值，插到<key2>列表左边 |\n| lrange <key> <start> <stop>               | 按照索引下标获得元素(从左到右)                 |\n| lindex <key> <index>                      | 按照索引下标获得元素(从左到右)                 |\n| llen <key>                                | 获得列表长度                                   |\n| linsert <key>  before <value>  <newvalue> | 在<value>的后面插入<newvalue> 插入值           |\n| lrem <key> <n>  <value>                   | 从左边删除n个value(从左到右)                   |\n\n### Set\n| 命令                                | 功能说明                                                     |\n| ----------------------------------- | ------------------------------------------------------------ |\n| sadd <key>  <value1>  <value2> .... | 将一个或多个 member 元素加入到集合 key 当中，已经存在于集合的 member 元素将被忽略。 |\n| smembers <key>                      | 取出该集合的所有值。                                         |\n| sismember <key>  <value>            | 判断集合<key>是否为含有该<value>值，有返回1，没有返回0       |\n| scard  <key>                        | 返回该集合的元素个数。                                       |\n| srem <key> <value1> <value2> ....   | 删除集合中的某个元素。                                       |\n| spop <key>                          | 随机从该集合中吐出一个值。                                   |\n| srandmember <key> <n>               | 随机从该集合中取出n个值。不会从集合中删除                    |\n| sinter <key1> <key2>                | 返回两个集合的交集元素。                                     |\n| sunion <key1> <key2>                | 返回两个集合的并集元素。                                     |\n| sdiff <key1> <key2>                 | 返回两个集合的差集元素。                                     |\n\n### Hash\n| 命令                                                 | 功能说明                                                     |\n| ---------------------------------------------------- | ------------------------------------------------------------ |\n| hset <key>  <field>  <value>                         | 给<key>集合中的  <field>键赋值<value>                        |\n| hget <key1>  <field>                                 | 从<key1>集合<field> 取出 value                               |\n| hmset <key1>  <field1> <value1> <field2> <value2>... | 批量设置hash的值                                             |\n| hexists key  <field>                                 | 查看哈希表 key 中，给定域 field 是否存在。                   |\n| hkeys <key>                                          | 列出该hash集合的所有field                                    |\n| hvals <key>                                          | 列出该hash集合的所有value                                    |\n| hincrby <key> <field>  <increment>                   | 为哈希表 key 中的域 field 的值加上增量 increment             |\n| hsetnx <key>  <field> <value>                        | 将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在 |\n\n### zset(Sorted set)\n| 命令                                                         | 功能说明                                                     |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| zadd  <key> <score1> <value1>  <score2> <value2>...          | 将一个或多个 member 元素及其 score 值加入到有序集 key 当中   |\n| zrange <key>  <start> <stop>  [WITHSCORES]                   | 返回有序集 key 中，下标在<start> <stop>之间的元素带WITHSCORES，可以让分数一起和值返回到结果集。 |\n| zrangebyscore key min max [withscores] [limit offset count]  | 返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。 |\n| zrevrangebyscore key max min [withscores] [limit offset count] | 同上，改为从大到小排列。                                     |\n| zincrby <key> <increment> <value>                            | 为元素的score加上增量                                        |\n| zrem  <key>  <value>                                         | 删除该集合下，指定值的元素                                   |\n| zcount <key>  <min>  <max>                                   | 统计该集合，分数区间内的元素个数                             |\n| zrank <key>  <value>                                         | 返回该值在集合中的排名，从0开始。                            |\n\n\n---\n\n\n## Flink\n### 启动\n~~~\n./start-cluster.sh \n~~~\n\n### run\n~~~\n./bin/flink run [OPTIONS]\n\n./bin/flink run -m yarn-cluster -c com.wang.flink.WordCount /opt/app/WordCount.jar\n~~~\n\n| OPTIONS | 功能说明                                               |\n| ------- | ------------------------------------------------------ |\n| -d      | detached 是否使用分离模式                              |\n| -m      | jobmanager 指定提交的jobmanager                        |\n| -yat    | –yarnapplicationType 设置yarn应用的类型                |\n| -yD     | 使用给定属性的值                                       |\n| -yd     | –yarndetached 使用yarn分离模式                         |\n| -yh     | –yarnhelp yarn session的帮助                           |\n| -yid    | –yarnapplicationId 挂到正在运行的yarnsession上         |\n| -yj     | –yarnjar Flink jar文件的路径                           |\n| -yjm    | –yarnjobManagerMemory jobmanager的内存(单位M)          |\n| -ynl    | –yarnnodeLabel 指定 YARN 应用程序 YARN 节点标签        |\n| -ynm    | –yarnname 自定义yarn应用名称                           |\n| -yq     | –yarnquery 显示yarn的可用资源                          |\n| -yqu    | –yarnqueue 指定yarn队列                                |\n| -ys     | –yarnslots 指定每个taskmanager的slots数                |\n| -yt     | yarnship 在指定目录中传输文件                          |\n| -ytm    | –yarntaskManagerMemory 每个taskmanager的内存           |\n| -yz     | –yarnzookeeperNamespace 用来创建ha的zk子路径的命名空间 |\n| -z      | –zookeeperNamespace 用来创建ha的zk子路径的命名空间     |\n| -p      | 并行度                                                 |\n| -yn     | 需要分配的YARN容器个数(=任务管理器的数量)              |\n\n### info\n~~~\n./bin/flink info [OPTIONS]\n~~~\n| OPTIONS | 功能说明         |\n| ------- | ---------------- |\n| -c      | 程序进入点，主类 |\n| -p      | 并行度           |\n\n\n### list\n~~~\n./bin/flink list [OPTIONS]\n~~~\n| OPTIONS | 功能说明                                                 |\n| ------- | -------------------------------------------------------- |\n| -a      | –all 显示所有应用和对应的job id                          |\n| -r      | –running 显示正在运行的应用和job id                      |\n| -s      | –scheduled 显示调度的应用和job id                        |\n| -m      | –jobmanager 指定连接的jobmanager                         |\n| -yid    | –yarnapplicationId 挂到指定的yarn id对应的yarn session上 |\n| -z      | –zookeeperNamespace 用来创建ha的zk子路径的命名空间       |\n\n### stop\n~~~\n./bin/flink stop  [OPTIONS] <Job ID>\n~~~\n| OPTIONS | 功能说明                                                 |\n| ------- | -------------------------------------------------------- |\n| -d      | 在采取保存点和停止管道之前，发送MAX_WATERMARK            |\n| -p      | savepointPath 保存点的路径 'xxxxx'                       |\n| -m      | –jobmanager 指定连接的jobmanager                         |\n| -yid    | –yarnapplicationId 挂到指定的yarn id对应的yarn session上 |\n| -z      | –zookeeperNamespace 用来创建ha的zk子路径的命名空间       |\n\n### cancel(弱化)\n~~~\n./bin/flink cancel  [OPTIONS] <Job ID>\n~~~\n| OPTIONS | 功能说明                                                 |\n| ------- | -------------------------------------------------------- |\n| -s      | 使用 \"stop \"代替                                         |\n| -D      | 允许指定多个通用配置选项                                 |\n| -m      | 要连接的JobManager的地址                                 |\n| -yid    | –yarnapplicationId 挂到指定的yarn id对应的yarn session上 |\n| -z      | –zookeeperNamespace 用来创建ha的zk子路径的命名空间       |\n\n### savepoint\n~~~\n./bin/flink savepoint  [OPTIONS] <Job ID>\n~~~\n| OPTIONS | 功能说明                                                 |\n| ------- | -------------------------------------------------------- |\n| -d      | 要处理的保存点的路径                                     |\n| -j      | Flink程序的JAR文件                                       |\n| -m      | 要连接的JobManager的地址                                 |\n| -yid    | –yarnapplicationId 挂到指定的yarn id对应的yarn session上 |\n| -z      | –zookeeperNamespace 用来创建ha的zk子路径的命名空间       |","source":"_posts/大数据常用命令.md","raw":"---\ntitle: 常用linux命令\ndate: 2022-01-19 16:58:24\ntags: linux\ncategories: 运维 linux\n---\n## Linux（vi/vim）\n### 一般模式\n| 语法          | 功能描述                      |\n| ------------- | ----------------------------- |\n| yy            | 复制光标当前一行              |\n| y数字y        | 复制一段（从第几行到第几行）  |\n| p             | 箭头移动到目的行粘贴          |\n| u             | 撤销上一步                    |\n| dd            | 删除光标当前行                |\n| d数字d        | 删除光标（含）后多少行        |\n| x             | 删除一个字母，相当于del       |\n| X             | 删除一个字母，相当于Backspace |\n| yw            | 复制一个词                    |\n| dw            | 删除一个词                    |\n| shift+^       | 移动到行头                    |\n| shift+$       | 移动到行尾                    |\n| 1+shift+g     | 移动到页头，数字              |\n| shift+g       | 移动到页尾                    |\n| 数字N+shift+g | 移动到目标行                  |\n\n### 编辑模式\n| 按键 | 功能               |\n| ---- | ------------------ |\n| i    | 当前光标前         |\n| a    | 当前光标后         |\n| o    | 当前光标行的下一行 |\n| I    | 光标所在行最前     |\n| A    | 光标所在行最后     |\n| O    | 当前光标行的上一行 |\n\n### 指令模式\n| 命令         | 功能                             |\n| ------------ | -------------------------------- |\n| :w           | 保存                             |\n| :q           | 退出                             |\n| :!           | 强制执行                         |\n| /要查找的词  | n 查找下一个，N 往上查找         |\n| ? 要查找的词 | n是查找上一个，shift+n是往下查找 |\n| :set nu      | 显示行号                         |\n| :set nonu    | 关闭行号                         |\n\n### 压缩和解压\n#### gzip/gunzip 压缩\n\n（1）只能压缩文件不能压缩目录\n\n（2）不保留原来的文件\n\ngzip压缩：gzip hello.txt\n\ngunzip解压缩文件：gunzip hello.txt.gz\n\n#### zip/unzip 压缩\n可以压缩目录且保留源文件\n\nzip压缩（压缩 1.txt 和2.txt，压缩后的名称为mypackage.zip）：zip hello.zip hello.txt world.txt\n\nunzip解压：unzip hello.zip\n\nunzip解压到指定目录：unzip hello.zip -d /opt\n\n#### tar 打包\ntar压缩多个文件：tar -zcvf hello.txt world.txt\n\ntar压缩目录：tar -zcvf hello.tar.gz opt/\n\ntar解压到当前目录：tar -zxvf hello.tar.gz\n\ntar解压到指定目录：tar -zxvf hello.tar.gz -C /opt\n\n### RPM\nRPM查询命令：rpm -qa |grep firefox\n\nRPM卸载命令：\n\nrpm -e xxxxxx\n\nrpm -e --nodeps xxxxxx（不检查依赖）\n\nRPM安装命令：\n\nrpm -ivh xxxxxx.rpm\n\nrpm -ivh --nodeps fxxxxxx.rpm（--nodeps，不检测依赖进度）\n\n| 选项     | 功能                     |\n| -------- | ------------------------ |\n| -i       | -i=install，安装         |\n| -v       | -v=verbose，显示详细信息 |\n| -h       | -h=hash，进度条          |\n| --nodeps | --nodeps，不检测依赖进度 |\n\n\n---\n\n## Shell\n### 输入/输出重定向\n| 命令            | 功能说明                                         |\n| --------------- | ------------------------------------------------ |\n| command > file  | 将输出重定向到 file                              |\n| command < file  | 将输入重定向到 file                              |\n| command >> file | 将输出以追加的方式重定向到 file                  |\n| n > file        | 将文件描述符为 n 的文件重定向到 file             |\n| n >> file       | 将文件描述符为 n 的文件以追加的方式重定向到 file |\n| n >& m          | 将输出文件 m 和 n 合并                           |\n| n <& m          | 将输入文件 m 和 n 合并                           |\n| << tag          | 将开始标记 tag 和结束标记 tag 之间的内容作为输入 |\n\n### 脚本编辑\n| 快捷方式 | 功能说明   |\n| -------- | ---------- |\n| shift    | 参数左移   |\n| $@       | 所有的参数 |\n| $#       | 参数的个数 |\n\n\n---\n\n## Hadoop\n### 启动类命令\n\n| 功能说明     | 命令脚本           |\n| ------------ | ------------------ |\n| 启动hdfs集群 | sbin/start-dfs.sh  |\n| 启动yarn     | sbin/start-yarn.sh |\n\n### hadoop fs/hdfs dfs 命令\n\n| 功能说明                                                     | 命令                                         |\n| ------------------------------------------------------------ | -------------------------------------------- |\n| 创建目录                                                     | hdfs dfs -mkdir -p /data/flink               |\n| 显示目录                                                     | hdfs dfs -ls /                               |\n| 从HDFS拷贝到本地                                             | hdfs dfs -copyToLocal /data/data.txt ./      |\n| 文件上传到集群(从本地)                                       | hhdfs dfs -copyFromLocal data.txt /          |\n| 文件下载                                                     | hdfs dfs -get /data/flink                    |\n| 删除集群的文件                                               | hdfs dfs -rm /data/flink                     |\n| 删除文件夹                                                   | hdfs dfs -rm -r -skipTrash /data             |\n| 从本地剪切粘贴到HDFS                                         | hdfs dfs  -moveFromLocal data.txt /data/     |\n| 追加一个文件到已经存在的文件末尾hdfs dfs -appendToFile data1.txt /data/data.txt |                                              |\n| 显示文件内容                                                 | hdfs dfs -cat data.txt                       |\n| 修改文件所属权限                                             | hdfs dfs  -chmod  777 xxx.sh                 |\n| 修改文件所属用户组                                           | hdfs dfs  -chown  root:root data.txt         |\n| 从HDFS的一个路径拷贝到HDFS的另一个路径                       | hdfs dfs -cp data.txt /data1.txt             |\n| 在HDFS目录中移动文件                                         | hdfs dfs -mv data.txt /opt/                  |\n| 合并下载多个文件                                             | hdfs dfs  -getmerge /data/* ./data_merge.txt |\n| hadoop fs -put                                               | 等同于copyFromLocal                          |\n| 显示一个文件的末尾                                           | hdfs dfs -tail data.txt                      |\n| 删除文件或文件夹                                             | hdfs dfs -rm /data/data.txt                  |\n| 删除空目录                                                   | hdfs dfs -rmdir /data                        |\n| 统计文件夹的大小信息                                         | hdfs dfs -s -h /data                         |\n| 统计文件夹下的文件大小信息                                   | hdfs dfs  -h /data                           |\n| 设置HDFS中文件的副本数量                                     | hdfs dfs -setrep 3 /data/data.txt            |\n\n\n### yarn命令\n| 功能说明                   | 命令                           |\n| -------------------------- | ------------------------------ |\n| 查看正在运行的yarn任务列表 | yarn application -list appID   |\n| kill掉指定id的yarn任务     | yarn application -kill appID   |\n| 查看任务日志信息           | yarn logs -applicationId appID |\n\n---\n\n## Zookeeper\n###  启动命令\n| 功能说明            | 命令脚本                        |\n| ------------------- | ------------------------------- |\n| 启动zookeeper服务   | zkServer.sh start               |\n| 查看zookeeper状态   | zkServer.sh status              |\n| 停止zookeeper服务   | zkServer.sh stop                |\n| 启动zookeeper客户端 | zkCli.sh -server 127.0.0.1:2181 |\n| 退出zookeeper客户端 | quit                            |\n\n###  基本操作\n| 功能说明                                  | 命令脚本                      |\n| ----------------------------------------- | ----------------------------- |\n| 当前znode中所包含的内容                   | ls /                          |\n| 创建普通节点(前面是节点的路径，后面是值） | create /bigdata/flink \"flink\" |\n| 获取节点的值                              | get /bigdata                  |\n| 修改节点的值                              | set /bigdata/flink \"flinksql\" |\n| 删除节点                                  | delete /bigdata/flink         |\n| 递归删除节点                              | rmr /bigdata                  |\n\n### 四字母命令\n\n| 命令 | 功能说明                                                     | 例子                           |\n| ---- | ------------------------------------------------------------ | ------------------------------ |\n| conf | zk服务配置的详细信息                                         | echo conf \\| nc 127.0.0.1 2181 |\n| stat | 客户端与zk连接的简要信息                                     | 参考上面                       |\n| srvr | zk服务的详细信息                                             | 参考上面                       |\n| cons | 客户端与zk连接的详细信息                                     | 参考上面                       |\n| mntr | zk服务目前的性能状况                                         | 参考上面                       |\n| crst | 重置当前的所有连接、会话                                     | 参考上面                       |\n| dump | 列出未经处理的会话和连接信息                                 | 参考上面                       |\n| envi | 列出zk的版本信息、主机名称、Java版本、服务器名称等等         | 参考上面                       |\n| ruok | 测试服务器是否正在运行，如果在运行返回imok，否则返回空       | 参考上面                       |\n| srst | 重置Zookeeper的所有统计信息                                  | 参考上面                       |\n| wchs | 列出watch的总数，连接数                                      | 参考上面                       |\n| wchp | 列出所有watch的路径及sessionID                               | 参考上面                       |\n| mntr | 列出集群的关键性能数据，包括zk的版本、node数量、临时节点数等等 | 参考上面                       |\n\n\n---\n\n## Kafka\n**注:** 这里机器我只写一个。命令你们也可使用 ./bin/xx.sh (如：./bin/kafka-topics.sh) \n\n### 查看当前服务器中的所有topic\n~~~shell\nkafka-topics --zookeeper xxxxxx:2181 --list --exclude-internal \n\n说明：\n\nexclude-internal：排除kafka内部topic\n\n比如： --exclude-internal  --topic \"test_.*\"\n~~~\n### 创建topic\n\n~~~shell\nkafka-topics --zookeeper xxxxxx:2181  --create \n--replication-factor \n--partitions 1 \n--topic topic_name\n\n说明：\n\n--topic 定义topic名\n\n--replication-factor  定义副本数\n\n--partitions  定义分区数\n~~~\n\n### 删除topic\n\n**注意:** 需要server.properties中设置delete.topic.enable=true否则只是标记删除\n~~~shell\nkafka-topics --zookeeper xxxxxx:2181 --delete --topic topic_name\n~~~\n\n### 生产者\n~~~shell\nkafka-console-producer --broker-list xxxxxx:9092 --topic topic_name\n\n可加：--property parse.key=true（有key消息）\n~~~\n### 消费者\n~~~shell\nkafka-console-consumer --bootstrap-server xxxxxx:9092 --topic topic_name\n\n注：可选\n\n--from-beginning：会把主题中以往所有的数据都读取出来\n\n--whitelist '.*' ：消费所有的topic\n\n--property print.key=true：显示key进行消费\n\n--partition 0：指定分区消费\n\n--offset：指定起始偏移量消费\n~~~\n\n### 查看某个Topic的详情\n~~~shell\nkafka-topics --zookeeper xxxxxx:2181 --describe --topic topic_name\n~~~\n\n### 修改分区数 \n~~~shell\nkafka-topics --zookeeper xxxxxx:2181 --alter --topic topic_name --partitions 6\n~~~\n\n### 查看某个消费者组信息\n~~~shell\nkafka-consumer-groups --bootstrap-server  xxxxxx:9092  --describe --group group_name \n~~~\n### 删除消费者组\n~~~shell\nkafka-consumer-groups --bootstrap-server  xxxxxx:9092  ---delete --group group_name \n~~~\n\n### 重置offset\n~~~shell\nkafka-consumer-groups --bootstrap-server  xxxxxx:9092  --group group_name\n\n--reset-offsets --all-topics --to-latest --execute \n~~~\n\n### leader重新选举\n\n指定Topic指定分区用重新PREFERRED：优先副本策略 进行Leader重选举\n~~~shell\nkafka-leader-election --bootstrap-server xxxxxx:9092 \n--topic topic_name --election-type PREFERRED --partition 0\n~~~\n\n所有Topic所有分区用重新PREFERRED：优先副本策略 进行Leader重选举\n~~~shell\nkafka-leader-election --bootstrap-server xxxxxx:9092 \n--election-type preferred  --all-topic-partitions\n~~~\n\n### 查询kafka版本信息\n~~~shell\nkafka-configs --bootstrap-server xxxxxx:9092\n--describe --version\n~~~\n### 增删改配置\n\n| 功能说明      | 参数                                                         |\n| ------------- | ------------------------------------------------------------ |\n| 选择类型      | --entity-type (topics/clients/users/brokers/broker- loggers) |\n| 类型名称      | --entity-name                                                |\n| 删除配置      | --delete-config k1=v1,k2=v2                                  |\n| 添加/修改配置 | --add-config k1,k2                                           |\n\ntopic添加/修改动态配置\n~~~shell\nkafka-configs --bootstrap-server xxxxxx:9092\n--alter --entity-type topics --entity-name topic_name \n--add-config file.delete.delay.ms=222222,retention.ms=999999\n~~~\n\ntopic删除动态配置\n~~~shell\nkafka-configs --bootstrap-server xxxxxx:9092 \n--alter --entity-type topics --entity-name topic_name \n--delete-config file.delete.delay.ms,retention.ms\n~~~\n\n### 持续批量拉取消息\n\n单次最大消费10条消息(不加参数意为持续消费)\n~~~shell\nkafka-verifiable-consumer --bootstrap-server xxxxxx:9092 \n--group group_name\n--topic topic_name --max-messages 10\n~~~\n\n### 删除指定分区的消息\n\n删除指定topic的某个分区的消息删除至offset为1024\n\njson文件offset-json-file.json\n~~~\n{\n    \"partitions\": [\n        {\n            \"topic\": \"topic_name\",\n            \"partition\": 0,\n            \"offset\": 1024\n        }\n    ],\n    \"version\": 1\n}\n~~~\n\n~~~shell\nkafka-delete-records --bootstrap-server xxxxxx:9092 \n--offset-json-file offset-json-file.json\n~~~\n\n### 查看Broker磁盘信息\n\n查询指定topic磁盘信息\n~~~shell\nkafka-log-dirs --bootstrap-server xxxxxx:9090 \n--describe --topic-list topic1,topic2\n~~~\n\n查询指定Broker磁盘信息\n~~~shell\nkafka-log-dirs --bootstrap-server xxxxxx:9090 \n--describe --topic-list topic1 --broker-list 0\n~~~\n\n## Hive\n### 启动类\n| 功能说明            | 命令                                           |\n| ------------------- | ---------------------------------------------- |\n| 启动hiveserver2服务 | bin/hiveserver2                                |\n| 启动beeline         | bin/beeline                                    |\n| 连接hiveserver2     | beeline> !connect jdbc:hive2://hadoop102:10000 |\n| metastroe服务       | bin/hive --service metastore                   |\n\nhive 启动元数据服务（metastore和hiveserver2）和优雅关闭脚本\n~~~\n启动： hive.sh start\n关闭： hive.sh stop\n重启： hive.sh restart\n状态： hive.sh status\n~~~\n脚本如下\n~~~\n#!/bin/bash\nHIVE_LOG_DIR=$HIVE_HOME/logs\n\nmkdir -p $HIVE_LOG_DIR\n\n#检查进程是否运行正常，参数1为进程名，参数2为进程端口\nfunction check_process()\n{\n    pid=$(ps -ef 2>/dev/null | grep -v grep | grep -i $1 | awk '{print $2}')\n    ppid=$(netstat -nltp 2>/dev/null | grep $2 | awk '{print $7}' | cut -d '/' -f 1)\n    echo $pid\n    [[ \"$pid\" =~ \"$ppid\" ]] && [ \"$ppid\" ] && return 0 || return 1\n}\n\nfunction hive_start()\n{\n    metapid=$(check_process HiveMetastore 9083)\n    cmd=\"nohup hive --service metastore >$HIVE_LOG_DIR/metastore.log 2>&1 &\"\n    cmd=$cmd\" sleep4; hdfs dfsadmin -safemode wait >/dev/null 2>&1\"\n    [ -z \"$metapid\" ] && eval $cmd || echo \"Metastroe服务已启动\"\n    server2pid=$(check_process HiveServer2 10000)\n    cmd=\"nohup hive --service hiveserver2 >$HIVE_LOG_DIR/hiveServer2.log 2>&1 &\"\n    [ -z \"$server2pid\" ] && eval $cmd || echo \"HiveServer2服务已启动\"\n}\n\nfunction hive_stop()\n{\n    metapid=$(check_process HiveMetastore 9083)\n    [ \"$metapid\" ] && kill $metapid || echo \"Metastore服务未启动\"\n    server2pid=$(check_process HiveServer2 10000)\n    [ \"$server2pid\" ] && kill $server2pid || echo \"HiveServer2服务未启动\"\n}\n\ncase $1 in\n\"start\")\n    hive_start\n    ;;\n\"stop\")\n    hive_stop\n    ;;\n\"restart\")\n    hive_stop\n    sleep 2\n    hive_start\n    ;;\n\"status\")\n    check_process HiveMetastore 9083 >/dev/null && echo \"Metastore服务运行正常\" || echo \"Metastore服务运行异常\"\n    check_process HiveServer2 10000 >/dev/null && echo \"HiveServer2服务运行正常\" || echo \"HiveServer2服务运行异常\"\n    ;;\n*)\n    echo Invalid Args!\n    echo 'Usage: '$(basename $0)' start|stop|restart|status'\n    ;;\nesac\n~~~\n\n### 常用交互命令\n| 功能说明                    | 命令                  |\n| --------------------------- | --------------------- |\n| 不进入hive的交互窗口执行sql | bin/hive -e \"sql语句\" |\n| 执行脚本中sql语句           | bin/hive -f hive.sql  |\n| 退出hive窗口                | exit 或 quit          |\n| 命令窗口中查看hdfs文件系统  | dfs -ls /             |\n| 命令窗口中查看hdfs文件系统  | ! ls /data/h          |\n\n### SQL类(特殊的)\n| 说明                   | 语句                                                         |\n| ---------------------- | ------------------------------------------------------------ |\n| 查看hive中的所有数据库 | show databases                                               |\n| 用default数据库        | use default                                                  |\n| 查询表结构             | desc table_name                                              |\n| 查看数据库             | show databases                                               |\n| 重命名表名             | alter table table1 rename to table2                          |\n| 修改表中字段           | alter table table_name change name user_name String          |\n| 修改字段类型           | alter table table_name change salary salary Double           |\n| 创建外部表             | create external table ....                                   |\n| 查询外部表信息         | desc formatted outsidetable                                  |\n| 创建视图               | create view view_name as select * from table_name .....      |\n| 添加数据               | load data local inpath 'xxx'  overwrite into table table_name partition(day='2021-12-01') |\n\n### 内置函数\n\n（1） NVL\n\n给值为NULL的数据赋值，它的格式是NVL( value，default_value)。它的功能是如果value为NULL，则NVL函数返回default_value的值，否则返回value的值，如果两个参数都为NULL ，则返回NULL\n\n~~~\nselect nvl(column, 0) from xxx；\n~~~\n\n（2）行转列\n\n| 函数                                 | 描述                                                         |\n| ------------------------------------ | ------------------------------------------------------------ |\n| CONCAT(string A/col, string B/col…)  | 返回输入字符串连接后的结果，支持任意个输入字符串             |\n| CONCAT_WS(separator, str1, str2,...) | 第一个参数参数间的分隔符，如果分隔符是 NULL，返回值也将为 NULL。这个函数会跳过分隔符参数后的任何 NULL 和空字符串。分隔符将被加到被连接的字符串之间。 |\n| COLLECT_SET(col)                     | 将某字段的值进行去重汇总，产生array类型字段                  |\n| COLLECT_LIST(col)                    | 函数只接受基本数据类型，它的主要作用是将某字段的值进行不去重汇总，产生array类型字段。 |\n\n（3）列转行(一列转多行)\n\n**Split(str, separator)：** 将字符串按照后面的分隔符切割，转换成字符array。\n\n**EXPLODE(col)：**\n将hive一列中复杂的array或者map结构拆分成多行。\n\n**LATERAL VIEW**\n~~~\n用法：\n\nLATERAL VIEW udtf(expression) tableAlias AS columnAlias\n~~~\n解释：lateral view用于和split, explode等UDTF一起使用，它能够将一行数据拆成多行数据，在此基础上可以对拆分后的数据进行聚合。\n\nlateral view首先为原始表的每行调用UDTF，UDTF会把一行拆分成一或者多行，lateral view再把结果组合，产生一个支持别名表的虚拟表。\n\n**准备数据源测试**\n\n| movie     | category       |\n| --------- | -------------- |\n| 《功勋》  | 记录,剧情      |\n| 《战狼2》 | 战争,动作,灾难 |\n\n**SQL**\n\n~~~\nSELECT movie,category_name \nFROM movie_info \nlateral VIEW\nexplode(split(category,\",\")) movie_info_tmp  AS category_name ;\n\n~~~\n\n**测试结果**\n~~~\n《功勋》      记录\n《功勋》      剧情\n《战狼2》     战争\n《战狼2》     动作\n《战狼2》     灾难\n\n~~~\n\n### 窗口函数\n\n（1）OVER()\n\n定分析函数工作的数据窗口大小，这个数据窗口大小可能会随着行的变而变化。\n\n（2）CURRENT ROW（当前行）\n\n~~~\nn PRECEDING：往前n行数据\n\nn FOLLOWING：往后n行数据\n~~~\n\n（3）UNBOUNDED（无边界）\n\n~~~\nUNBOUNDED PRECEDING 前无边界，表示从前面的起点\n\nUNBOUNDED FOLLOWING后无边界，表示到后面的终点\n~~~\n\n**SQL案例：由起点到当前行的聚合**\n\n~~~\nselect \n    sum(money) over(partition by user_id order by pay_time rows between UNBOUNDED PRECEDING and current row) \nfrom or_order;\n~~~\n\n**SQL案例：当前行和前面一行做聚合**\n\n~~~\nselect \n    sum(money) over(partition by user_id order by pay_time rows between 1 PRECEDING and current row) \nfrom or_order;\n~~~\n\n**SQL案例：当前行和前面一行和后一行做聚合**\n\n~~~\nselect \n    sum(money) over(partition by user_id order by pay_time rows between 1 PRECEDING AND 1 FOLLOWING )\nfrom or_order;\n~~~\n\n**SQL案例：当前行及后面所有行**\n~~~\nselect \n    sum(money) over(partition by user_id order by pay_time rows between current row and UNBOUNDED FOLLOWING  )\nfrom or_order;\n~~~\n\n（4）LAG(col,n,default_val)\n\n往前第n行数据，没有的话default_val\n\n（5）LEAD(col,n, default_val)\n\n往后第n行数据，没有的话default_val\n\n**SQL案例：查询用户购买明细以及上次的购买时间和下次购买时间**\n\n~~~\nselect \n\tuser_id,,pay_time,money,\n\t\n\tlag(pay_time,1,'1970-01-01') over(PARTITION by name order by pay_time) prev_time,\n\t\n\tlead(pay_time,1,'1970-01-01') over(PARTITION by name order by pay_time) next_time\nfrom or_order;\n\n~~~\n\n（6）FIRST_VALUE(col,true/false)\n\n当前窗口下的第一个值，第二个参数为true，跳过空值。\n\n（7）LAST_VALUE (col,true/false)\n\n当前窗口下的最后一个值，第二个参数为true，跳过空值。\n\n**SQL案例：查询用户每个月第一次的购买时间 和 每个月的最后一次购买时间**\n\n~~~\nselect\n\tFIRST_VALUE(pay_time) \n\t    over(\n\t        partition by user_id,month(pay_time) order by pay_time \n\t        rows between UNBOUNDED PRECEDING and UNBOUNDED FOLLOWING\n\t        ) first_time,\n\t\n\tLAST_VALUE(pay_time) \n\t    over(partition by user_id,month(pay_time) order by pay_time rows between UNBOUNDED PRECEDING and UNBOUNDED FOLLOWING\n\t    ) last_time\nfrom or_order;\n\n~~~\n\n\n（8）NTILE(n)\n\n把有序窗口的行分发到指定数据的组中，各个组有编号，编号从1开始，对于每一行，NTILE返回此行所属的组的编号。（用于将分组数据按照顺序切分成n片，返回当前切片值）\n\n**SQL案例：查询前25%时间的订单信息**\n\n~~~\nselect * from (\n    select User_id,pay_time,money,\n    \n    ntile(4) over(order by pay_time) sorted\n    \n    from or_order\n) t\nwhere sorted = 1;\n\n~~~\n\n### 4个By\n（1）Order By\n\n全局排序，只有一个Reducer。\n\n（2）Sort By\n\n分区内有序。\n\n（3）Distrbute By\n\n类似MR中Partition，进行分区，结合sort by使用。\n\n（4） Cluster By\n\n当Distribute by和Sorts by字段相同时，可以使用Cluster by方式。Cluster by除了具有Distribute by的功能外还兼具Sort by的功能。但是排序只能是升序排序，不能指定排序规则为ASC或者DESC。\n\n在生产环境中Order By用的比较少，容易导致OOM。\n\n在生产环境中Sort By+ Distrbute By用的多。\n\n### 排序函数\n\n（1）RANK() \n\n排序相同时会重复，总数不会变\n~~~\n1\n1\n3\n3\n5\n~~~\n（2）DENSE_RANK() \n\n排序相同时会重复，总数会减少\n~~~\n1\n1\n2\n2\n3\n~~~\n（3）ROW_NUMBER()\n\n会根据顺序计算\n~~~\n1\n2\n3\n4\n5\n~~~\n\n### 日期函数\ndatediff：返回结束日期减去开始日期的天数\n~~~\ndatediff(string enddate, string startdate) \n\nselect datediff('2021-11-20','2021-11-22') \n~~~\n\ndate_add：返回开始日期startdate增加days天后的日期\n~~~\ndate_add(string startdate, int days) \n\nselect date_add('2021-11-20',3) \n~~~\ndate_sub：返回开始日期startdate减少days天后的日期\n\n~~~\ndate_sub (string startdate, int days) \n\nselect date_sub('2021-11-22',3)\n~~~\n\n## Impala(时间处理，可类比到hive可用)\n\n### 1. 获取当前时间\ntimestamp 样式2021-12-10 04:36:48.147046000\n\nbigint 样式 1639110956\n\n\n| 函数/方法           | 输出类型  | 说明/样式                    |\n| ------------------- | --------- | ---------------------------- |\n| current_timestamp() | timestamp | 所在时区的当前时间           |\n| now()               | timestamp | 所在时区的当前时间           |\n| unix_timestamp()    | bigint    | 所在时区的当前时间戳         |\n| utc_timestamp       | timestamp | UTC时区的当前时间            |\n| timeofday()         | string    | Fri Dec 10 12:39:46 2021 CST |\n\n### 2. 获取时间指定单位函数\n| 序号 | 函数/方法                     | 输出类型       | 说明/样式                                                 |\n| ---- | ----------------------------- | -------------- | --------------------------------------------------------- |\n| 1    | year(timestamp/date)          | int            | 获取年 yyyy                                               |\n| 2    | quarter(timestamp/date)       | int            | 获取季节（1,2,3,4）                                       |\n| 3    | month(timestamp/date)         | int            | 获取月                                                    |\n| 4    | monthname(timestamp/date)     | string         | 获取月份名称 December                                     |\n| 5    | week(timestamp/date)          | int            | 获取周（1-53）                                            |\n| 6    | weekofyear(timestamp/date)    | int            | 获取周（1-53）                                            |\n| 7    | dayofweek(timestamp/date)     | int            | 获取天（本周第多少天,周日算第一天）                       |\n| 8    | dayname(timestamp/date)       | string         | 获取天（星期几）Friday                                    |\n| 9    | next_day(timestamp/date, 10   | day(string))   | timestamp/date                                            |\n| 11   | day(timestamp/date)           | int            | 获取天（本月第多少天）                                    |\n| 12   | dayofmonth(timestamp/date)    | int            | 获取天（本月第多少天）                                    |\n| 13   | last_day(timestamp/date)      | timestamp/date | 获取天（本月的最后一天日期）                              |\n| 14   | dayofyear(timestamp/date)     | int            | 获取天（本年第多少天）                                    |\n| 15   | hour(timestamp/date)          | int            | 获取小时                                                  |\n| 16   | minute(timestamp date)        | int            | 获取分钟                                                  |\n| 17   | second(timestamp date)        | int            | 获取秒                                                    |\n| 18   | millisecond(timestamp date)   | int            | 获取毫秒                                                  |\n| 19   | extract (YEAR FROM timestamp) | bigint         | 获取参数指定的时间单位 YEAR MONTH DAY  HOUR MINUTE SECOND |\n| 20   | date_part('year',timestamp)   | bigint         | 获取参数指定的时间单位 YEAR MONTH DAY  HOUR MINUTE SECOND |\n| 21   | trunc(timestamp/date,unit)    | timestamp/date | 获取截断为指定单位的时间                                  |\n\n\n| unit                                 | 截取说明                               |\n| ------------------------------------ | -------------------------------------- |\n| SYYYY，YYYY，YEAR，SYEAR，YYY，YY，Y | 年                                     |\n| Q                                    | 季节                                   |\n| MONTH，MON，MM，RM                   | 月                                     |\n| WW                                   | 最近的日期是与一年中的第一天相同的日期 |\n| W                                    | 最近的日期是与该月的第一天相同的星期几 |\n| DDD，DD，J                           | 天                                     |\n| DAY，DY，D                           | 星期几（星期一）的开始                 |\n| HH，HH12，HH24                       | 小时                                   |\n| MI                                   | 分钟                                   |\n\n### 3. 时间比较函数\n| 序号 | 函数/方法                                 | 输出类型 | 说明/样式                             |\n| ---- | ----------------------------------------- | -------- | ------------------------------------- |\n| 1    | datediff(timestamp enddate,startdate)     | int      | 返回endDate比startDate多多少天        |\n| 2    | int_months_between(timestamp t1,t2)       | int      | 返回两个日期相差的整数月份个数        |\n| 3    | months_between(timestamp t1,t2)           | double   | 返回浮点数的月数相差的数              |\n| 4    | date_cmp(DATE date1, DATE date2)          | int      | 比较是否相等，返回-1,0,1,null四种数值 |\n| 5    | timestamp_cmp(timestamp t1，timestamp t2) | int      | 比较是否相等，返回-1,0,1,null四种数值 |\n\n### 4. 时间格式转换函数\n| 序号 | 函数/方法                                          | 输出类型  | 说明/样式                                |\n| ---- | -------------------------------------------------- | --------- | ---------------------------------------- |\n| 1    | to_date(timestamp date)                            | string    | 返回时间戳对应的date                     |\n| 2    | to_timestamp(bigint unixtime)                      | timestamp | 返回整数对应的timestamp值                |\n| 3    | to_timestamp(string date，string pattern)          | timestamp | 返回字符串对应的timestamp值              |\n| 4    | to_utc_timestamp(timestamp t，string timezone)     | timestamp | 指定时区的时间戳转化为UTC时区的时间戳    |\n| 5    | from_timestamp(timestamp t，string pattern)        | string    | 把timestamp按照pattern进行格式化         |\n| 6    | from_timestamp(string date，string pattern)        | string    | 把date按照pattern进行格式化              |\n| 7    | from_unixtime(bigint unixtime)                     | string    | 把时间戳秒数转化为本地地区中的字符串     |\n| 8    | from_unixtime(bigint unixtime，string pattern）    | string    | 时间戳转化为本地时区字符串，pattern格式  |\n| 9    | from_utc_timestamp（timestamp t，string timezone） | timestamp | UTC时区指定时间戳转化为指定时区时间戳    |\n| 10   | unix_timestamp(string datetime)                    | bigint    | 把string类型的date或日期转化成时间戳Unix |\n| 11   | unix_timestamp(timestamp datetime)                 | bigint    | 把string类型的timestamp转化成时间戳Unix  |\n| 12   | unix_timestamp(string datetime，string pattern)    | bigint    | 日期按pattern转化成时间戳Unix            |\n\n\n### 5. 时间计算函数\n| 序号 | 函数/方法                                               | 输出类型       | 说明/样式                      |\n| ---- | ------------------------------------------------------- | -------------- | ------------------------------ |\n| 1    | years_add(timestamp/date date, int/bigint years)        | timestamp/date | 增加指定年数                   |\n| 2    | years_sub(timestamp/date date, int/bigint years)        | timestamp/date | 减少指定年数                   |\n| 3    | months_add(timestamp/date date, int/bigint months)      | timestamp/date | 增加指定月数                   |\n| 4    | months_sub(timestamp/date date, int/bigint months)      | timestamp/date | 减少指定月数                   |\n| 5    | add_months(timestamp/date date, int/bigint months)      | timestamp/date | 增加指定月数                   |\n| 6    | weeks_add(timestamp/date date, int/bigint weeks)        | timestamp/date | 增加指定周数                   |\n| 7    | weeks_sub(timestamp/date date, int/bigint weeks)        | timestamp/date | 减少指定周数                   |\n| 8    | days_add(timestamp/date startdate, int/bigint days)     | timestamp/date | 增加指定天数                   |\n| 9    | days_sub(timestamp/date startdate, int/bigint days)     | timestamp/date | 减少指定天数                   |\n| 10   | date_add(timestamp/date startdate, int/bigint days)     | timestamp/date | 增加指定天数                   |\n| 11   | date_sub(timestamp/date startdate, int/bigint days)     | timestamp/date | 减少指定天数                   |\n| 12   | adddate(timestamp/date startdate, int/int days)         | timestamp/date | 增加指定天数                   |\n| 13   | subdate(timestamp/date startdate，bigint/int days)      | timestamp/date | 减少指定天数                   |\n| 14   | hours_add(timestamp date, int/bigint hours)             | timestamp      | 增加指定小时                   |\n| 15   | hours_sub(timestamp date, int/bigint hours)             | timestamp      | 减少指定小时                   |\n| 16   | minutes_add(timestamp date, int/bigint minutes)         | timestamp      | 增加指定分钟                   |\n| 17   | minutes_sub(timestamp date, int/bigint minutes)         | timestamp      | 减少指定分钟                   |\n| 18   | seconds_add(timestamp date, int/bigint seconds)         | timestamp      | 增加指定秒数                   |\n| 19   | seconds_sub(timestamp date, int/bigint seconds)         | timestamp      | 减少指定秒数                   |\n| 20   | milliseconds_add(timestamp t, int/bigint s）            | timestamp      | 增加指定毫秒数                 |\n| 21   | milliseconds_sub(timestamp t, int/bigint s）            | timestamp      | 减少指定毫秒数                 |\n| 22   | microseconds_add(timestamp t, int/bigint s)             | timestamp      | 增加指定微秒数                 |\n| 23   | microseconds_sub(timestamp t, int/bigint s)             | timestamp      | 减少指定微秒数                 |\n| 24   | nanoseconds_add(timestamp t, int/bigint s）             | timestamp      | 增加指定纳秒数                 |\n| 25   | nanoseconds_sub(timestamp t, int/bigint s）             | timestamp      | 减少指定纳秒数                 |\n| 26   | date_add(timestamp/date startdate, interval_expression) | timestamp/date | 使用参数计算日期增量值（增加） |\n| 27   | date_sub(timestamp/date startdate, interval_expression) | timestamp/date | 使用参数计算日期增量值（减少） |\n---\n\n\n## Redis\n### 启动类\n\n### key\n| 命令                   | 功能说明                                     |\n| ---------------------- | -------------------------------------------- |\n| keys  *                | 查看当前库的所有键                           |\n| exists <key>           | 判断某个键是否存在                           |\n| type <key>             | 查看键的类型                                 |\n| del <key>              | 删除某个键                                   |\n| expire <key> <seconds> | 为键值设置过期时间，单位秒                   |\n| ttl <key>              | 查看还有多久过期,-1表示永不过期,-2表示已过期 |\n| dbsize                 | 查看当前数据库中key的数量                    |\n| flushdb                | 清空当前库                                   |\n| Flushall               | 通杀全部库                                   |\n\n### String\n| 命令                                   | 功能说明                                                     |\n| -------------------------------------- | ------------------------------------------------------------ |\n| get <key>                              | 查询对应键值                                                 |\n| set <key> <value>                      | 添加键值对                                                   |\n| append <key> <value>                   | 将给定的<value>追加到原值的末尾                              |\n| strlen <key>                           | 获取值的长度                                                 |\n| setnx <key> <value>                    | 只有在key 不存在时设置key的值                                |\n| incr <key>                             | 将key中存储的数字值增1只能对数字值操作，如果为空，新增值为1  |\n| decr <key>                             | 将key中存储的数字值减1只能对数字之操作，如果为空,新增值为-1  |\n| incrby /decrby <key> 步长              | 将key中存储的数字值增减，自定义步长                          |\n| mset <key1> <value1> <key2> <value2>   | 同时设置一个或多个key-value对                                |\n| mget <key1> <key2>  <key3>             | 同时获取一个或多个value                                      |\n| msetnx <key1> <value1> <key2> <value2> | 同时设置一个或多个key-value对，当且仅当所有给定的key都不存在 |\n| getrange <key> <起始位置> <结束位置>   | 获得值的范围,类似java中的substring                           |\n| setrange <key> <起始位置> <value>      | 用<value>覆盖<key>所存储的字符串值，从<起始位置>开始         |\n| setex <key> <过期时间> <value>         | 设置键值的同时，设置过去时间，单位秒                         |\n| getset <key> <value>                   | 以新换旧,设置了新值的同时获取旧值                            |\n\n### List\n| 命令                                      | 功能说明                                       |\n| ----------------------------------------- | ---------------------------------------------- |\n| lpush/rpush  <key>  <value1>  <value2>    | 从左边/右边插入一个或多个值。                  |\n| lpop/rpop  <key>                          | 从左边/右边吐出一个值。值在键在，值光键亡。    |\n| rpoplpush  <key1>  <key2>                 | 从<key1>列表右边吐出一个值，插到<key2>列表左边 |\n| lrange <key> <start> <stop>               | 按照索引下标获得元素(从左到右)                 |\n| lindex <key> <index>                      | 按照索引下标获得元素(从左到右)                 |\n| llen <key>                                | 获得列表长度                                   |\n| linsert <key>  before <value>  <newvalue> | 在<value>的后面插入<newvalue> 插入值           |\n| lrem <key> <n>  <value>                   | 从左边删除n个value(从左到右)                   |\n\n### Set\n| 命令                                | 功能说明                                                     |\n| ----------------------------------- | ------------------------------------------------------------ |\n| sadd <key>  <value1>  <value2> .... | 将一个或多个 member 元素加入到集合 key 当中，已经存在于集合的 member 元素将被忽略。 |\n| smembers <key>                      | 取出该集合的所有值。                                         |\n| sismember <key>  <value>            | 判断集合<key>是否为含有该<value>值，有返回1，没有返回0       |\n| scard  <key>                        | 返回该集合的元素个数。                                       |\n| srem <key> <value1> <value2> ....   | 删除集合中的某个元素。                                       |\n| spop <key>                          | 随机从该集合中吐出一个值。                                   |\n| srandmember <key> <n>               | 随机从该集合中取出n个值。不会从集合中删除                    |\n| sinter <key1> <key2>                | 返回两个集合的交集元素。                                     |\n| sunion <key1> <key2>                | 返回两个集合的并集元素。                                     |\n| sdiff <key1> <key2>                 | 返回两个集合的差集元素。                                     |\n\n### Hash\n| 命令                                                 | 功能说明                                                     |\n| ---------------------------------------------------- | ------------------------------------------------------------ |\n| hset <key>  <field>  <value>                         | 给<key>集合中的  <field>键赋值<value>                        |\n| hget <key1>  <field>                                 | 从<key1>集合<field> 取出 value                               |\n| hmset <key1>  <field1> <value1> <field2> <value2>... | 批量设置hash的值                                             |\n| hexists key  <field>                                 | 查看哈希表 key 中，给定域 field 是否存在。                   |\n| hkeys <key>                                          | 列出该hash集合的所有field                                    |\n| hvals <key>                                          | 列出该hash集合的所有value                                    |\n| hincrby <key> <field>  <increment>                   | 为哈希表 key 中的域 field 的值加上增量 increment             |\n| hsetnx <key>  <field> <value>                        | 将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在 |\n\n### zset(Sorted set)\n| 命令                                                         | 功能说明                                                     |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| zadd  <key> <score1> <value1>  <score2> <value2>...          | 将一个或多个 member 元素及其 score 值加入到有序集 key 当中   |\n| zrange <key>  <start> <stop>  [WITHSCORES]                   | 返回有序集 key 中，下标在<start> <stop>之间的元素带WITHSCORES，可以让分数一起和值返回到结果集。 |\n| zrangebyscore key min max [withscores] [limit offset count]  | 返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。 |\n| zrevrangebyscore key max min [withscores] [limit offset count] | 同上，改为从大到小排列。                                     |\n| zincrby <key> <increment> <value>                            | 为元素的score加上增量                                        |\n| zrem  <key>  <value>                                         | 删除该集合下，指定值的元素                                   |\n| zcount <key>  <min>  <max>                                   | 统计该集合，分数区间内的元素个数                             |\n| zrank <key>  <value>                                         | 返回该值在集合中的排名，从0开始。                            |\n\n\n---\n\n\n## Flink\n### 启动\n~~~\n./start-cluster.sh \n~~~\n\n### run\n~~~\n./bin/flink run [OPTIONS]\n\n./bin/flink run -m yarn-cluster -c com.wang.flink.WordCount /opt/app/WordCount.jar\n~~~\n\n| OPTIONS | 功能说明                                               |\n| ------- | ------------------------------------------------------ |\n| -d      | detached 是否使用分离模式                              |\n| -m      | jobmanager 指定提交的jobmanager                        |\n| -yat    | –yarnapplicationType 设置yarn应用的类型                |\n| -yD     | 使用给定属性的值                                       |\n| -yd     | –yarndetached 使用yarn分离模式                         |\n| -yh     | –yarnhelp yarn session的帮助                           |\n| -yid    | –yarnapplicationId 挂到正在运行的yarnsession上         |\n| -yj     | –yarnjar Flink jar文件的路径                           |\n| -yjm    | –yarnjobManagerMemory jobmanager的内存(单位M)          |\n| -ynl    | –yarnnodeLabel 指定 YARN 应用程序 YARN 节点标签        |\n| -ynm    | –yarnname 自定义yarn应用名称                           |\n| -yq     | –yarnquery 显示yarn的可用资源                          |\n| -yqu    | –yarnqueue 指定yarn队列                                |\n| -ys     | –yarnslots 指定每个taskmanager的slots数                |\n| -yt     | yarnship 在指定目录中传输文件                          |\n| -ytm    | –yarntaskManagerMemory 每个taskmanager的内存           |\n| -yz     | –yarnzookeeperNamespace 用来创建ha的zk子路径的命名空间 |\n| -z      | –zookeeperNamespace 用来创建ha的zk子路径的命名空间     |\n| -p      | 并行度                                                 |\n| -yn     | 需要分配的YARN容器个数(=任务管理器的数量)              |\n\n### info\n~~~\n./bin/flink info [OPTIONS]\n~~~\n| OPTIONS | 功能说明         |\n| ------- | ---------------- |\n| -c      | 程序进入点，主类 |\n| -p      | 并行度           |\n\n\n### list\n~~~\n./bin/flink list [OPTIONS]\n~~~\n| OPTIONS | 功能说明                                                 |\n| ------- | -------------------------------------------------------- |\n| -a      | –all 显示所有应用和对应的job id                          |\n| -r      | –running 显示正在运行的应用和job id                      |\n| -s      | –scheduled 显示调度的应用和job id                        |\n| -m      | –jobmanager 指定连接的jobmanager                         |\n| -yid    | –yarnapplicationId 挂到指定的yarn id对应的yarn session上 |\n| -z      | –zookeeperNamespace 用来创建ha的zk子路径的命名空间       |\n\n### stop\n~~~\n./bin/flink stop  [OPTIONS] <Job ID>\n~~~\n| OPTIONS | 功能说明                                                 |\n| ------- | -------------------------------------------------------- |\n| -d      | 在采取保存点和停止管道之前，发送MAX_WATERMARK            |\n| -p      | savepointPath 保存点的路径 'xxxxx'                       |\n| -m      | –jobmanager 指定连接的jobmanager                         |\n| -yid    | –yarnapplicationId 挂到指定的yarn id对应的yarn session上 |\n| -z      | –zookeeperNamespace 用来创建ha的zk子路径的命名空间       |\n\n### cancel(弱化)\n~~~\n./bin/flink cancel  [OPTIONS] <Job ID>\n~~~\n| OPTIONS | 功能说明                                                 |\n| ------- | -------------------------------------------------------- |\n| -s      | 使用 \"stop \"代替                                         |\n| -D      | 允许指定多个通用配置选项                                 |\n| -m      | 要连接的JobManager的地址                                 |\n| -yid    | –yarnapplicationId 挂到指定的yarn id对应的yarn session上 |\n| -z      | –zookeeperNamespace 用来创建ha的zk子路径的命名空间       |\n\n### savepoint\n~~~\n./bin/flink savepoint  [OPTIONS] <Job ID>\n~~~\n| OPTIONS | 功能说明                                                 |\n| ------- | -------------------------------------------------------- |\n| -d      | 要处理的保存点的路径                                     |\n| -j      | Flink程序的JAR文件                                       |\n| -m      | 要连接的JobManager的地址                                 |\n| -yid    | –yarnapplicationId 挂到指定的yarn id对应的yarn session上 |\n| -z      | –zookeeperNamespace 用来创建ha的zk子路径的命名空间       |","slug":"大数据常用命令","published":1,"updated":"2022-01-23T03:11:04.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyv8edy8000v38qh6s0p44ne","content":"<h2 id=\"Linux（vi-vim）\"><a href=\"#Linux（vi-vim）\" class=\"headerlink\" title=\"Linux（vi/vim）\"></a>Linux（vi/vim）</h2><h3 id=\"一般模式\"><a href=\"#一般模式\" class=\"headerlink\" title=\"一般模式\"></a>一般模式</h3><table>\n<thead>\n<tr>\n<th>语法</th>\n<th>功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>yy</td>\n<td>复制光标当前一行</td>\n</tr>\n<tr>\n<td>y数字y</td>\n<td>复制一段（从第几行到第几行）</td>\n</tr>\n<tr>\n<td>p</td>\n<td>箭头移动到目的行粘贴</td>\n</tr>\n<tr>\n<td>u</td>\n<td>撤销上一步</td>\n</tr>\n<tr>\n<td>dd</td>\n<td>删除光标当前行</td>\n</tr>\n<tr>\n<td>d数字d</td>\n<td>删除光标（含）后多少行</td>\n</tr>\n<tr>\n<td>x</td>\n<td>删除一个字母，相当于del</td>\n</tr>\n<tr>\n<td>X</td>\n<td>删除一个字母，相当于Backspace</td>\n</tr>\n<tr>\n<td>yw</td>\n<td>复制一个词</td>\n</tr>\n<tr>\n<td>dw</td>\n<td>删除一个词</td>\n</tr>\n<tr>\n<td>shift+^</td>\n<td>移动到行头</td>\n</tr>\n<tr>\n<td>shift+$</td>\n<td>移动到行尾</td>\n</tr>\n<tr>\n<td>1+shift+g</td>\n<td>移动到页头，数字</td>\n</tr>\n<tr>\n<td>shift+g</td>\n<td>移动到页尾</td>\n</tr>\n<tr>\n<td>数字N+shift+g</td>\n<td>移动到目标行</td>\n</tr>\n</tbody></table>\n<h3 id=\"编辑模式\"><a href=\"#编辑模式\" class=\"headerlink\" title=\"编辑模式\"></a>编辑模式</h3><table>\n<thead>\n<tr>\n<th>按键</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>i</td>\n<td>当前光标前</td>\n</tr>\n<tr>\n<td>a</td>\n<td>当前光标后</td>\n</tr>\n<tr>\n<td>o</td>\n<td>当前光标行的下一行</td>\n</tr>\n<tr>\n<td>I</td>\n<td>光标所在行最前</td>\n</tr>\n<tr>\n<td>A</td>\n<td>光标所在行最后</td>\n</tr>\n<tr>\n<td>O</td>\n<td>当前光标行的上一行</td>\n</tr>\n</tbody></table>\n<h3 id=\"指令模式\"><a href=\"#指令模式\" class=\"headerlink\" title=\"指令模式\"></a>指令模式</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>:w</td>\n<td>保存</td>\n</tr>\n<tr>\n<td>:q</td>\n<td>退出</td>\n</tr>\n<tr>\n<td>:!</td>\n<td>强制执行</td>\n</tr>\n<tr>\n<td>/要查找的词</td>\n<td>n 查找下一个，N 往上查找</td>\n</tr>\n<tr>\n<td>? 要查找的词</td>\n<td>n是查找上一个，shift+n是往下查找</td>\n</tr>\n<tr>\n<td>:set nu</td>\n<td>显示行号</td>\n</tr>\n<tr>\n<td>:set nonu</td>\n<td>关闭行号</td>\n</tr>\n</tbody></table>\n<h3 id=\"压缩和解压\"><a href=\"#压缩和解压\" class=\"headerlink\" title=\"压缩和解压\"></a>压缩和解压</h3><h4 id=\"gzip-gunzip-压缩\"><a href=\"#gzip-gunzip-压缩\" class=\"headerlink\" title=\"gzip/gunzip 压缩\"></a>gzip/gunzip 压缩</h4><p>（1）只能压缩文件不能压缩目录</p>\n<p>（2）不保留原来的文件</p>\n<p>gzip压缩：gzip hello.txt</p>\n<p>gunzip解压缩文件：gunzip hello.txt.gz</p>\n<h4 id=\"zip-unzip-压缩\"><a href=\"#zip-unzip-压缩\" class=\"headerlink\" title=\"zip/unzip 压缩\"></a>zip/unzip 压缩</h4><p>可以压缩目录且保留源文件</p>\n<p>zip压缩（压缩 1.txt 和2.txt，压缩后的名称为mypackage.zip）：zip hello.zip hello.txt world.txt</p>\n<p>unzip解压：unzip hello.zip</p>\n<p>unzip解压到指定目录：unzip hello.zip -d /opt</p>\n<h4 id=\"tar-打包\"><a href=\"#tar-打包\" class=\"headerlink\" title=\"tar 打包\"></a>tar 打包</h4><p>tar压缩多个文件：tar -zcvf hello.txt world.txt</p>\n<p>tar压缩目录：tar -zcvf hello.tar.gz opt/</p>\n<p>tar解压到当前目录：tar -zxvf hello.tar.gz</p>\n<p>tar解压到指定目录：tar -zxvf hello.tar.gz -C /opt</p>\n<h3 id=\"RPM\"><a href=\"#RPM\" class=\"headerlink\" title=\"RPM\"></a>RPM</h3><p>RPM查询命令：rpm -qa |grep firefox</p>\n<p>RPM卸载命令：</p>\n<p>rpm -e xxxxxx</p>\n<p>rpm -e –nodeps xxxxxx（不检查依赖）</p>\n<p>RPM安装命令：</p>\n<p>rpm -ivh xxxxxx.rpm</p>\n<p>rpm -ivh –nodeps fxxxxxx.rpm（–nodeps，不检测依赖进度）</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-i</td>\n<td>-i=install，安装</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>-v=verbose，显示详细信息</td>\n</tr>\n<tr>\n<td>-h</td>\n<td>-h=hash，进度条</td>\n</tr>\n<tr>\n<td>–nodeps</td>\n<td>–nodeps，不检测依赖进度</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"Shell\"><a href=\"#Shell\" class=\"headerlink\" title=\"Shell\"></a>Shell</h2><h3 id=\"输入-输出重定向\"><a href=\"#输入-输出重定向\" class=\"headerlink\" title=\"输入/输出重定向\"></a>输入/输出重定向</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>command &gt; file</td>\n<td>将输出重定向到 file</td>\n</tr>\n<tr>\n<td>command &lt; file</td>\n<td>将输入重定向到 file</td>\n</tr>\n<tr>\n<td>command &gt;&gt; file</td>\n<td>将输出以追加的方式重定向到 file</td>\n</tr>\n<tr>\n<td>n &gt; file</td>\n<td>将文件描述符为 n 的文件重定向到 file</td>\n</tr>\n<tr>\n<td>n &gt;&gt; file</td>\n<td>将文件描述符为 n 的文件以追加的方式重定向到 file</td>\n</tr>\n<tr>\n<td>n &gt;&amp; m</td>\n<td>将输出文件 m 和 n 合并</td>\n</tr>\n<tr>\n<td>n &lt;&amp; m</td>\n<td>将输入文件 m 和 n 合并</td>\n</tr>\n<tr>\n<td>&lt;&lt; tag</td>\n<td>将开始标记 tag 和结束标记 tag 之间的内容作为输入</td>\n</tr>\n</tbody></table>\n<h3 id=\"脚本编辑\"><a href=\"#脚本编辑\" class=\"headerlink\" title=\"脚本编辑\"></a>脚本编辑</h3><table>\n<thead>\n<tr>\n<th>快捷方式</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>shift</td>\n<td>参数左移</td>\n</tr>\n<tr>\n<td>$@</td>\n<td>所有的参数</td>\n</tr>\n<tr>\n<td>$#</td>\n<td>参数的个数</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"Hadoop\"><a href=\"#Hadoop\" class=\"headerlink\" title=\"Hadoop\"></a>Hadoop</h2><h3 id=\"启动类命令\"><a href=\"#启动类命令\" class=\"headerlink\" title=\"启动类命令\"></a>启动类命令</h3><table>\n<thead>\n<tr>\n<th>功能说明</th>\n<th>命令脚本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>启动hdfs集群</td>\n<td>sbin/start-dfs.sh</td>\n</tr>\n<tr>\n<td>启动yarn</td>\n<td>sbin/start-yarn.sh</td>\n</tr>\n</tbody></table>\n<h3 id=\"hadoop-fs-hdfs-dfs-命令\"><a href=\"#hadoop-fs-hdfs-dfs-命令\" class=\"headerlink\" title=\"hadoop fs/hdfs dfs 命令\"></a>hadoop fs/hdfs dfs 命令</h3><table>\n<thead>\n<tr>\n<th>功能说明</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>创建目录</td>\n<td>hdfs dfs -mkdir -p /data/flink</td>\n</tr>\n<tr>\n<td>显示目录</td>\n<td>hdfs dfs -ls /</td>\n</tr>\n<tr>\n<td>从HDFS拷贝到本地</td>\n<td>hdfs dfs -copyToLocal /data/data.txt ./</td>\n</tr>\n<tr>\n<td>文件上传到集群(从本地)</td>\n<td>hhdfs dfs -copyFromLocal data.txt /</td>\n</tr>\n<tr>\n<td>文件下载</td>\n<td>hdfs dfs -get /data/flink</td>\n</tr>\n<tr>\n<td>删除集群的文件</td>\n<td>hdfs dfs -rm /data/flink</td>\n</tr>\n<tr>\n<td>删除文件夹</td>\n<td>hdfs dfs -rm -r -skipTrash /data</td>\n</tr>\n<tr>\n<td>从本地剪切粘贴到HDFS</td>\n<td>hdfs dfs  -moveFromLocal data.txt /data/</td>\n</tr>\n<tr>\n<td>追加一个文件到已经存在的文件末尾hdfs dfs -appendToFile data1.txt /data/data.txt</td>\n<td></td>\n</tr>\n<tr>\n<td>显示文件内容</td>\n<td>hdfs dfs -cat data.txt</td>\n</tr>\n<tr>\n<td>修改文件所属权限</td>\n<td>hdfs dfs  -chmod  777 xxx.sh</td>\n</tr>\n<tr>\n<td>修改文件所属用户组</td>\n<td>hdfs dfs  -chown  root:root data.txt</td>\n</tr>\n<tr>\n<td>从HDFS的一个路径拷贝到HDFS的另一个路径</td>\n<td>hdfs dfs -cp data.txt /data1.txt</td>\n</tr>\n<tr>\n<td>在HDFS目录中移动文件</td>\n<td>hdfs dfs -mv data.txt /opt/</td>\n</tr>\n<tr>\n<td>合并下载多个文件</td>\n<td>hdfs dfs  -getmerge /data/* ./data_merge.txt</td>\n</tr>\n<tr>\n<td>hadoop fs -put</td>\n<td>等同于copyFromLocal</td>\n</tr>\n<tr>\n<td>显示一个文件的末尾</td>\n<td>hdfs dfs -tail data.txt</td>\n</tr>\n<tr>\n<td>删除文件或文件夹</td>\n<td>hdfs dfs -rm /data/data.txt</td>\n</tr>\n<tr>\n<td>删除空目录</td>\n<td>hdfs dfs -rmdir /data</td>\n</tr>\n<tr>\n<td>统计文件夹的大小信息</td>\n<td>hdfs dfs -s -h /data</td>\n</tr>\n<tr>\n<td>统计文件夹下的文件大小信息</td>\n<td>hdfs dfs  -h /data</td>\n</tr>\n<tr>\n<td>设置HDFS中文件的副本数量</td>\n<td>hdfs dfs -setrep 3 /data/data.txt</td>\n</tr>\n</tbody></table>\n<h3 id=\"yarn命令\"><a href=\"#yarn命令\" class=\"headerlink\" title=\"yarn命令\"></a>yarn命令</h3><table>\n<thead>\n<tr>\n<th>功能说明</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查看正在运行的yarn任务列表</td>\n<td>yarn application -list appID</td>\n</tr>\n<tr>\n<td>kill掉指定id的yarn任务</td>\n<td>yarn application -kill appID</td>\n</tr>\n<tr>\n<td>查看任务日志信息</td>\n<td>yarn logs -applicationId appID</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"Zookeeper\"><a href=\"#Zookeeper\" class=\"headerlink\" title=\"Zookeeper\"></a>Zookeeper</h2><h3 id=\"启动命令\"><a href=\"#启动命令\" class=\"headerlink\" title=\"启动命令\"></a>启动命令</h3><table>\n<thead>\n<tr>\n<th>功能说明</th>\n<th>命令脚本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>启动zookeeper服务</td>\n<td>zkServer.sh start</td>\n</tr>\n<tr>\n<td>查看zookeeper状态</td>\n<td>zkServer.sh status</td>\n</tr>\n<tr>\n<td>停止zookeeper服务</td>\n<td>zkServer.sh stop</td>\n</tr>\n<tr>\n<td>启动zookeeper客户端</td>\n<td>zkCli.sh -server 127.0.0.1:2181</td>\n</tr>\n<tr>\n<td>退出zookeeper客户端</td>\n<td>quit</td>\n</tr>\n</tbody></table>\n<h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><table>\n<thead>\n<tr>\n<th>功能说明</th>\n<th>命令脚本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>当前znode中所包含的内容</td>\n<td>ls /</td>\n</tr>\n<tr>\n<td>创建普通节点(前面是节点的路径，后面是值）</td>\n<td>create /bigdata/flink “flink”</td>\n</tr>\n<tr>\n<td>获取节点的值</td>\n<td>get /bigdata</td>\n</tr>\n<tr>\n<td>修改节点的值</td>\n<td>set /bigdata/flink “flinksql”</td>\n</tr>\n<tr>\n<td>删除节点</td>\n<td>delete /bigdata/flink</td>\n</tr>\n<tr>\n<td>递归删除节点</td>\n<td>rmr /bigdata</td>\n</tr>\n</tbody></table>\n<h3 id=\"四字母命令\"><a href=\"#四字母命令\" class=\"headerlink\" title=\"四字母命令\"></a>四字母命令</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能说明</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>conf</td>\n<td>zk服务配置的详细信息</td>\n<td>echo conf | nc 127.0.0.1 2181</td>\n</tr>\n<tr>\n<td>stat</td>\n<td>客户端与zk连接的简要信息</td>\n<td>参考上面</td>\n</tr>\n<tr>\n<td>srvr</td>\n<td>zk服务的详细信息</td>\n<td>参考上面</td>\n</tr>\n<tr>\n<td>cons</td>\n<td>客户端与zk连接的详细信息</td>\n<td>参考上面</td>\n</tr>\n<tr>\n<td>mntr</td>\n<td>zk服务目前的性能状况</td>\n<td>参考上面</td>\n</tr>\n<tr>\n<td>crst</td>\n<td>重置当前的所有连接、会话</td>\n<td>参考上面</td>\n</tr>\n<tr>\n<td>dump</td>\n<td>列出未经处理的会话和连接信息</td>\n<td>参考上面</td>\n</tr>\n<tr>\n<td>envi</td>\n<td>列出zk的版本信息、主机名称、Java版本、服务器名称等等</td>\n<td>参考上面</td>\n</tr>\n<tr>\n<td>ruok</td>\n<td>测试服务器是否正在运行，如果在运行返回imok，否则返回空</td>\n<td>参考上面</td>\n</tr>\n<tr>\n<td>srst</td>\n<td>重置Zookeeper的所有统计信息</td>\n<td>参考上面</td>\n</tr>\n<tr>\n<td>wchs</td>\n<td>列出watch的总数，连接数</td>\n<td>参考上面</td>\n</tr>\n<tr>\n<td>wchp</td>\n<td>列出所有watch的路径及sessionID</td>\n<td>参考上面</td>\n</tr>\n<tr>\n<td>mntr</td>\n<td>列出集群的关键性能数据，包括zk的版本、node数量、临时节点数等等</td>\n<td>参考上面</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h2><p><strong>注:</strong> 这里机器我只写一个。命令你们也可使用 ./bin/xx.sh (如：./bin/kafka-topics.sh) </p>\n<h3 id=\"查看当前服务器中的所有topic\"><a href=\"#查看当前服务器中的所有topic\" class=\"headerlink\" title=\"查看当前服务器中的所有topic\"></a>查看当前服务器中的所有topic</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-topics --zookeeper xxxxxx:2181 --list --exclude-internal \n\n说明：\n\nexclude-internal：排除kafka内部topic\n\n比如： --exclude-internal  --topic <span class=\"token string\">\"test_.*\"</span></code></pre>\n<h3 id=\"创建topic\"><a href=\"#创建topic\" class=\"headerlink\" title=\"创建topic\"></a>创建topic</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-topics --zookeeper xxxxxx:2181  --create \n--replication-factor \n--partitions <span class=\"token number\">1</span> \n--topic topic_name\n\n说明：\n\n--topic 定义topic名\n\n--replication-factor  定义副本数\n\n--partitions  定义分区数</code></pre>\n\n<h3 id=\"删除topic\"><a href=\"#删除topic\" class=\"headerlink\" title=\"删除topic\"></a>删除topic</h3><p><strong>注意:</strong> 需要server.properties中设置delete.topic.enable=true否则只是标记删除</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-topics --zookeeper xxxxxx:2181 --delete --topic topic_name</code></pre>\n\n<h3 id=\"生产者\"><a href=\"#生产者\" class=\"headerlink\" title=\"生产者\"></a>生产者</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-console-producer --broker-list xxxxxx:9092 --topic topic_name\n\n可加：--property parse.key<span class=\"token operator\">=</span>true（有key消息）</code></pre>\n<h3 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-console-consumer --bootstrap-server xxxxxx:9092 --topic topic_name\n\n注：可选\n\n--from-beginning：会把主题中以往所有的数据都读取出来\n\n--whitelist <span class=\"token string\">'.*'</span> ：消费所有的topic\n\n--property print.key<span class=\"token operator\">=</span>true：显示key进行消费\n\n--partition <span class=\"token number\">0</span>：指定分区消费\n\n--offset：指定起始偏移量消费</code></pre>\n\n<h3 id=\"查看某个Topic的详情\"><a href=\"#查看某个Topic的详情\" class=\"headerlink\" title=\"查看某个Topic的详情\"></a>查看某个Topic的详情</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-topics --zookeeper xxxxxx:2181 --describe --topic topic_name</code></pre>\n\n<h3 id=\"修改分区数\"><a href=\"#修改分区数\" class=\"headerlink\" title=\"修改分区数\"></a>修改分区数</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-topics --zookeeper xxxxxx:2181 --alter --topic topic_name --partitions <span class=\"token number\">6</span></code></pre>\n\n<h3 id=\"查看某个消费者组信息\"><a href=\"#查看某个消费者组信息\" class=\"headerlink\" title=\"查看某个消费者组信息\"></a>查看某个消费者组信息</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-consumer-groups --bootstrap-server  xxxxxx:9092  --describe --group group_name </code></pre>\n<h3 id=\"删除消费者组\"><a href=\"#删除消费者组\" class=\"headerlink\" title=\"删除消费者组\"></a>删除消费者组</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-consumer-groups --bootstrap-server  xxxxxx:9092  ---delete --group group_name </code></pre>\n\n<h3 id=\"重置offset\"><a href=\"#重置offset\" class=\"headerlink\" title=\"重置offset\"></a>重置offset</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-consumer-groups --bootstrap-server  xxxxxx:9092  --group group_name\n\n--reset-offsets --all-topics --to-latest --execute </code></pre>\n\n<h3 id=\"leader重新选举\"><a href=\"#leader重新选举\" class=\"headerlink\" title=\"leader重新选举\"></a>leader重新选举</h3><p>指定Topic指定分区用重新PREFERRED：优先副本策略 进行Leader重选举</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-leader-election --bootstrap-server xxxxxx:9092 \n--topic topic_name --election-type PREFERRED --partition <span class=\"token number\">0</span></code></pre>\n\n<p>所有Topic所有分区用重新PREFERRED：优先副本策略 进行Leader重选举</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-leader-election --bootstrap-server xxxxxx:9092 \n--election-type preferred  --all-topic-partitions</code></pre>\n\n<h3 id=\"查询kafka版本信息\"><a href=\"#查询kafka版本信息\" class=\"headerlink\" title=\"查询kafka版本信息\"></a>查询kafka版本信息</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-configs --bootstrap-server xxxxxx:9092\n--describe --version</code></pre>\n<h3 id=\"增删改配置\"><a href=\"#增删改配置\" class=\"headerlink\" title=\"增删改配置\"></a>增删改配置</h3><table>\n<thead>\n<tr>\n<th>功能说明</th>\n<th>参数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>选择类型</td>\n<td>–entity-type (topics/clients/users/brokers/broker- loggers)</td>\n</tr>\n<tr>\n<td>类型名称</td>\n<td>–entity-name</td>\n</tr>\n<tr>\n<td>删除配置</td>\n<td>–delete-config k1=v1,k2=v2</td>\n</tr>\n<tr>\n<td>添加/修改配置</td>\n<td>–add-config k1,k2</td>\n</tr>\n</tbody></table>\n<p>topic添加/修改动态配置</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-configs --bootstrap-server xxxxxx:9092\n--alter --entity-type topics --entity-name topic_name \n--add-config file.delete.delay.ms<span class=\"token operator\">=</span><span class=\"token number\">222222</span>,retention.ms<span class=\"token operator\">=</span><span class=\"token number\">999999</span></code></pre>\n\n<p>topic删除动态配置</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-configs --bootstrap-server xxxxxx:9092 \n--alter --entity-type topics --entity-name topic_name \n--delete-config file.delete.delay.ms,retention.ms</code></pre>\n\n<h3 id=\"持续批量拉取消息\"><a href=\"#持续批量拉取消息\" class=\"headerlink\" title=\"持续批量拉取消息\"></a>持续批量拉取消息</h3><p>单次最大消费10条消息(不加参数意为持续消费)</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-verifiable-consumer --bootstrap-server xxxxxx:9092 \n--group group_name\n--topic topic_name --max-messages <span class=\"token number\">10</span></code></pre>\n\n<h3 id=\"删除指定分区的消息\"><a href=\"#删除指定分区的消息\" class=\"headerlink\" title=\"删除指定分区的消息\"></a>删除指定分区的消息</h3><p>删除指定topic的某个分区的消息删除至offset为1024</p>\n<p>json文件offset-json-file.json</p>\n<pre class=\"language-none\"><code class=\"language-none\">&#123;\n    &quot;partitions&quot;: [\n        &#123;\n            &quot;topic&quot;: &quot;topic_name&quot;,\n            &quot;partition&quot;: 0,\n            &quot;offset&quot;: 1024\n        &#125;\n    ],\n    &quot;version&quot;: 1\n&#125;</code></pre>\n\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-delete-records --bootstrap-server xxxxxx:9092 \n--offset-json-file offset-json-file.json</code></pre>\n\n<h3 id=\"查看Broker磁盘信息\"><a href=\"#查看Broker磁盘信息\" class=\"headerlink\" title=\"查看Broker磁盘信息\"></a>查看Broker磁盘信息</h3><p>查询指定topic磁盘信息</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-log-dirs --bootstrap-server xxxxxx:9090 \n--describe --topic-list topic1,topic2</code></pre>\n\n<p>查询指定Broker磁盘信息</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-log-dirs --bootstrap-server xxxxxx:9090 \n--describe --topic-list topic1 --broker-list <span class=\"token number\">0</span></code></pre>\n\n<h2 id=\"Hive\"><a href=\"#Hive\" class=\"headerlink\" title=\"Hive\"></a>Hive</h2><h3 id=\"启动类\"><a href=\"#启动类\" class=\"headerlink\" title=\"启动类\"></a>启动类</h3><table>\n<thead>\n<tr>\n<th>功能说明</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>启动hiveserver2服务</td>\n<td>bin/hiveserver2</td>\n</tr>\n<tr>\n<td>启动beeline</td>\n<td>bin/beeline</td>\n</tr>\n<tr>\n<td>连接hiveserver2</td>\n<td>beeline&gt; !connect jdbc:hive2://hadoop102:10000</td>\n</tr>\n<tr>\n<td>metastroe服务</td>\n<td>bin/hive –service metastore</td>\n</tr>\n</tbody></table>\n<p>hive 启动元数据服务（metastore和hiveserver2）和优雅关闭脚本</p>\n<pre class=\"language-none\"><code class=\"language-none\">启动： hive.sh start\n关闭： hive.sh stop\n重启： hive.sh restart\n状态： hive.sh status</code></pre>\n<p>脚本如下</p>\n<pre class=\"language-none\"><code class=\"language-none\">#!&#x2F;bin&#x2F;bash\nHIVE_LOG_DIR&#x3D;$HIVE_HOME&#x2F;logs\n\nmkdir -p $HIVE_LOG_DIR\n\n#检查进程是否运行正常，参数1为进程名，参数2为进程端口\nfunction check_process()\n&#123;\n    pid&#x3D;$(ps -ef 2&gt;&#x2F;dev&#x2F;null | grep -v grep | grep -i $1 | awk &#39;&#123;print $2&#125;&#39;)\n    ppid&#x3D;$(netstat -nltp 2&gt;&#x2F;dev&#x2F;null | grep $2 | awk &#39;&#123;print $7&#125;&#39; | cut -d &#39;&#x2F;&#39; -f 1)\n    echo $pid\n    [[ &quot;$pid&quot; &#x3D;~ &quot;$ppid&quot; ]] &amp;&amp; [ &quot;$ppid&quot; ] &amp;&amp; return 0 || return 1\n&#125;\n\nfunction hive_start()\n&#123;\n    metapid&#x3D;$(check_process HiveMetastore 9083)\n    cmd&#x3D;&quot;nohup hive --service metastore &gt;$HIVE_LOG_DIR&#x2F;metastore.log 2&gt;&amp;1 &amp;&quot;\n    cmd&#x3D;$cmd&quot; sleep4; hdfs dfsadmin -safemode wait &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1&quot;\n    [ -z &quot;$metapid&quot; ] &amp;&amp; eval $cmd || echo &quot;Metastroe服务已启动&quot;\n    server2pid&#x3D;$(check_process HiveServer2 10000)\n    cmd&#x3D;&quot;nohup hive --service hiveserver2 &gt;$HIVE_LOG_DIR&#x2F;hiveServer2.log 2&gt;&amp;1 &amp;&quot;\n    [ -z &quot;$server2pid&quot; ] &amp;&amp; eval $cmd || echo &quot;HiveServer2服务已启动&quot;\n&#125;\n\nfunction hive_stop()\n&#123;\n    metapid&#x3D;$(check_process HiveMetastore 9083)\n    [ &quot;$metapid&quot; ] &amp;&amp; kill $metapid || echo &quot;Metastore服务未启动&quot;\n    server2pid&#x3D;$(check_process HiveServer2 10000)\n    [ &quot;$server2pid&quot; ] &amp;&amp; kill $server2pid || echo &quot;HiveServer2服务未启动&quot;\n&#125;\n\ncase $1 in\n&quot;start&quot;)\n    hive_start\n    ;;\n&quot;stop&quot;)\n    hive_stop\n    ;;\n&quot;restart&quot;)\n    hive_stop\n    sleep 2\n    hive_start\n    ;;\n&quot;status&quot;)\n    check_process HiveMetastore 9083 &gt;&#x2F;dev&#x2F;null &amp;&amp; echo &quot;Metastore服务运行正常&quot; || echo &quot;Metastore服务运行异常&quot;\n    check_process HiveServer2 10000 &gt;&#x2F;dev&#x2F;null &amp;&amp; echo &quot;HiveServer2服务运行正常&quot; || echo &quot;HiveServer2服务运行异常&quot;\n    ;;\n*)\n    echo Invalid Args!\n    echo &#39;Usage: &#39;$(basename $0)&#39; start|stop|restart|status&#39;\n    ;;\nesac</code></pre>\n\n<h3 id=\"常用交互命令\"><a href=\"#常用交互命令\" class=\"headerlink\" title=\"常用交互命令\"></a>常用交互命令</h3><table>\n<thead>\n<tr>\n<th>功能说明</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>不进入hive的交互窗口执行sql</td>\n<td>bin/hive -e “sql语句”</td>\n</tr>\n<tr>\n<td>执行脚本中sql语句</td>\n<td>bin/hive -f hive.sql</td>\n</tr>\n<tr>\n<td>退出hive窗口</td>\n<td>exit 或 quit</td>\n</tr>\n<tr>\n<td>命令窗口中查看hdfs文件系统</td>\n<td>dfs -ls /</td>\n</tr>\n<tr>\n<td>命令窗口中查看hdfs文件系统</td>\n<td>! ls /data/h</td>\n</tr>\n</tbody></table>\n<h3 id=\"SQL类-特殊的\"><a href=\"#SQL类-特殊的\" class=\"headerlink\" title=\"SQL类(特殊的)\"></a>SQL类(特殊的)</h3><table>\n<thead>\n<tr>\n<th>说明</th>\n<th>语句</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查看hive中的所有数据库</td>\n<td>show databases</td>\n</tr>\n<tr>\n<td>用default数据库</td>\n<td>use default</td>\n</tr>\n<tr>\n<td>查询表结构</td>\n<td>desc table_name</td>\n</tr>\n<tr>\n<td>查看数据库</td>\n<td>show databases</td>\n</tr>\n<tr>\n<td>重命名表名</td>\n<td>alter table table1 rename to table2</td>\n</tr>\n<tr>\n<td>修改表中字段</td>\n<td>alter table table_name change name user_name String</td>\n</tr>\n<tr>\n<td>修改字段类型</td>\n<td>alter table table_name change salary salary Double</td>\n</tr>\n<tr>\n<td>创建外部表</td>\n<td>create external table ….</td>\n</tr>\n<tr>\n<td>查询外部表信息</td>\n<td>desc formatted outsidetable</td>\n</tr>\n<tr>\n<td>创建视图</td>\n<td>create view view_name as select * from table_name …..</td>\n</tr>\n<tr>\n<td>添加数据</td>\n<td>load data local inpath ‘xxx’  overwrite into table table_name partition(day=’2021-12-01’)</td>\n</tr>\n</tbody></table>\n<h3 id=\"内置函数\"><a href=\"#内置函数\" class=\"headerlink\" title=\"内置函数\"></a>内置函数</h3><p>（1） NVL</p>\n<p>给值为NULL的数据赋值，它的格式是NVL( value，default_value)。它的功能是如果value为NULL，则NVL函数返回default_value的值，否则返回value的值，如果两个参数都为NULL ，则返回NULL</p>\n<pre class=\"language-none\"><code class=\"language-none\">select nvl(column, 0) from xxx；</code></pre>\n\n<p>（2）行转列</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CONCAT(string A/col, string B/col…)</td>\n<td>返回输入字符串连接后的结果，支持任意个输入字符串</td>\n</tr>\n<tr>\n<td>CONCAT_WS(separator, str1, str2,…)</td>\n<td>第一个参数参数间的分隔符，如果分隔符是 NULL，返回值也将为 NULL。这个函数会跳过分隔符参数后的任何 NULL 和空字符串。分隔符将被加到被连接的字符串之间。</td>\n</tr>\n<tr>\n<td>COLLECT_SET(col)</td>\n<td>将某字段的值进行去重汇总，产生array类型字段</td>\n</tr>\n<tr>\n<td>COLLECT_LIST(col)</td>\n<td>函数只接受基本数据类型，它的主要作用是将某字段的值进行不去重汇总，产生array类型字段。</td>\n</tr>\n</tbody></table>\n<p>（3）列转行(一列转多行)</p>\n<p><strong>Split(str, separator)：</strong> 将字符串按照后面的分隔符切割，转换成字符array。</p>\n<p><strong>EXPLODE(col)：</strong><br>将hive一列中复杂的array或者map结构拆分成多行。</p>\n<p><strong>LATERAL VIEW</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">用法：\n\nLATERAL VIEW udtf(expression) tableAlias AS columnAlias</code></pre>\n<p>解释：lateral view用于和split, explode等UDTF一起使用，它能够将一行数据拆成多行数据，在此基础上可以对拆分后的数据进行聚合。</p>\n<p>lateral view首先为原始表的每行调用UDTF，UDTF会把一行拆分成一或者多行，lateral view再把结果组合，产生一个支持别名表的虚拟表。</p>\n<p><strong>准备数据源测试</strong></p>\n<table>\n<thead>\n<tr>\n<th>movie</th>\n<th>category</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>《功勋》</td>\n<td>记录,剧情</td>\n</tr>\n<tr>\n<td>《战狼2》</td>\n<td>战争,动作,灾难</td>\n</tr>\n</tbody></table>\n<p><strong>SQL</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">SELECT movie,category_name \nFROM movie_info \nlateral VIEW\nexplode(split(category,&quot;,&quot;)) movie_info_tmp  AS category_name ;\n</code></pre>\n\n<p><strong>测试结果</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">《功勋》      记录\n《功勋》      剧情\n《战狼2》     战争\n《战狼2》     动作\n《战狼2》     灾难\n</code></pre>\n\n<h3 id=\"窗口函数\"><a href=\"#窗口函数\" class=\"headerlink\" title=\"窗口函数\"></a>窗口函数</h3><p>（1）OVER()</p>\n<p>定分析函数工作的数据窗口大小，这个数据窗口大小可能会随着行的变而变化。</p>\n<p>（2）CURRENT ROW（当前行）</p>\n<pre class=\"language-none\"><code class=\"language-none\">n PRECEDING：往前n行数据\n\nn FOLLOWING：往后n行数据</code></pre>\n\n<p>（3）UNBOUNDED（无边界）</p>\n<pre class=\"language-none\"><code class=\"language-none\">UNBOUNDED PRECEDING 前无边界，表示从前面的起点\n\nUNBOUNDED FOLLOWING后无边界，表示到后面的终点</code></pre>\n\n<p><strong>SQL案例：由起点到当前行的聚合</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">select \n    sum(money) over(partition by user_id order by pay_time rows between UNBOUNDED PRECEDING and current row) \nfrom or_order;</code></pre>\n\n<p><strong>SQL案例：当前行和前面一行做聚合</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">select \n    sum(money) over(partition by user_id order by pay_time rows between 1 PRECEDING and current row) \nfrom or_order;</code></pre>\n\n<p><strong>SQL案例：当前行和前面一行和后一行做聚合</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">select \n    sum(money) over(partition by user_id order by pay_time rows between 1 PRECEDING AND 1 FOLLOWING )\nfrom or_order;</code></pre>\n\n<p><strong>SQL案例：当前行及后面所有行</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">select \n    sum(money) over(partition by user_id order by pay_time rows between current row and UNBOUNDED FOLLOWING  )\nfrom or_order;</code></pre>\n\n<p>（4）LAG(col,n,default_val)</p>\n<p>往前第n行数据，没有的话default_val</p>\n<p>（5）LEAD(col,n, default_val)</p>\n<p>往后第n行数据，没有的话default_val</p>\n<p><strong>SQL案例：查询用户购买明细以及上次的购买时间和下次购买时间</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">select \n\tuser_id,,pay_time,money,\n\t\n\tlag(pay_time,1,&#39;1970-01-01&#39;) over(PARTITION by name order by pay_time) prev_time,\n\t\n\tlead(pay_time,1,&#39;1970-01-01&#39;) over(PARTITION by name order by pay_time) next_time\nfrom or_order;\n</code></pre>\n\n<p>（6）FIRST_VALUE(col,true/false)</p>\n<p>当前窗口下的第一个值，第二个参数为true，跳过空值。</p>\n<p>（7）LAST_VALUE (col,true/false)</p>\n<p>当前窗口下的最后一个值，第二个参数为true，跳过空值。</p>\n<p><strong>SQL案例：查询用户每个月第一次的购买时间 和 每个月的最后一次购买时间</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">select\n\tFIRST_VALUE(pay_time) \n\t    over(\n\t        partition by user_id,month(pay_time) order by pay_time \n\t        rows between UNBOUNDED PRECEDING and UNBOUNDED FOLLOWING\n\t        ) first_time,\n\t\n\tLAST_VALUE(pay_time) \n\t    over(partition by user_id,month(pay_time) order by pay_time rows between UNBOUNDED PRECEDING and UNBOUNDED FOLLOWING\n\t    ) last_time\nfrom or_order;\n</code></pre>\n\n\n<p>（8）NTILE(n)</p>\n<p>把有序窗口的行分发到指定数据的组中，各个组有编号，编号从1开始，对于每一行，NTILE返回此行所属的组的编号。（用于将分组数据按照顺序切分成n片，返回当前切片值）</p>\n<p><strong>SQL案例：查询前25%时间的订单信息</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">select * from (\n    select User_id,pay_time,money,\n    \n    ntile(4) over(order by pay_time) sorted\n    \n    from or_order\n) t\nwhere sorted &#x3D; 1;\n</code></pre>\n\n<h3 id=\"4个By\"><a href=\"#4个By\" class=\"headerlink\" title=\"4个By\"></a>4个By</h3><p>（1）Order By</p>\n<p>全局排序，只有一个Reducer。</p>\n<p>（2）Sort By</p>\n<p>分区内有序。</p>\n<p>（3）Distrbute By</p>\n<p>类似MR中Partition，进行分区，结合sort by使用。</p>\n<p>（4） Cluster By</p>\n<p>当Distribute by和Sorts by字段相同时，可以使用Cluster by方式。Cluster by除了具有Distribute by的功能外还兼具Sort by的功能。但是排序只能是升序排序，不能指定排序规则为ASC或者DESC。</p>\n<p>在生产环境中Order By用的比较少，容易导致OOM。</p>\n<p>在生产环境中Sort By+ Distrbute By用的多。</p>\n<h3 id=\"排序函数\"><a href=\"#排序函数\" class=\"headerlink\" title=\"排序函数\"></a>排序函数</h3><p>（1）RANK() </p>\n<p>排序相同时会重复，总数不会变</p>\n<pre class=\"language-none\"><code class=\"language-none\">1\n1\n3\n3\n5</code></pre>\n<p>（2）DENSE_RANK() </p>\n<p>排序相同时会重复，总数会减少</p>\n<pre class=\"language-none\"><code class=\"language-none\">1\n1\n2\n2\n3</code></pre>\n<p>（3）ROW_NUMBER()</p>\n<p>会根据顺序计算</p>\n<pre class=\"language-none\"><code class=\"language-none\">1\n2\n3\n4\n5</code></pre>\n\n<h3 id=\"日期函数\"><a href=\"#日期函数\" class=\"headerlink\" title=\"日期函数\"></a>日期函数</h3><p>datediff：返回结束日期减去开始日期的天数</p>\n<pre class=\"language-none\"><code class=\"language-none\">datediff(string enddate, string startdate) \n\nselect datediff(&#39;2021-11-20&#39;,&#39;2021-11-22&#39;) </code></pre>\n\n<p>date_add：返回开始日期startdate增加days天后的日期</p>\n<pre class=\"language-none\"><code class=\"language-none\">date_add(string startdate, int days) \n\nselect date_add(&#39;2021-11-20&#39;,3) </code></pre>\n<p>date_sub：返回开始日期startdate减少days天后的日期</p>\n<pre class=\"language-none\"><code class=\"language-none\">date_sub (string startdate, int days) \n\nselect date_sub(&#39;2021-11-22&#39;,3)</code></pre>\n\n<h2 id=\"Impala-时间处理，可类比到hive可用\"><a href=\"#Impala-时间处理，可类比到hive可用\" class=\"headerlink\" title=\"Impala(时间处理，可类比到hive可用)\"></a>Impala(时间处理，可类比到hive可用)</h2><h3 id=\"1-获取当前时间\"><a href=\"#1-获取当前时间\" class=\"headerlink\" title=\"1. 获取当前时间\"></a>1. 获取当前时间</h3><p>timestamp 样式2021-12-10 04:36:48.147046000</p>\n<p>bigint 样式 1639110956</p>\n<table>\n<thead>\n<tr>\n<th>函数/方法</th>\n<th>输出类型</th>\n<th>说明/样式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>current_timestamp()</td>\n<td>timestamp</td>\n<td>所在时区的当前时间</td>\n</tr>\n<tr>\n<td>now()</td>\n<td>timestamp</td>\n<td>所在时区的当前时间</td>\n</tr>\n<tr>\n<td>unix_timestamp()</td>\n<td>bigint</td>\n<td>所在时区的当前时间戳</td>\n</tr>\n<tr>\n<td>utc_timestamp</td>\n<td>timestamp</td>\n<td>UTC时区的当前时间</td>\n</tr>\n<tr>\n<td>timeofday()</td>\n<td>string</td>\n<td>Fri Dec 10 12:39:46 2021 CST</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-获取时间指定单位函数\"><a href=\"#2-获取时间指定单位函数\" class=\"headerlink\" title=\"2. 获取时间指定单位函数\"></a>2. 获取时间指定单位函数</h3><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>函数/方法</th>\n<th>输出类型</th>\n<th>说明/样式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>year(timestamp/date)</td>\n<td>int</td>\n<td>获取年 yyyy</td>\n</tr>\n<tr>\n<td>2</td>\n<td>quarter(timestamp/date)</td>\n<td>int</td>\n<td>获取季节（1,2,3,4）</td>\n</tr>\n<tr>\n<td>3</td>\n<td>month(timestamp/date)</td>\n<td>int</td>\n<td>获取月</td>\n</tr>\n<tr>\n<td>4</td>\n<td>monthname(timestamp/date)</td>\n<td>string</td>\n<td>获取月份名称 December</td>\n</tr>\n<tr>\n<td>5</td>\n<td>week(timestamp/date)</td>\n<td>int</td>\n<td>获取周（1-53）</td>\n</tr>\n<tr>\n<td>6</td>\n<td>weekofyear(timestamp/date)</td>\n<td>int</td>\n<td>获取周（1-53）</td>\n</tr>\n<tr>\n<td>7</td>\n<td>dayofweek(timestamp/date)</td>\n<td>int</td>\n<td>获取天（本周第多少天,周日算第一天）</td>\n</tr>\n<tr>\n<td>8</td>\n<td>dayname(timestamp/date)</td>\n<td>string</td>\n<td>获取天（星期几）Friday</td>\n</tr>\n<tr>\n<td>9</td>\n<td>next_day(timestamp/date, 10</td>\n<td>day(string))</td>\n<td>timestamp/date</td>\n</tr>\n<tr>\n<td>11</td>\n<td>day(timestamp/date)</td>\n<td>int</td>\n<td>获取天（本月第多少天）</td>\n</tr>\n<tr>\n<td>12</td>\n<td>dayofmonth(timestamp/date)</td>\n<td>int</td>\n<td>获取天（本月第多少天）</td>\n</tr>\n<tr>\n<td>13</td>\n<td>last_day(timestamp/date)</td>\n<td>timestamp/date</td>\n<td>获取天（本月的最后一天日期）</td>\n</tr>\n<tr>\n<td>14</td>\n<td>dayofyear(timestamp/date)</td>\n<td>int</td>\n<td>获取天（本年第多少天）</td>\n</tr>\n<tr>\n<td>15</td>\n<td>hour(timestamp/date)</td>\n<td>int</td>\n<td>获取小时</td>\n</tr>\n<tr>\n<td>16</td>\n<td>minute(timestamp date)</td>\n<td>int</td>\n<td>获取分钟</td>\n</tr>\n<tr>\n<td>17</td>\n<td>second(timestamp date)</td>\n<td>int</td>\n<td>获取秒</td>\n</tr>\n<tr>\n<td>18</td>\n<td>millisecond(timestamp date)</td>\n<td>int</td>\n<td>获取毫秒</td>\n</tr>\n<tr>\n<td>19</td>\n<td>extract (YEAR FROM timestamp)</td>\n<td>bigint</td>\n<td>获取参数指定的时间单位 YEAR MONTH DAY  HOUR MINUTE SECOND</td>\n</tr>\n<tr>\n<td>20</td>\n<td>date_part(‘year’,timestamp)</td>\n<td>bigint</td>\n<td>获取参数指定的时间单位 YEAR MONTH DAY  HOUR MINUTE SECOND</td>\n</tr>\n<tr>\n<td>21</td>\n<td>trunc(timestamp/date,unit)</td>\n<td>timestamp/date</td>\n<td>获取截断为指定单位的时间</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>unit</th>\n<th>截取说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SYYYY，YYYY，YEAR，SYEAR，YYY，YY，Y</td>\n<td>年</td>\n</tr>\n<tr>\n<td>Q</td>\n<td>季节</td>\n</tr>\n<tr>\n<td>MONTH，MON，MM，RM</td>\n<td>月</td>\n</tr>\n<tr>\n<td>WW</td>\n<td>最近的日期是与一年中的第一天相同的日期</td>\n</tr>\n<tr>\n<td>W</td>\n<td>最近的日期是与该月的第一天相同的星期几</td>\n</tr>\n<tr>\n<td>DDD，DD，J</td>\n<td>天</td>\n</tr>\n<tr>\n<td>DAY，DY，D</td>\n<td>星期几（星期一）的开始</td>\n</tr>\n<tr>\n<td>HH，HH12，HH24</td>\n<td>小时</td>\n</tr>\n<tr>\n<td>MI</td>\n<td>分钟</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-时间比较函数\"><a href=\"#3-时间比较函数\" class=\"headerlink\" title=\"3. 时间比较函数\"></a>3. 时间比较函数</h3><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>函数/方法</th>\n<th>输出类型</th>\n<th>说明/样式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>datediff(timestamp enddate,startdate)</td>\n<td>int</td>\n<td>返回endDate比startDate多多少天</td>\n</tr>\n<tr>\n<td>2</td>\n<td>int_months_between(timestamp t1,t2)</td>\n<td>int</td>\n<td>返回两个日期相差的整数月份个数</td>\n</tr>\n<tr>\n<td>3</td>\n<td>months_between(timestamp t1,t2)</td>\n<td>double</td>\n<td>返回浮点数的月数相差的数</td>\n</tr>\n<tr>\n<td>4</td>\n<td>date_cmp(DATE date1, DATE date2)</td>\n<td>int</td>\n<td>比较是否相等，返回-1,0,1,null四种数值</td>\n</tr>\n<tr>\n<td>5</td>\n<td>timestamp_cmp(timestamp t1，timestamp t2)</td>\n<td>int</td>\n<td>比较是否相等，返回-1,0,1,null四种数值</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-时间格式转换函数\"><a href=\"#4-时间格式转换函数\" class=\"headerlink\" title=\"4. 时间格式转换函数\"></a>4. 时间格式转换函数</h3><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>函数/方法</th>\n<th>输出类型</th>\n<th>说明/样式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>to_date(timestamp date)</td>\n<td>string</td>\n<td>返回时间戳对应的date</td>\n</tr>\n<tr>\n<td>2</td>\n<td>to_timestamp(bigint unixtime)</td>\n<td>timestamp</td>\n<td>返回整数对应的timestamp值</td>\n</tr>\n<tr>\n<td>3</td>\n<td>to_timestamp(string date，string pattern)</td>\n<td>timestamp</td>\n<td>返回字符串对应的timestamp值</td>\n</tr>\n<tr>\n<td>4</td>\n<td>to_utc_timestamp(timestamp t，string timezone)</td>\n<td>timestamp</td>\n<td>指定时区的时间戳转化为UTC时区的时间戳</td>\n</tr>\n<tr>\n<td>5</td>\n<td>from_timestamp(timestamp t，string pattern)</td>\n<td>string</td>\n<td>把timestamp按照pattern进行格式化</td>\n</tr>\n<tr>\n<td>6</td>\n<td>from_timestamp(string date，string pattern)</td>\n<td>string</td>\n<td>把date按照pattern进行格式化</td>\n</tr>\n<tr>\n<td>7</td>\n<td>from_unixtime(bigint unixtime)</td>\n<td>string</td>\n<td>把时间戳秒数转化为本地地区中的字符串</td>\n</tr>\n<tr>\n<td>8</td>\n<td>from_unixtime(bigint unixtime，string pattern）</td>\n<td>string</td>\n<td>时间戳转化为本地时区字符串，pattern格式</td>\n</tr>\n<tr>\n<td>9</td>\n<td>from_utc_timestamp（timestamp t，string timezone）</td>\n<td>timestamp</td>\n<td>UTC时区指定时间戳转化为指定时区时间戳</td>\n</tr>\n<tr>\n<td>10</td>\n<td>unix_timestamp(string datetime)</td>\n<td>bigint</td>\n<td>把string类型的date或日期转化成时间戳Unix</td>\n</tr>\n<tr>\n<td>11</td>\n<td>unix_timestamp(timestamp datetime)</td>\n<td>bigint</td>\n<td>把string类型的timestamp转化成时间戳Unix</td>\n</tr>\n<tr>\n<td>12</td>\n<td>unix_timestamp(string datetime，string pattern)</td>\n<td>bigint</td>\n<td>日期按pattern转化成时间戳Unix</td>\n</tr>\n</tbody></table>\n<h3 id=\"5-时间计算函数\"><a href=\"#5-时间计算函数\" class=\"headerlink\" title=\"5. 时间计算函数\"></a>5. 时间计算函数</h3><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>函数/方法</th>\n<th>输出类型</th>\n<th>说明/样式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>years_add(timestamp/date date, int/bigint years)</td>\n<td>timestamp/date</td>\n<td>增加指定年数</td>\n</tr>\n<tr>\n<td>2</td>\n<td>years_sub(timestamp/date date, int/bigint years)</td>\n<td>timestamp/date</td>\n<td>减少指定年数</td>\n</tr>\n<tr>\n<td>3</td>\n<td>months_add(timestamp/date date, int/bigint months)</td>\n<td>timestamp/date</td>\n<td>增加指定月数</td>\n</tr>\n<tr>\n<td>4</td>\n<td>months_sub(timestamp/date date, int/bigint months)</td>\n<td>timestamp/date</td>\n<td>减少指定月数</td>\n</tr>\n<tr>\n<td>5</td>\n<td>add_months(timestamp/date date, int/bigint months)</td>\n<td>timestamp/date</td>\n<td>增加指定月数</td>\n</tr>\n<tr>\n<td>6</td>\n<td>weeks_add(timestamp/date date, int/bigint weeks)</td>\n<td>timestamp/date</td>\n<td>增加指定周数</td>\n</tr>\n<tr>\n<td>7</td>\n<td>weeks_sub(timestamp/date date, int/bigint weeks)</td>\n<td>timestamp/date</td>\n<td>减少指定周数</td>\n</tr>\n<tr>\n<td>8</td>\n<td>days_add(timestamp/date startdate, int/bigint days)</td>\n<td>timestamp/date</td>\n<td>增加指定天数</td>\n</tr>\n<tr>\n<td>9</td>\n<td>days_sub(timestamp/date startdate, int/bigint days)</td>\n<td>timestamp/date</td>\n<td>减少指定天数</td>\n</tr>\n<tr>\n<td>10</td>\n<td>date_add(timestamp/date startdate, int/bigint days)</td>\n<td>timestamp/date</td>\n<td>增加指定天数</td>\n</tr>\n<tr>\n<td>11</td>\n<td>date_sub(timestamp/date startdate, int/bigint days)</td>\n<td>timestamp/date</td>\n<td>减少指定天数</td>\n</tr>\n<tr>\n<td>12</td>\n<td>adddate(timestamp/date startdate, int/int days)</td>\n<td>timestamp/date</td>\n<td>增加指定天数</td>\n</tr>\n<tr>\n<td>13</td>\n<td>subdate(timestamp/date startdate，bigint/int days)</td>\n<td>timestamp/date</td>\n<td>减少指定天数</td>\n</tr>\n<tr>\n<td>14</td>\n<td>hours_add(timestamp date, int/bigint hours)</td>\n<td>timestamp</td>\n<td>增加指定小时</td>\n</tr>\n<tr>\n<td>15</td>\n<td>hours_sub(timestamp date, int/bigint hours)</td>\n<td>timestamp</td>\n<td>减少指定小时</td>\n</tr>\n<tr>\n<td>16</td>\n<td>minutes_add(timestamp date, int/bigint minutes)</td>\n<td>timestamp</td>\n<td>增加指定分钟</td>\n</tr>\n<tr>\n<td>17</td>\n<td>minutes_sub(timestamp date, int/bigint minutes)</td>\n<td>timestamp</td>\n<td>减少指定分钟</td>\n</tr>\n<tr>\n<td>18</td>\n<td>seconds_add(timestamp date, int/bigint seconds)</td>\n<td>timestamp</td>\n<td>增加指定秒数</td>\n</tr>\n<tr>\n<td>19</td>\n<td>seconds_sub(timestamp date, int/bigint seconds)</td>\n<td>timestamp</td>\n<td>减少指定秒数</td>\n</tr>\n<tr>\n<td>20</td>\n<td>milliseconds_add(timestamp t, int/bigint s）</td>\n<td>timestamp</td>\n<td>增加指定毫秒数</td>\n</tr>\n<tr>\n<td>21</td>\n<td>milliseconds_sub(timestamp t, int/bigint s）</td>\n<td>timestamp</td>\n<td>减少指定毫秒数</td>\n</tr>\n<tr>\n<td>22</td>\n<td>microseconds_add(timestamp t, int/bigint s)</td>\n<td>timestamp</td>\n<td>增加指定微秒数</td>\n</tr>\n<tr>\n<td>23</td>\n<td>microseconds_sub(timestamp t, int/bigint s)</td>\n<td>timestamp</td>\n<td>减少指定微秒数</td>\n</tr>\n<tr>\n<td>24</td>\n<td>nanoseconds_add(timestamp t, int/bigint s）</td>\n<td>timestamp</td>\n<td>增加指定纳秒数</td>\n</tr>\n<tr>\n<td>25</td>\n<td>nanoseconds_sub(timestamp t, int/bigint s）</td>\n<td>timestamp</td>\n<td>减少指定纳秒数</td>\n</tr>\n<tr>\n<td>26</td>\n<td>date_add(timestamp/date startdate, interval_expression)</td>\n<td>timestamp/date</td>\n<td>使用参数计算日期增量值（增加）</td>\n</tr>\n<tr>\n<td>27</td>\n<td>date_sub(timestamp/date startdate, interval_expression)</td>\n<td>timestamp/date</td>\n<td>使用参数计算日期增量值（减少）</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h2><h3 id=\"启动类-1\"><a href=\"#启动类-1\" class=\"headerlink\" title=\"启动类\"></a>启动类</h3><h3 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>keys  *</td>\n<td>查看当前库的所有键</td>\n</tr>\n<tr>\n<td>exists <key></td>\n<td>判断某个键是否存在</td>\n</tr>\n<tr>\n<td>type <key></td>\n<td>查看键的类型</td>\n</tr>\n<tr>\n<td>del <key></td>\n<td>删除某个键</td>\n</tr>\n<tr>\n<td>expire <key> <seconds></td>\n<td>为键值设置过期时间，单位秒</td>\n</tr>\n<tr>\n<td>ttl <key></td>\n<td>查看还有多久过期,-1表示永不过期,-2表示已过期</td>\n</tr>\n<tr>\n<td>dbsize</td>\n<td>查看当前数据库中key的数量</td>\n</tr>\n<tr>\n<td>flushdb</td>\n<td>清空当前库</td>\n</tr>\n<tr>\n<td>Flushall</td>\n<td>通杀全部库</td>\n</tr>\n</tbody></table>\n<h3 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>get <key></td>\n<td>查询对应键值</td>\n</tr>\n<tr>\n<td>set <key> <value></td>\n<td>添加键值对</td>\n</tr>\n<tr>\n<td>append <key> <value></td>\n<td>将给定的<value>追加到原值的末尾</td>\n</tr>\n<tr>\n<td>strlen <key></td>\n<td>获取值的长度</td>\n</tr>\n<tr>\n<td>setnx <key> <value></td>\n<td>只有在key 不存在时设置key的值</td>\n</tr>\n<tr>\n<td>incr <key></td>\n<td>将key中存储的数字值增1只能对数字值操作，如果为空，新增值为1</td>\n</tr>\n<tr>\n<td>decr <key></td>\n<td>将key中存储的数字值减1只能对数字之操作，如果为空,新增值为-1</td>\n</tr>\n<tr>\n<td>incrby /decrby <key> 步长</td>\n<td>将key中存储的数字值增减，自定义步长</td>\n</tr>\n<tr>\n<td>mset <key1> <value1> <key2> <value2></td>\n<td>同时设置一个或多个key-value对</td>\n</tr>\n<tr>\n<td>mget <key1> <key2>  <key3></td>\n<td>同时获取一个或多个value</td>\n</tr>\n<tr>\n<td>msetnx <key1> <value1> <key2> <value2></td>\n<td>同时设置一个或多个key-value对，当且仅当所有给定的key都不存在</td>\n</tr>\n<tr>\n<td>getrange <key> &lt;起始位置&gt; &lt;结束位置&gt;</td>\n<td>获得值的范围,类似java中的substring</td>\n</tr>\n<tr>\n<td>setrange <key> &lt;起始位置&gt; <value></td>\n<td>用<value>覆盖<key>所存储的字符串值，从&lt;起始位置&gt;开始</td>\n</tr>\n<tr>\n<td>setex <key> &lt;过期时间&gt; <value></td>\n<td>设置键值的同时，设置过去时间，单位秒</td>\n</tr>\n<tr>\n<td>getset <key> <value></td>\n<td>以新换旧,设置了新值的同时获取旧值</td>\n</tr>\n</tbody></table>\n<h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>lpush/rpush  <key>  <value1>  <value2></td>\n<td>从左边/右边插入一个或多个值。</td>\n</tr>\n<tr>\n<td>lpop/rpop  <key></td>\n<td>从左边/右边吐出一个值。值在键在，值光键亡。</td>\n</tr>\n<tr>\n<td>rpoplpush  <key1>  <key2></td>\n<td>从<key1>列表右边吐出一个值，插到<key2>列表左边</td>\n</tr>\n<tr>\n<td>lrange <key> <start> <stop></td>\n<td>按照索引下标获得元素(从左到右)</td>\n</tr>\n<tr>\n<td>lindex <key> <index></td>\n<td>按照索引下标获得元素(从左到右)</td>\n</tr>\n<tr>\n<td>llen <key></td>\n<td>获得列表长度</td>\n</tr>\n<tr>\n<td>linsert <key>  before <value>  <newvalue></td>\n<td>在<value>的后面插入<newvalue> 插入值</td>\n</tr>\n<tr>\n<td>lrem <key> <n>  <value></td>\n<td>从左边删除n个value(从左到右)</td>\n</tr>\n</tbody></table>\n<h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sadd <key>  <value1>  <value2> ….</td>\n<td>将一个或多个 member 元素加入到集合 key 当中，已经存在于集合的 member 元素将被忽略。</td>\n</tr>\n<tr>\n<td>smembers <key></td>\n<td>取出该集合的所有值。</td>\n</tr>\n<tr>\n<td>sismember <key>  <value></td>\n<td>判断集合<key>是否为含有该<value>值，有返回1，没有返回0</td>\n</tr>\n<tr>\n<td>scard  <key></td>\n<td>返回该集合的元素个数。</td>\n</tr>\n<tr>\n<td>srem <key> <value1> <value2> ….</td>\n<td>删除集合中的某个元素。</td>\n</tr>\n<tr>\n<td>spop <key></td>\n<td>随机从该集合中吐出一个值。</td>\n</tr>\n<tr>\n<td>srandmember <key> <n></td>\n<td>随机从该集合中取出n个值。不会从集合中删除</td>\n</tr>\n<tr>\n<td>sinter <key1> <key2></td>\n<td>返回两个集合的交集元素。</td>\n</tr>\n<tr>\n<td>sunion <key1> <key2></td>\n<td>返回两个集合的并集元素。</td>\n</tr>\n<tr>\n<td>sdiff <key1> <key2></td>\n<td>返回两个集合的差集元素。</td>\n</tr>\n</tbody></table>\n<h3 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hset <key>  <field>  <value></td>\n<td>给<key>集合中的  <field>键赋值<value></td>\n</tr>\n<tr>\n<td>hget <key1>  <field></td>\n<td>从<key1>集合<field> 取出 value</td>\n</tr>\n<tr>\n<td>hmset <key1>  <field1> <value1> <field2> <value2>…</td>\n<td>批量设置hash的值</td>\n</tr>\n<tr>\n<td>hexists key  <field></td>\n<td>查看哈希表 key 中，给定域 field 是否存在。</td>\n</tr>\n<tr>\n<td>hkeys <key></td>\n<td>列出该hash集合的所有field</td>\n</tr>\n<tr>\n<td>hvals <key></td>\n<td>列出该hash集合的所有value</td>\n</tr>\n<tr>\n<td>hincrby <key> <field>  <increment></td>\n<td>为哈希表 key 中的域 field 的值加上增量 increment</td>\n</tr>\n<tr>\n<td>hsetnx <key>  <field> <value></td>\n<td>将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在</td>\n</tr>\n</tbody></table>\n<h3 id=\"zset-Sorted-set\"><a href=\"#zset-Sorted-set\" class=\"headerlink\" title=\"zset(Sorted set)\"></a>zset(Sorted set)</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>zadd  <key> <score1> <value1>  <score2> <value2>…</td>\n<td>将一个或多个 member 元素及其 score 值加入到有序集 key 当中</td>\n</tr>\n<tr>\n<td>zrange <key>  <start> <stop>  [WITHSCORES]</td>\n<td>返回有序集 key 中，下标在<start> <stop>之间的元素带WITHSCORES，可以让分数一起和值返回到结果集。</td>\n</tr>\n<tr>\n<td>zrangebyscore key min max [withscores] [limit offset count]</td>\n<td>返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。</td>\n</tr>\n<tr>\n<td>zrevrangebyscore key max min [withscores] [limit offset count]</td>\n<td>同上，改为从大到小排列。</td>\n</tr>\n<tr>\n<td>zincrby <key> <increment> <value></td>\n<td>为元素的score加上增量</td>\n</tr>\n<tr>\n<td>zrem  <key>  <value></td>\n<td>删除该集合下，指定值的元素</td>\n</tr>\n<tr>\n<td>zcount <key>  <min>  <max></td>\n<td>统计该集合，分数区间内的元素个数</td>\n</tr>\n<tr>\n<td>zrank <key>  <value></td>\n<td>返回该值在集合中的排名，从0开始。</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"Flink\"><a href=\"#Flink\" class=\"headerlink\" title=\"Flink\"></a>Flink</h2><h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><pre class=\"language-none\"><code class=\"language-none\">.&#x2F;start-cluster.sh </code></pre>\n\n<h3 id=\"run\"><a href=\"#run\" class=\"headerlink\" title=\"run\"></a>run</h3><pre class=\"language-none\"><code class=\"language-none\">.&#x2F;bin&#x2F;flink run [OPTIONS]\n\n.&#x2F;bin&#x2F;flink run -m yarn-cluster -c com.wang.flink.WordCount &#x2F;opt&#x2F;app&#x2F;WordCount.jar</code></pre>\n\n<table>\n<thead>\n<tr>\n<th>OPTIONS</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-d</td>\n<td>detached 是否使用分离模式</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>jobmanager 指定提交的jobmanager</td>\n</tr>\n<tr>\n<td>-yat</td>\n<td>–yarnapplicationType 设置yarn应用的类型</td>\n</tr>\n<tr>\n<td>-yD</td>\n<td>使用给定属性的值</td>\n</tr>\n<tr>\n<td>-yd</td>\n<td>–yarndetached 使用yarn分离模式</td>\n</tr>\n<tr>\n<td>-yh</td>\n<td>–yarnhelp yarn session的帮助</td>\n</tr>\n<tr>\n<td>-yid</td>\n<td>–yarnapplicationId 挂到正在运行的yarnsession上</td>\n</tr>\n<tr>\n<td>-yj</td>\n<td>–yarnjar Flink jar文件的路径</td>\n</tr>\n<tr>\n<td>-yjm</td>\n<td>–yarnjobManagerMemory jobmanager的内存(单位M)</td>\n</tr>\n<tr>\n<td>-ynl</td>\n<td>–yarnnodeLabel 指定 YARN 应用程序 YARN 节点标签</td>\n</tr>\n<tr>\n<td>-ynm</td>\n<td>–yarnname 自定义yarn应用名称</td>\n</tr>\n<tr>\n<td>-yq</td>\n<td>–yarnquery 显示yarn的可用资源</td>\n</tr>\n<tr>\n<td>-yqu</td>\n<td>–yarnqueue 指定yarn队列</td>\n</tr>\n<tr>\n<td>-ys</td>\n<td>–yarnslots 指定每个taskmanager的slots数</td>\n</tr>\n<tr>\n<td>-yt</td>\n<td>yarnship 在指定目录中传输文件</td>\n</tr>\n<tr>\n<td>-ytm</td>\n<td>–yarntaskManagerMemory 每个taskmanager的内存</td>\n</tr>\n<tr>\n<td>-yz</td>\n<td>–yarnzookeeperNamespace 用来创建ha的zk子路径的命名空间</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>–zookeeperNamespace 用来创建ha的zk子路径的命名空间</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>并行度</td>\n</tr>\n<tr>\n<td>-yn</td>\n<td>需要分配的YARN容器个数(=任务管理器的数量)</td>\n</tr>\n</tbody></table>\n<h3 id=\"info\"><a href=\"#info\" class=\"headerlink\" title=\"info\"></a>info</h3><pre class=\"language-none\"><code class=\"language-none\">.&#x2F;bin&#x2F;flink info [OPTIONS]</code></pre>\n<table>\n<thead>\n<tr>\n<th>OPTIONS</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-c</td>\n<td>程序进入点，主类</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>并行度</td>\n</tr>\n</tbody></table>\n<h3 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h3><pre class=\"language-none\"><code class=\"language-none\">.&#x2F;bin&#x2F;flink list [OPTIONS]</code></pre>\n<table>\n<thead>\n<tr>\n<th>OPTIONS</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-a</td>\n<td>–all 显示所有应用和对应的job id</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>–running 显示正在运行的应用和job id</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>–scheduled 显示调度的应用和job id</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>–jobmanager 指定连接的jobmanager</td>\n</tr>\n<tr>\n<td>-yid</td>\n<td>–yarnapplicationId 挂到指定的yarn id对应的yarn session上</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>–zookeeperNamespace 用来创建ha的zk子路径的命名空间</td>\n</tr>\n</tbody></table>\n<h3 id=\"stop\"><a href=\"#stop\" class=\"headerlink\" title=\"stop\"></a>stop</h3><pre class=\"language-none\"><code class=\"language-none\">.&#x2F;bin&#x2F;flink stop  [OPTIONS] &lt;Job ID&gt;</code></pre>\n<table>\n<thead>\n<tr>\n<th>OPTIONS</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-d</td>\n<td>在采取保存点和停止管道之前，发送MAX_WATERMARK</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>savepointPath 保存点的路径 ‘xxxxx’</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>–jobmanager 指定连接的jobmanager</td>\n</tr>\n<tr>\n<td>-yid</td>\n<td>–yarnapplicationId 挂到指定的yarn id对应的yarn session上</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>–zookeeperNamespace 用来创建ha的zk子路径的命名空间</td>\n</tr>\n</tbody></table>\n<h3 id=\"cancel-弱化\"><a href=\"#cancel-弱化\" class=\"headerlink\" title=\"cancel(弱化)\"></a>cancel(弱化)</h3><pre class=\"language-none\"><code class=\"language-none\">.&#x2F;bin&#x2F;flink cancel  [OPTIONS] &lt;Job ID&gt;</code></pre>\n<table>\n<thead>\n<tr>\n<th>OPTIONS</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-s</td>\n<td>使用 “stop “代替</td>\n</tr>\n<tr>\n<td>-D</td>\n<td>允许指定多个通用配置选项</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>要连接的JobManager的地址</td>\n</tr>\n<tr>\n<td>-yid</td>\n<td>–yarnapplicationId 挂到指定的yarn id对应的yarn session上</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>–zookeeperNamespace 用来创建ha的zk子路径的命名空间</td>\n</tr>\n</tbody></table>\n<h3 id=\"savepoint\"><a href=\"#savepoint\" class=\"headerlink\" title=\"savepoint\"></a>savepoint</h3><pre class=\"language-none\"><code class=\"language-none\">.&#x2F;bin&#x2F;flink savepoint  [OPTIONS] &lt;Job ID&gt;</code></pre>\n<table>\n<thead>\n<tr>\n<th>OPTIONS</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-d</td>\n<td>要处理的保存点的路径</td>\n</tr>\n<tr>\n<td>-j</td>\n<td>Flink程序的JAR文件</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>要连接的JobManager的地址</td>\n</tr>\n<tr>\n<td>-yid</td>\n<td>–yarnapplicationId 挂到指定的yarn id对应的yarn session上</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>–zookeeperNamespace 用来创建ha的zk子路径的命名空间</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Linux（vi-vim）\"><a href=\"#Linux（vi-vim）\" class=\"headerlink\" title=\"Linux（vi/vim）\"></a>Linux（vi/vim）</h2><h3 id=\"一般模式\"><a href=\"#一般模式\" class=\"headerlink\" title=\"一般模式\"></a>一般模式</h3><table>\n<thead>\n<tr>\n<th>语法</th>\n<th>功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>yy</td>\n<td>复制光标当前一行</td>\n</tr>\n<tr>\n<td>y数字y</td>\n<td>复制一段（从第几行到第几行）</td>\n</tr>\n<tr>\n<td>p</td>\n<td>箭头移动到目的行粘贴</td>\n</tr>\n<tr>\n<td>u</td>\n<td>撤销上一步</td>\n</tr>\n<tr>\n<td>dd</td>\n<td>删除光标当前行</td>\n</tr>\n<tr>\n<td>d数字d</td>\n<td>删除光标（含）后多少行</td>\n</tr>\n<tr>\n<td>x</td>\n<td>删除一个字母，相当于del</td>\n</tr>\n<tr>\n<td>X</td>\n<td>删除一个字母，相当于Backspace</td>\n</tr>\n<tr>\n<td>yw</td>\n<td>复制一个词</td>\n</tr>\n<tr>\n<td>dw</td>\n<td>删除一个词</td>\n</tr>\n<tr>\n<td>shift+^</td>\n<td>移动到行头</td>\n</tr>\n<tr>\n<td>shift+$</td>\n<td>移动到行尾</td>\n</tr>\n<tr>\n<td>1+shift+g</td>\n<td>移动到页头，数字</td>\n</tr>\n<tr>\n<td>shift+g</td>\n<td>移动到页尾</td>\n</tr>\n<tr>\n<td>数字N+shift+g</td>\n<td>移动到目标行</td>\n</tr>\n</tbody></table>\n<h3 id=\"编辑模式\"><a href=\"#编辑模式\" class=\"headerlink\" title=\"编辑模式\"></a>编辑模式</h3><table>\n<thead>\n<tr>\n<th>按键</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>i</td>\n<td>当前光标前</td>\n</tr>\n<tr>\n<td>a</td>\n<td>当前光标后</td>\n</tr>\n<tr>\n<td>o</td>\n<td>当前光标行的下一行</td>\n</tr>\n<tr>\n<td>I</td>\n<td>光标所在行最前</td>\n</tr>\n<tr>\n<td>A</td>\n<td>光标所在行最后</td>\n</tr>\n<tr>\n<td>O</td>\n<td>当前光标行的上一行</td>\n</tr>\n</tbody></table>\n<h3 id=\"指令模式\"><a href=\"#指令模式\" class=\"headerlink\" title=\"指令模式\"></a>指令模式</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>:w</td>\n<td>保存</td>\n</tr>\n<tr>\n<td>:q</td>\n<td>退出</td>\n</tr>\n<tr>\n<td>:!</td>\n<td>强制执行</td>\n</tr>\n<tr>\n<td>/要查找的词</td>\n<td>n 查找下一个，N 往上查找</td>\n</tr>\n<tr>\n<td>? 要查找的词</td>\n<td>n是查找上一个，shift+n是往下查找</td>\n</tr>\n<tr>\n<td>:set nu</td>\n<td>显示行号</td>\n</tr>\n<tr>\n<td>:set nonu</td>\n<td>关闭行号</td>\n</tr>\n</tbody></table>\n<h3 id=\"压缩和解压\"><a href=\"#压缩和解压\" class=\"headerlink\" title=\"压缩和解压\"></a>压缩和解压</h3><h4 id=\"gzip-gunzip-压缩\"><a href=\"#gzip-gunzip-压缩\" class=\"headerlink\" title=\"gzip/gunzip 压缩\"></a>gzip/gunzip 压缩</h4><p>（1）只能压缩文件不能压缩目录</p>\n<p>（2）不保留原来的文件</p>\n<p>gzip压缩：gzip hello.txt</p>\n<p>gunzip解压缩文件：gunzip hello.txt.gz</p>\n<h4 id=\"zip-unzip-压缩\"><a href=\"#zip-unzip-压缩\" class=\"headerlink\" title=\"zip/unzip 压缩\"></a>zip/unzip 压缩</h4><p>可以压缩目录且保留源文件</p>\n<p>zip压缩（压缩 1.txt 和2.txt，压缩后的名称为mypackage.zip）：zip hello.zip hello.txt world.txt</p>\n<p>unzip解压：unzip hello.zip</p>\n<p>unzip解压到指定目录：unzip hello.zip -d /opt</p>\n<h4 id=\"tar-打包\"><a href=\"#tar-打包\" class=\"headerlink\" title=\"tar 打包\"></a>tar 打包</h4><p>tar压缩多个文件：tar -zcvf hello.txt world.txt</p>\n<p>tar压缩目录：tar -zcvf hello.tar.gz opt/</p>\n<p>tar解压到当前目录：tar -zxvf hello.tar.gz</p>\n<p>tar解压到指定目录：tar -zxvf hello.tar.gz -C /opt</p>\n<h3 id=\"RPM\"><a href=\"#RPM\" class=\"headerlink\" title=\"RPM\"></a>RPM</h3><p>RPM查询命令：rpm -qa |grep firefox</p>\n<p>RPM卸载命令：</p>\n<p>rpm -e xxxxxx</p>\n<p>rpm -e –nodeps xxxxxx（不检查依赖）</p>\n<p>RPM安装命令：</p>\n<p>rpm -ivh xxxxxx.rpm</p>\n<p>rpm -ivh –nodeps fxxxxxx.rpm（–nodeps，不检测依赖进度）</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-i</td>\n<td>-i=install，安装</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>-v=verbose，显示详细信息</td>\n</tr>\n<tr>\n<td>-h</td>\n<td>-h=hash，进度条</td>\n</tr>\n<tr>\n<td>–nodeps</td>\n<td>–nodeps，不检测依赖进度</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"Shell\"><a href=\"#Shell\" class=\"headerlink\" title=\"Shell\"></a>Shell</h2><h3 id=\"输入-输出重定向\"><a href=\"#输入-输出重定向\" class=\"headerlink\" title=\"输入/输出重定向\"></a>输入/输出重定向</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>command &gt; file</td>\n<td>将输出重定向到 file</td>\n</tr>\n<tr>\n<td>command &lt; file</td>\n<td>将输入重定向到 file</td>\n</tr>\n<tr>\n<td>command &gt;&gt; file</td>\n<td>将输出以追加的方式重定向到 file</td>\n</tr>\n<tr>\n<td>n &gt; file</td>\n<td>将文件描述符为 n 的文件重定向到 file</td>\n</tr>\n<tr>\n<td>n &gt;&gt; file</td>\n<td>将文件描述符为 n 的文件以追加的方式重定向到 file</td>\n</tr>\n<tr>\n<td>n &gt;&amp; m</td>\n<td>将输出文件 m 和 n 合并</td>\n</tr>\n<tr>\n<td>n &lt;&amp; m</td>\n<td>将输入文件 m 和 n 合并</td>\n</tr>\n<tr>\n<td>&lt;&lt; tag</td>\n<td>将开始标记 tag 和结束标记 tag 之间的内容作为输入</td>\n</tr>\n</tbody></table>\n<h3 id=\"脚本编辑\"><a href=\"#脚本编辑\" class=\"headerlink\" title=\"脚本编辑\"></a>脚本编辑</h3><table>\n<thead>\n<tr>\n<th>快捷方式</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>shift</td>\n<td>参数左移</td>\n</tr>\n<tr>\n<td>$@</td>\n<td>所有的参数</td>\n</tr>\n<tr>\n<td>$#</td>\n<td>参数的个数</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"Hadoop\"><a href=\"#Hadoop\" class=\"headerlink\" title=\"Hadoop\"></a>Hadoop</h2><h3 id=\"启动类命令\"><a href=\"#启动类命令\" class=\"headerlink\" title=\"启动类命令\"></a>启动类命令</h3><table>\n<thead>\n<tr>\n<th>功能说明</th>\n<th>命令脚本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>启动hdfs集群</td>\n<td>sbin/start-dfs.sh</td>\n</tr>\n<tr>\n<td>启动yarn</td>\n<td>sbin/start-yarn.sh</td>\n</tr>\n</tbody></table>\n<h3 id=\"hadoop-fs-hdfs-dfs-命令\"><a href=\"#hadoop-fs-hdfs-dfs-命令\" class=\"headerlink\" title=\"hadoop fs/hdfs dfs 命令\"></a>hadoop fs/hdfs dfs 命令</h3><table>\n<thead>\n<tr>\n<th>功能说明</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>创建目录</td>\n<td>hdfs dfs -mkdir -p /data/flink</td>\n</tr>\n<tr>\n<td>显示目录</td>\n<td>hdfs dfs -ls /</td>\n</tr>\n<tr>\n<td>从HDFS拷贝到本地</td>\n<td>hdfs dfs -copyToLocal /data/data.txt ./</td>\n</tr>\n<tr>\n<td>文件上传到集群(从本地)</td>\n<td>hhdfs dfs -copyFromLocal data.txt /</td>\n</tr>\n<tr>\n<td>文件下载</td>\n<td>hdfs dfs -get /data/flink</td>\n</tr>\n<tr>\n<td>删除集群的文件</td>\n<td>hdfs dfs -rm /data/flink</td>\n</tr>\n<tr>\n<td>删除文件夹</td>\n<td>hdfs dfs -rm -r -skipTrash /data</td>\n</tr>\n<tr>\n<td>从本地剪切粘贴到HDFS</td>\n<td>hdfs dfs  -moveFromLocal data.txt /data/</td>\n</tr>\n<tr>\n<td>追加一个文件到已经存在的文件末尾hdfs dfs -appendToFile data1.txt /data/data.txt</td>\n<td></td>\n</tr>\n<tr>\n<td>显示文件内容</td>\n<td>hdfs dfs -cat data.txt</td>\n</tr>\n<tr>\n<td>修改文件所属权限</td>\n<td>hdfs dfs  -chmod  777 xxx.sh</td>\n</tr>\n<tr>\n<td>修改文件所属用户组</td>\n<td>hdfs dfs  -chown  root:root data.txt</td>\n</tr>\n<tr>\n<td>从HDFS的一个路径拷贝到HDFS的另一个路径</td>\n<td>hdfs dfs -cp data.txt /data1.txt</td>\n</tr>\n<tr>\n<td>在HDFS目录中移动文件</td>\n<td>hdfs dfs -mv data.txt /opt/</td>\n</tr>\n<tr>\n<td>合并下载多个文件</td>\n<td>hdfs dfs  -getmerge /data/* ./data_merge.txt</td>\n</tr>\n<tr>\n<td>hadoop fs -put</td>\n<td>等同于copyFromLocal</td>\n</tr>\n<tr>\n<td>显示一个文件的末尾</td>\n<td>hdfs dfs -tail data.txt</td>\n</tr>\n<tr>\n<td>删除文件或文件夹</td>\n<td>hdfs dfs -rm /data/data.txt</td>\n</tr>\n<tr>\n<td>删除空目录</td>\n<td>hdfs dfs -rmdir /data</td>\n</tr>\n<tr>\n<td>统计文件夹的大小信息</td>\n<td>hdfs dfs -s -h /data</td>\n</tr>\n<tr>\n<td>统计文件夹下的文件大小信息</td>\n<td>hdfs dfs  -h /data</td>\n</tr>\n<tr>\n<td>设置HDFS中文件的副本数量</td>\n<td>hdfs dfs -setrep 3 /data/data.txt</td>\n</tr>\n</tbody></table>\n<h3 id=\"yarn命令\"><a href=\"#yarn命令\" class=\"headerlink\" title=\"yarn命令\"></a>yarn命令</h3><table>\n<thead>\n<tr>\n<th>功能说明</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查看正在运行的yarn任务列表</td>\n<td>yarn application -list appID</td>\n</tr>\n<tr>\n<td>kill掉指定id的yarn任务</td>\n<td>yarn application -kill appID</td>\n</tr>\n<tr>\n<td>查看任务日志信息</td>\n<td>yarn logs -applicationId appID</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"Zookeeper\"><a href=\"#Zookeeper\" class=\"headerlink\" title=\"Zookeeper\"></a>Zookeeper</h2><h3 id=\"启动命令\"><a href=\"#启动命令\" class=\"headerlink\" title=\"启动命令\"></a>启动命令</h3><table>\n<thead>\n<tr>\n<th>功能说明</th>\n<th>命令脚本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>启动zookeeper服务</td>\n<td>zkServer.sh start</td>\n</tr>\n<tr>\n<td>查看zookeeper状态</td>\n<td>zkServer.sh status</td>\n</tr>\n<tr>\n<td>停止zookeeper服务</td>\n<td>zkServer.sh stop</td>\n</tr>\n<tr>\n<td>启动zookeeper客户端</td>\n<td>zkCli.sh -server 127.0.0.1:2181</td>\n</tr>\n<tr>\n<td>退出zookeeper客户端</td>\n<td>quit</td>\n</tr>\n</tbody></table>\n<h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><table>\n<thead>\n<tr>\n<th>功能说明</th>\n<th>命令脚本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>当前znode中所包含的内容</td>\n<td>ls /</td>\n</tr>\n<tr>\n<td>创建普通节点(前面是节点的路径，后面是值）</td>\n<td>create /bigdata/flink “flink”</td>\n</tr>\n<tr>\n<td>获取节点的值</td>\n<td>get /bigdata</td>\n</tr>\n<tr>\n<td>修改节点的值</td>\n<td>set /bigdata/flink “flinksql”</td>\n</tr>\n<tr>\n<td>删除节点</td>\n<td>delete /bigdata/flink</td>\n</tr>\n<tr>\n<td>递归删除节点</td>\n<td>rmr /bigdata</td>\n</tr>\n</tbody></table>\n<h3 id=\"四字母命令\"><a href=\"#四字母命令\" class=\"headerlink\" title=\"四字母命令\"></a>四字母命令</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能说明</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>conf</td>\n<td>zk服务配置的详细信息</td>\n<td>echo conf | nc 127.0.0.1 2181</td>\n</tr>\n<tr>\n<td>stat</td>\n<td>客户端与zk连接的简要信息</td>\n<td>参考上面</td>\n</tr>\n<tr>\n<td>srvr</td>\n<td>zk服务的详细信息</td>\n<td>参考上面</td>\n</tr>\n<tr>\n<td>cons</td>\n<td>客户端与zk连接的详细信息</td>\n<td>参考上面</td>\n</tr>\n<tr>\n<td>mntr</td>\n<td>zk服务目前的性能状况</td>\n<td>参考上面</td>\n</tr>\n<tr>\n<td>crst</td>\n<td>重置当前的所有连接、会话</td>\n<td>参考上面</td>\n</tr>\n<tr>\n<td>dump</td>\n<td>列出未经处理的会话和连接信息</td>\n<td>参考上面</td>\n</tr>\n<tr>\n<td>envi</td>\n<td>列出zk的版本信息、主机名称、Java版本、服务器名称等等</td>\n<td>参考上面</td>\n</tr>\n<tr>\n<td>ruok</td>\n<td>测试服务器是否正在运行，如果在运行返回imok，否则返回空</td>\n<td>参考上面</td>\n</tr>\n<tr>\n<td>srst</td>\n<td>重置Zookeeper的所有统计信息</td>\n<td>参考上面</td>\n</tr>\n<tr>\n<td>wchs</td>\n<td>列出watch的总数，连接数</td>\n<td>参考上面</td>\n</tr>\n<tr>\n<td>wchp</td>\n<td>列出所有watch的路径及sessionID</td>\n<td>参考上面</td>\n</tr>\n<tr>\n<td>mntr</td>\n<td>列出集群的关键性能数据，包括zk的版本、node数量、临时节点数等等</td>\n<td>参考上面</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h2><p><strong>注:</strong> 这里机器我只写一个。命令你们也可使用 ./bin/xx.sh (如：./bin/kafka-topics.sh) </p>\n<h3 id=\"查看当前服务器中的所有topic\"><a href=\"#查看当前服务器中的所有topic\" class=\"headerlink\" title=\"查看当前服务器中的所有topic\"></a>查看当前服务器中的所有topic</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-topics --zookeeper xxxxxx:2181 --list --exclude-internal \n\n说明：\n\nexclude-internal：排除kafka内部topic\n\n比如： --exclude-internal  --topic <span class=\"token string\">\"test_.*\"</span></code></pre>\n<h3 id=\"创建topic\"><a href=\"#创建topic\" class=\"headerlink\" title=\"创建topic\"></a>创建topic</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-topics --zookeeper xxxxxx:2181  --create \n--replication-factor \n--partitions <span class=\"token number\">1</span> \n--topic topic_name\n\n说明：\n\n--topic 定义topic名\n\n--replication-factor  定义副本数\n\n--partitions  定义分区数</code></pre>\n\n<h3 id=\"删除topic\"><a href=\"#删除topic\" class=\"headerlink\" title=\"删除topic\"></a>删除topic</h3><p><strong>注意:</strong> 需要server.properties中设置delete.topic.enable=true否则只是标记删除</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-topics --zookeeper xxxxxx:2181 --delete --topic topic_name</code></pre>\n\n<h3 id=\"生产者\"><a href=\"#生产者\" class=\"headerlink\" title=\"生产者\"></a>生产者</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-console-producer --broker-list xxxxxx:9092 --topic topic_name\n\n可加：--property parse.key<span class=\"token operator\">=</span>true（有key消息）</code></pre>\n<h3 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-console-consumer --bootstrap-server xxxxxx:9092 --topic topic_name\n\n注：可选\n\n--from-beginning：会把主题中以往所有的数据都读取出来\n\n--whitelist <span class=\"token string\">'.*'</span> ：消费所有的topic\n\n--property print.key<span class=\"token operator\">=</span>true：显示key进行消费\n\n--partition <span class=\"token number\">0</span>：指定分区消费\n\n--offset：指定起始偏移量消费</code></pre>\n\n<h3 id=\"查看某个Topic的详情\"><a href=\"#查看某个Topic的详情\" class=\"headerlink\" title=\"查看某个Topic的详情\"></a>查看某个Topic的详情</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-topics --zookeeper xxxxxx:2181 --describe --topic topic_name</code></pre>\n\n<h3 id=\"修改分区数\"><a href=\"#修改分区数\" class=\"headerlink\" title=\"修改分区数\"></a>修改分区数</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-topics --zookeeper xxxxxx:2181 --alter --topic topic_name --partitions <span class=\"token number\">6</span></code></pre>\n\n<h3 id=\"查看某个消费者组信息\"><a href=\"#查看某个消费者组信息\" class=\"headerlink\" title=\"查看某个消费者组信息\"></a>查看某个消费者组信息</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-consumer-groups --bootstrap-server  xxxxxx:9092  --describe --group group_name </code></pre>\n<h3 id=\"删除消费者组\"><a href=\"#删除消费者组\" class=\"headerlink\" title=\"删除消费者组\"></a>删除消费者组</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-consumer-groups --bootstrap-server  xxxxxx:9092  ---delete --group group_name </code></pre>\n\n<h3 id=\"重置offset\"><a href=\"#重置offset\" class=\"headerlink\" title=\"重置offset\"></a>重置offset</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-consumer-groups --bootstrap-server  xxxxxx:9092  --group group_name\n\n--reset-offsets --all-topics --to-latest --execute </code></pre>\n\n<h3 id=\"leader重新选举\"><a href=\"#leader重新选举\" class=\"headerlink\" title=\"leader重新选举\"></a>leader重新选举</h3><p>指定Topic指定分区用重新PREFERRED：优先副本策略 进行Leader重选举</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-leader-election --bootstrap-server xxxxxx:9092 \n--topic topic_name --election-type PREFERRED --partition <span class=\"token number\">0</span></code></pre>\n\n<p>所有Topic所有分区用重新PREFERRED：优先副本策略 进行Leader重选举</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-leader-election --bootstrap-server xxxxxx:9092 \n--election-type preferred  --all-topic-partitions</code></pre>\n\n<h3 id=\"查询kafka版本信息\"><a href=\"#查询kafka版本信息\" class=\"headerlink\" title=\"查询kafka版本信息\"></a>查询kafka版本信息</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-configs --bootstrap-server xxxxxx:9092\n--describe --version</code></pre>\n<h3 id=\"增删改配置\"><a href=\"#增删改配置\" class=\"headerlink\" title=\"增删改配置\"></a>增删改配置</h3><table>\n<thead>\n<tr>\n<th>功能说明</th>\n<th>参数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>选择类型</td>\n<td>–entity-type (topics/clients/users/brokers/broker- loggers)</td>\n</tr>\n<tr>\n<td>类型名称</td>\n<td>–entity-name</td>\n</tr>\n<tr>\n<td>删除配置</td>\n<td>–delete-config k1=v1,k2=v2</td>\n</tr>\n<tr>\n<td>添加/修改配置</td>\n<td>–add-config k1,k2</td>\n</tr>\n</tbody></table>\n<p>topic添加/修改动态配置</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-configs --bootstrap-server xxxxxx:9092\n--alter --entity-type topics --entity-name topic_name \n--add-config file.delete.delay.ms<span class=\"token operator\">=</span><span class=\"token number\">222222</span>,retention.ms<span class=\"token operator\">=</span><span class=\"token number\">999999</span></code></pre>\n\n<p>topic删除动态配置</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-configs --bootstrap-server xxxxxx:9092 \n--alter --entity-type topics --entity-name topic_name \n--delete-config file.delete.delay.ms,retention.ms</code></pre>\n\n<h3 id=\"持续批量拉取消息\"><a href=\"#持续批量拉取消息\" class=\"headerlink\" title=\"持续批量拉取消息\"></a>持续批量拉取消息</h3><p>单次最大消费10条消息(不加参数意为持续消费)</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-verifiable-consumer --bootstrap-server xxxxxx:9092 \n--group group_name\n--topic topic_name --max-messages <span class=\"token number\">10</span></code></pre>\n\n<h3 id=\"删除指定分区的消息\"><a href=\"#删除指定分区的消息\" class=\"headerlink\" title=\"删除指定分区的消息\"></a>删除指定分区的消息</h3><p>删除指定topic的某个分区的消息删除至offset为1024</p>\n<p>json文件offset-json-file.json</p>\n<pre class=\"language-none\"><code class=\"language-none\">&#123;\n    &quot;partitions&quot;: [\n        &#123;\n            &quot;topic&quot;: &quot;topic_name&quot;,\n            &quot;partition&quot;: 0,\n            &quot;offset&quot;: 1024\n        &#125;\n    ],\n    &quot;version&quot;: 1\n&#125;</code></pre>\n\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-delete-records --bootstrap-server xxxxxx:9092 \n--offset-json-file offset-json-file.json</code></pre>\n\n<h3 id=\"查看Broker磁盘信息\"><a href=\"#查看Broker磁盘信息\" class=\"headerlink\" title=\"查看Broker磁盘信息\"></a>查看Broker磁盘信息</h3><p>查询指定topic磁盘信息</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-log-dirs --bootstrap-server xxxxxx:9090 \n--describe --topic-list topic1,topic2</code></pre>\n\n<p>查询指定Broker磁盘信息</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">kafka-log-dirs --bootstrap-server xxxxxx:9090 \n--describe --topic-list topic1 --broker-list <span class=\"token number\">0</span></code></pre>\n\n<h2 id=\"Hive\"><a href=\"#Hive\" class=\"headerlink\" title=\"Hive\"></a>Hive</h2><h3 id=\"启动类\"><a href=\"#启动类\" class=\"headerlink\" title=\"启动类\"></a>启动类</h3><table>\n<thead>\n<tr>\n<th>功能说明</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>启动hiveserver2服务</td>\n<td>bin/hiveserver2</td>\n</tr>\n<tr>\n<td>启动beeline</td>\n<td>bin/beeline</td>\n</tr>\n<tr>\n<td>连接hiveserver2</td>\n<td>beeline&gt; !connect jdbc:hive2://hadoop102:10000</td>\n</tr>\n<tr>\n<td>metastroe服务</td>\n<td>bin/hive –service metastore</td>\n</tr>\n</tbody></table>\n<p>hive 启动元数据服务（metastore和hiveserver2）和优雅关闭脚本</p>\n<pre class=\"language-none\"><code class=\"language-none\">启动： hive.sh start\n关闭： hive.sh stop\n重启： hive.sh restart\n状态： hive.sh status</code></pre>\n<p>脚本如下</p>\n<pre class=\"language-none\"><code class=\"language-none\">#!&#x2F;bin&#x2F;bash\nHIVE_LOG_DIR&#x3D;$HIVE_HOME&#x2F;logs\n\nmkdir -p $HIVE_LOG_DIR\n\n#检查进程是否运行正常，参数1为进程名，参数2为进程端口\nfunction check_process()\n&#123;\n    pid&#x3D;$(ps -ef 2&gt;&#x2F;dev&#x2F;null | grep -v grep | grep -i $1 | awk &#39;&#123;print $2&#125;&#39;)\n    ppid&#x3D;$(netstat -nltp 2&gt;&#x2F;dev&#x2F;null | grep $2 | awk &#39;&#123;print $7&#125;&#39; | cut -d &#39;&#x2F;&#39; -f 1)\n    echo $pid\n    [[ &quot;$pid&quot; &#x3D;~ &quot;$ppid&quot; ]] &amp;&amp; [ &quot;$ppid&quot; ] &amp;&amp; return 0 || return 1\n&#125;\n\nfunction hive_start()\n&#123;\n    metapid&#x3D;$(check_process HiveMetastore 9083)\n    cmd&#x3D;&quot;nohup hive --service metastore &gt;$HIVE_LOG_DIR&#x2F;metastore.log 2&gt;&amp;1 &amp;&quot;\n    cmd&#x3D;$cmd&quot; sleep4; hdfs dfsadmin -safemode wait &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1&quot;\n    [ -z &quot;$metapid&quot; ] &amp;&amp; eval $cmd || echo &quot;Metastroe服务已启动&quot;\n    server2pid&#x3D;$(check_process HiveServer2 10000)\n    cmd&#x3D;&quot;nohup hive --service hiveserver2 &gt;$HIVE_LOG_DIR&#x2F;hiveServer2.log 2&gt;&amp;1 &amp;&quot;\n    [ -z &quot;$server2pid&quot; ] &amp;&amp; eval $cmd || echo &quot;HiveServer2服务已启动&quot;\n&#125;\n\nfunction hive_stop()\n&#123;\n    metapid&#x3D;$(check_process HiveMetastore 9083)\n    [ &quot;$metapid&quot; ] &amp;&amp; kill $metapid || echo &quot;Metastore服务未启动&quot;\n    server2pid&#x3D;$(check_process HiveServer2 10000)\n    [ &quot;$server2pid&quot; ] &amp;&amp; kill $server2pid || echo &quot;HiveServer2服务未启动&quot;\n&#125;\n\ncase $1 in\n&quot;start&quot;)\n    hive_start\n    ;;\n&quot;stop&quot;)\n    hive_stop\n    ;;\n&quot;restart&quot;)\n    hive_stop\n    sleep 2\n    hive_start\n    ;;\n&quot;status&quot;)\n    check_process HiveMetastore 9083 &gt;&#x2F;dev&#x2F;null &amp;&amp; echo &quot;Metastore服务运行正常&quot; || echo &quot;Metastore服务运行异常&quot;\n    check_process HiveServer2 10000 &gt;&#x2F;dev&#x2F;null &amp;&amp; echo &quot;HiveServer2服务运行正常&quot; || echo &quot;HiveServer2服务运行异常&quot;\n    ;;\n*)\n    echo Invalid Args!\n    echo &#39;Usage: &#39;$(basename $0)&#39; start|stop|restart|status&#39;\n    ;;\nesac</code></pre>\n\n<h3 id=\"常用交互命令\"><a href=\"#常用交互命令\" class=\"headerlink\" title=\"常用交互命令\"></a>常用交互命令</h3><table>\n<thead>\n<tr>\n<th>功能说明</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>不进入hive的交互窗口执行sql</td>\n<td>bin/hive -e “sql语句”</td>\n</tr>\n<tr>\n<td>执行脚本中sql语句</td>\n<td>bin/hive -f hive.sql</td>\n</tr>\n<tr>\n<td>退出hive窗口</td>\n<td>exit 或 quit</td>\n</tr>\n<tr>\n<td>命令窗口中查看hdfs文件系统</td>\n<td>dfs -ls /</td>\n</tr>\n<tr>\n<td>命令窗口中查看hdfs文件系统</td>\n<td>! ls /data/h</td>\n</tr>\n</tbody></table>\n<h3 id=\"SQL类-特殊的\"><a href=\"#SQL类-特殊的\" class=\"headerlink\" title=\"SQL类(特殊的)\"></a>SQL类(特殊的)</h3><table>\n<thead>\n<tr>\n<th>说明</th>\n<th>语句</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查看hive中的所有数据库</td>\n<td>show databases</td>\n</tr>\n<tr>\n<td>用default数据库</td>\n<td>use default</td>\n</tr>\n<tr>\n<td>查询表结构</td>\n<td>desc table_name</td>\n</tr>\n<tr>\n<td>查看数据库</td>\n<td>show databases</td>\n</tr>\n<tr>\n<td>重命名表名</td>\n<td>alter table table1 rename to table2</td>\n</tr>\n<tr>\n<td>修改表中字段</td>\n<td>alter table table_name change name user_name String</td>\n</tr>\n<tr>\n<td>修改字段类型</td>\n<td>alter table table_name change salary salary Double</td>\n</tr>\n<tr>\n<td>创建外部表</td>\n<td>create external table ….</td>\n</tr>\n<tr>\n<td>查询外部表信息</td>\n<td>desc formatted outsidetable</td>\n</tr>\n<tr>\n<td>创建视图</td>\n<td>create view view_name as select * from table_name …..</td>\n</tr>\n<tr>\n<td>添加数据</td>\n<td>load data local inpath ‘xxx’  overwrite into table table_name partition(day=’2021-12-01’)</td>\n</tr>\n</tbody></table>\n<h3 id=\"内置函数\"><a href=\"#内置函数\" class=\"headerlink\" title=\"内置函数\"></a>内置函数</h3><p>（1） NVL</p>\n<p>给值为NULL的数据赋值，它的格式是NVL( value，default_value)。它的功能是如果value为NULL，则NVL函数返回default_value的值，否则返回value的值，如果两个参数都为NULL ，则返回NULL</p>\n<pre class=\"language-none\"><code class=\"language-none\">select nvl(column, 0) from xxx；</code></pre>\n\n<p>（2）行转列</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CONCAT(string A/col, string B/col…)</td>\n<td>返回输入字符串连接后的结果，支持任意个输入字符串</td>\n</tr>\n<tr>\n<td>CONCAT_WS(separator, str1, str2,…)</td>\n<td>第一个参数参数间的分隔符，如果分隔符是 NULL，返回值也将为 NULL。这个函数会跳过分隔符参数后的任何 NULL 和空字符串。分隔符将被加到被连接的字符串之间。</td>\n</tr>\n<tr>\n<td>COLLECT_SET(col)</td>\n<td>将某字段的值进行去重汇总，产生array类型字段</td>\n</tr>\n<tr>\n<td>COLLECT_LIST(col)</td>\n<td>函数只接受基本数据类型，它的主要作用是将某字段的值进行不去重汇总，产生array类型字段。</td>\n</tr>\n</tbody></table>\n<p>（3）列转行(一列转多行)</p>\n<p><strong>Split(str, separator)：</strong> 将字符串按照后面的分隔符切割，转换成字符array。</p>\n<p><strong>EXPLODE(col)：</strong><br>将hive一列中复杂的array或者map结构拆分成多行。</p>\n<p><strong>LATERAL VIEW</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">用法：\n\nLATERAL VIEW udtf(expression) tableAlias AS columnAlias</code></pre>\n<p>解释：lateral view用于和split, explode等UDTF一起使用，它能够将一行数据拆成多行数据，在此基础上可以对拆分后的数据进行聚合。</p>\n<p>lateral view首先为原始表的每行调用UDTF，UDTF会把一行拆分成一或者多行，lateral view再把结果组合，产生一个支持别名表的虚拟表。</p>\n<p><strong>准备数据源测试</strong></p>\n<table>\n<thead>\n<tr>\n<th>movie</th>\n<th>category</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>《功勋》</td>\n<td>记录,剧情</td>\n</tr>\n<tr>\n<td>《战狼2》</td>\n<td>战争,动作,灾难</td>\n</tr>\n</tbody></table>\n<p><strong>SQL</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">SELECT movie,category_name \nFROM movie_info \nlateral VIEW\nexplode(split(category,&quot;,&quot;)) movie_info_tmp  AS category_name ;\n</code></pre>\n\n<p><strong>测试结果</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">《功勋》      记录\n《功勋》      剧情\n《战狼2》     战争\n《战狼2》     动作\n《战狼2》     灾难\n</code></pre>\n\n<h3 id=\"窗口函数\"><a href=\"#窗口函数\" class=\"headerlink\" title=\"窗口函数\"></a>窗口函数</h3><p>（1）OVER()</p>\n<p>定分析函数工作的数据窗口大小，这个数据窗口大小可能会随着行的变而变化。</p>\n<p>（2）CURRENT ROW（当前行）</p>\n<pre class=\"language-none\"><code class=\"language-none\">n PRECEDING：往前n行数据\n\nn FOLLOWING：往后n行数据</code></pre>\n\n<p>（3）UNBOUNDED（无边界）</p>\n<pre class=\"language-none\"><code class=\"language-none\">UNBOUNDED PRECEDING 前无边界，表示从前面的起点\n\nUNBOUNDED FOLLOWING后无边界，表示到后面的终点</code></pre>\n\n<p><strong>SQL案例：由起点到当前行的聚合</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">select \n    sum(money) over(partition by user_id order by pay_time rows between UNBOUNDED PRECEDING and current row) \nfrom or_order;</code></pre>\n\n<p><strong>SQL案例：当前行和前面一行做聚合</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">select \n    sum(money) over(partition by user_id order by pay_time rows between 1 PRECEDING and current row) \nfrom or_order;</code></pre>\n\n<p><strong>SQL案例：当前行和前面一行和后一行做聚合</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">select \n    sum(money) over(partition by user_id order by pay_time rows between 1 PRECEDING AND 1 FOLLOWING )\nfrom or_order;</code></pre>\n\n<p><strong>SQL案例：当前行及后面所有行</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">select \n    sum(money) over(partition by user_id order by pay_time rows between current row and UNBOUNDED FOLLOWING  )\nfrom or_order;</code></pre>\n\n<p>（4）LAG(col,n,default_val)</p>\n<p>往前第n行数据，没有的话default_val</p>\n<p>（5）LEAD(col,n, default_val)</p>\n<p>往后第n行数据，没有的话default_val</p>\n<p><strong>SQL案例：查询用户购买明细以及上次的购买时间和下次购买时间</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">select \n\tuser_id,,pay_time,money,\n\t\n\tlag(pay_time,1,&#39;1970-01-01&#39;) over(PARTITION by name order by pay_time) prev_time,\n\t\n\tlead(pay_time,1,&#39;1970-01-01&#39;) over(PARTITION by name order by pay_time) next_time\nfrom or_order;\n</code></pre>\n\n<p>（6）FIRST_VALUE(col,true/false)</p>\n<p>当前窗口下的第一个值，第二个参数为true，跳过空值。</p>\n<p>（7）LAST_VALUE (col,true/false)</p>\n<p>当前窗口下的最后一个值，第二个参数为true，跳过空值。</p>\n<p><strong>SQL案例：查询用户每个月第一次的购买时间 和 每个月的最后一次购买时间</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">select\n\tFIRST_VALUE(pay_time) \n\t    over(\n\t        partition by user_id,month(pay_time) order by pay_time \n\t        rows between UNBOUNDED PRECEDING and UNBOUNDED FOLLOWING\n\t        ) first_time,\n\t\n\tLAST_VALUE(pay_time) \n\t    over(partition by user_id,month(pay_time) order by pay_time rows between UNBOUNDED PRECEDING and UNBOUNDED FOLLOWING\n\t    ) last_time\nfrom or_order;\n</code></pre>\n\n\n<p>（8）NTILE(n)</p>\n<p>把有序窗口的行分发到指定数据的组中，各个组有编号，编号从1开始，对于每一行，NTILE返回此行所属的组的编号。（用于将分组数据按照顺序切分成n片，返回当前切片值）</p>\n<p><strong>SQL案例：查询前25%时间的订单信息</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">select * from (\n    select User_id,pay_time,money,\n    \n    ntile(4) over(order by pay_time) sorted\n    \n    from or_order\n) t\nwhere sorted &#x3D; 1;\n</code></pre>\n\n<h3 id=\"4个By\"><a href=\"#4个By\" class=\"headerlink\" title=\"4个By\"></a>4个By</h3><p>（1）Order By</p>\n<p>全局排序，只有一个Reducer。</p>\n<p>（2）Sort By</p>\n<p>分区内有序。</p>\n<p>（3）Distrbute By</p>\n<p>类似MR中Partition，进行分区，结合sort by使用。</p>\n<p>（4） Cluster By</p>\n<p>当Distribute by和Sorts by字段相同时，可以使用Cluster by方式。Cluster by除了具有Distribute by的功能外还兼具Sort by的功能。但是排序只能是升序排序，不能指定排序规则为ASC或者DESC。</p>\n<p>在生产环境中Order By用的比较少，容易导致OOM。</p>\n<p>在生产环境中Sort By+ Distrbute By用的多。</p>\n<h3 id=\"排序函数\"><a href=\"#排序函数\" class=\"headerlink\" title=\"排序函数\"></a>排序函数</h3><p>（1）RANK() </p>\n<p>排序相同时会重复，总数不会变</p>\n<pre class=\"language-none\"><code class=\"language-none\">1\n1\n3\n3\n5</code></pre>\n<p>（2）DENSE_RANK() </p>\n<p>排序相同时会重复，总数会减少</p>\n<pre class=\"language-none\"><code class=\"language-none\">1\n1\n2\n2\n3</code></pre>\n<p>（3）ROW_NUMBER()</p>\n<p>会根据顺序计算</p>\n<pre class=\"language-none\"><code class=\"language-none\">1\n2\n3\n4\n5</code></pre>\n\n<h3 id=\"日期函数\"><a href=\"#日期函数\" class=\"headerlink\" title=\"日期函数\"></a>日期函数</h3><p>datediff：返回结束日期减去开始日期的天数</p>\n<pre class=\"language-none\"><code class=\"language-none\">datediff(string enddate, string startdate) \n\nselect datediff(&#39;2021-11-20&#39;,&#39;2021-11-22&#39;) </code></pre>\n\n<p>date_add：返回开始日期startdate增加days天后的日期</p>\n<pre class=\"language-none\"><code class=\"language-none\">date_add(string startdate, int days) \n\nselect date_add(&#39;2021-11-20&#39;,3) </code></pre>\n<p>date_sub：返回开始日期startdate减少days天后的日期</p>\n<pre class=\"language-none\"><code class=\"language-none\">date_sub (string startdate, int days) \n\nselect date_sub(&#39;2021-11-22&#39;,3)</code></pre>\n\n<h2 id=\"Impala-时间处理，可类比到hive可用\"><a href=\"#Impala-时间处理，可类比到hive可用\" class=\"headerlink\" title=\"Impala(时间处理，可类比到hive可用)\"></a>Impala(时间处理，可类比到hive可用)</h2><h3 id=\"1-获取当前时间\"><a href=\"#1-获取当前时间\" class=\"headerlink\" title=\"1. 获取当前时间\"></a>1. 获取当前时间</h3><p>timestamp 样式2021-12-10 04:36:48.147046000</p>\n<p>bigint 样式 1639110956</p>\n<table>\n<thead>\n<tr>\n<th>函数/方法</th>\n<th>输出类型</th>\n<th>说明/样式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>current_timestamp()</td>\n<td>timestamp</td>\n<td>所在时区的当前时间</td>\n</tr>\n<tr>\n<td>now()</td>\n<td>timestamp</td>\n<td>所在时区的当前时间</td>\n</tr>\n<tr>\n<td>unix_timestamp()</td>\n<td>bigint</td>\n<td>所在时区的当前时间戳</td>\n</tr>\n<tr>\n<td>utc_timestamp</td>\n<td>timestamp</td>\n<td>UTC时区的当前时间</td>\n</tr>\n<tr>\n<td>timeofday()</td>\n<td>string</td>\n<td>Fri Dec 10 12:39:46 2021 CST</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-获取时间指定单位函数\"><a href=\"#2-获取时间指定单位函数\" class=\"headerlink\" title=\"2. 获取时间指定单位函数\"></a>2. 获取时间指定单位函数</h3><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>函数/方法</th>\n<th>输出类型</th>\n<th>说明/样式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>year(timestamp/date)</td>\n<td>int</td>\n<td>获取年 yyyy</td>\n</tr>\n<tr>\n<td>2</td>\n<td>quarter(timestamp/date)</td>\n<td>int</td>\n<td>获取季节（1,2,3,4）</td>\n</tr>\n<tr>\n<td>3</td>\n<td>month(timestamp/date)</td>\n<td>int</td>\n<td>获取月</td>\n</tr>\n<tr>\n<td>4</td>\n<td>monthname(timestamp/date)</td>\n<td>string</td>\n<td>获取月份名称 December</td>\n</tr>\n<tr>\n<td>5</td>\n<td>week(timestamp/date)</td>\n<td>int</td>\n<td>获取周（1-53）</td>\n</tr>\n<tr>\n<td>6</td>\n<td>weekofyear(timestamp/date)</td>\n<td>int</td>\n<td>获取周（1-53）</td>\n</tr>\n<tr>\n<td>7</td>\n<td>dayofweek(timestamp/date)</td>\n<td>int</td>\n<td>获取天（本周第多少天,周日算第一天）</td>\n</tr>\n<tr>\n<td>8</td>\n<td>dayname(timestamp/date)</td>\n<td>string</td>\n<td>获取天（星期几）Friday</td>\n</tr>\n<tr>\n<td>9</td>\n<td>next_day(timestamp/date, 10</td>\n<td>day(string))</td>\n<td>timestamp/date</td>\n</tr>\n<tr>\n<td>11</td>\n<td>day(timestamp/date)</td>\n<td>int</td>\n<td>获取天（本月第多少天）</td>\n</tr>\n<tr>\n<td>12</td>\n<td>dayofmonth(timestamp/date)</td>\n<td>int</td>\n<td>获取天（本月第多少天）</td>\n</tr>\n<tr>\n<td>13</td>\n<td>last_day(timestamp/date)</td>\n<td>timestamp/date</td>\n<td>获取天（本月的最后一天日期）</td>\n</tr>\n<tr>\n<td>14</td>\n<td>dayofyear(timestamp/date)</td>\n<td>int</td>\n<td>获取天（本年第多少天）</td>\n</tr>\n<tr>\n<td>15</td>\n<td>hour(timestamp/date)</td>\n<td>int</td>\n<td>获取小时</td>\n</tr>\n<tr>\n<td>16</td>\n<td>minute(timestamp date)</td>\n<td>int</td>\n<td>获取分钟</td>\n</tr>\n<tr>\n<td>17</td>\n<td>second(timestamp date)</td>\n<td>int</td>\n<td>获取秒</td>\n</tr>\n<tr>\n<td>18</td>\n<td>millisecond(timestamp date)</td>\n<td>int</td>\n<td>获取毫秒</td>\n</tr>\n<tr>\n<td>19</td>\n<td>extract (YEAR FROM timestamp)</td>\n<td>bigint</td>\n<td>获取参数指定的时间单位 YEAR MONTH DAY  HOUR MINUTE SECOND</td>\n</tr>\n<tr>\n<td>20</td>\n<td>date_part(‘year’,timestamp)</td>\n<td>bigint</td>\n<td>获取参数指定的时间单位 YEAR MONTH DAY  HOUR MINUTE SECOND</td>\n</tr>\n<tr>\n<td>21</td>\n<td>trunc(timestamp/date,unit)</td>\n<td>timestamp/date</td>\n<td>获取截断为指定单位的时间</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>unit</th>\n<th>截取说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SYYYY，YYYY，YEAR，SYEAR，YYY，YY，Y</td>\n<td>年</td>\n</tr>\n<tr>\n<td>Q</td>\n<td>季节</td>\n</tr>\n<tr>\n<td>MONTH，MON，MM，RM</td>\n<td>月</td>\n</tr>\n<tr>\n<td>WW</td>\n<td>最近的日期是与一年中的第一天相同的日期</td>\n</tr>\n<tr>\n<td>W</td>\n<td>最近的日期是与该月的第一天相同的星期几</td>\n</tr>\n<tr>\n<td>DDD，DD，J</td>\n<td>天</td>\n</tr>\n<tr>\n<td>DAY，DY，D</td>\n<td>星期几（星期一）的开始</td>\n</tr>\n<tr>\n<td>HH，HH12，HH24</td>\n<td>小时</td>\n</tr>\n<tr>\n<td>MI</td>\n<td>分钟</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-时间比较函数\"><a href=\"#3-时间比较函数\" class=\"headerlink\" title=\"3. 时间比较函数\"></a>3. 时间比较函数</h3><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>函数/方法</th>\n<th>输出类型</th>\n<th>说明/样式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>datediff(timestamp enddate,startdate)</td>\n<td>int</td>\n<td>返回endDate比startDate多多少天</td>\n</tr>\n<tr>\n<td>2</td>\n<td>int_months_between(timestamp t1,t2)</td>\n<td>int</td>\n<td>返回两个日期相差的整数月份个数</td>\n</tr>\n<tr>\n<td>3</td>\n<td>months_between(timestamp t1,t2)</td>\n<td>double</td>\n<td>返回浮点数的月数相差的数</td>\n</tr>\n<tr>\n<td>4</td>\n<td>date_cmp(DATE date1, DATE date2)</td>\n<td>int</td>\n<td>比较是否相等，返回-1,0,1,null四种数值</td>\n</tr>\n<tr>\n<td>5</td>\n<td>timestamp_cmp(timestamp t1，timestamp t2)</td>\n<td>int</td>\n<td>比较是否相等，返回-1,0,1,null四种数值</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-时间格式转换函数\"><a href=\"#4-时间格式转换函数\" class=\"headerlink\" title=\"4. 时间格式转换函数\"></a>4. 时间格式转换函数</h3><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>函数/方法</th>\n<th>输出类型</th>\n<th>说明/样式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>to_date(timestamp date)</td>\n<td>string</td>\n<td>返回时间戳对应的date</td>\n</tr>\n<tr>\n<td>2</td>\n<td>to_timestamp(bigint unixtime)</td>\n<td>timestamp</td>\n<td>返回整数对应的timestamp值</td>\n</tr>\n<tr>\n<td>3</td>\n<td>to_timestamp(string date，string pattern)</td>\n<td>timestamp</td>\n<td>返回字符串对应的timestamp值</td>\n</tr>\n<tr>\n<td>4</td>\n<td>to_utc_timestamp(timestamp t，string timezone)</td>\n<td>timestamp</td>\n<td>指定时区的时间戳转化为UTC时区的时间戳</td>\n</tr>\n<tr>\n<td>5</td>\n<td>from_timestamp(timestamp t，string pattern)</td>\n<td>string</td>\n<td>把timestamp按照pattern进行格式化</td>\n</tr>\n<tr>\n<td>6</td>\n<td>from_timestamp(string date，string pattern)</td>\n<td>string</td>\n<td>把date按照pattern进行格式化</td>\n</tr>\n<tr>\n<td>7</td>\n<td>from_unixtime(bigint unixtime)</td>\n<td>string</td>\n<td>把时间戳秒数转化为本地地区中的字符串</td>\n</tr>\n<tr>\n<td>8</td>\n<td>from_unixtime(bigint unixtime，string pattern）</td>\n<td>string</td>\n<td>时间戳转化为本地时区字符串，pattern格式</td>\n</tr>\n<tr>\n<td>9</td>\n<td>from_utc_timestamp（timestamp t，string timezone）</td>\n<td>timestamp</td>\n<td>UTC时区指定时间戳转化为指定时区时间戳</td>\n</tr>\n<tr>\n<td>10</td>\n<td>unix_timestamp(string datetime)</td>\n<td>bigint</td>\n<td>把string类型的date或日期转化成时间戳Unix</td>\n</tr>\n<tr>\n<td>11</td>\n<td>unix_timestamp(timestamp datetime)</td>\n<td>bigint</td>\n<td>把string类型的timestamp转化成时间戳Unix</td>\n</tr>\n<tr>\n<td>12</td>\n<td>unix_timestamp(string datetime，string pattern)</td>\n<td>bigint</td>\n<td>日期按pattern转化成时间戳Unix</td>\n</tr>\n</tbody></table>\n<h3 id=\"5-时间计算函数\"><a href=\"#5-时间计算函数\" class=\"headerlink\" title=\"5. 时间计算函数\"></a>5. 时间计算函数</h3><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>函数/方法</th>\n<th>输出类型</th>\n<th>说明/样式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>years_add(timestamp/date date, int/bigint years)</td>\n<td>timestamp/date</td>\n<td>增加指定年数</td>\n</tr>\n<tr>\n<td>2</td>\n<td>years_sub(timestamp/date date, int/bigint years)</td>\n<td>timestamp/date</td>\n<td>减少指定年数</td>\n</tr>\n<tr>\n<td>3</td>\n<td>months_add(timestamp/date date, int/bigint months)</td>\n<td>timestamp/date</td>\n<td>增加指定月数</td>\n</tr>\n<tr>\n<td>4</td>\n<td>months_sub(timestamp/date date, int/bigint months)</td>\n<td>timestamp/date</td>\n<td>减少指定月数</td>\n</tr>\n<tr>\n<td>5</td>\n<td>add_months(timestamp/date date, int/bigint months)</td>\n<td>timestamp/date</td>\n<td>增加指定月数</td>\n</tr>\n<tr>\n<td>6</td>\n<td>weeks_add(timestamp/date date, int/bigint weeks)</td>\n<td>timestamp/date</td>\n<td>增加指定周数</td>\n</tr>\n<tr>\n<td>7</td>\n<td>weeks_sub(timestamp/date date, int/bigint weeks)</td>\n<td>timestamp/date</td>\n<td>减少指定周数</td>\n</tr>\n<tr>\n<td>8</td>\n<td>days_add(timestamp/date startdate, int/bigint days)</td>\n<td>timestamp/date</td>\n<td>增加指定天数</td>\n</tr>\n<tr>\n<td>9</td>\n<td>days_sub(timestamp/date startdate, int/bigint days)</td>\n<td>timestamp/date</td>\n<td>减少指定天数</td>\n</tr>\n<tr>\n<td>10</td>\n<td>date_add(timestamp/date startdate, int/bigint days)</td>\n<td>timestamp/date</td>\n<td>增加指定天数</td>\n</tr>\n<tr>\n<td>11</td>\n<td>date_sub(timestamp/date startdate, int/bigint days)</td>\n<td>timestamp/date</td>\n<td>减少指定天数</td>\n</tr>\n<tr>\n<td>12</td>\n<td>adddate(timestamp/date startdate, int/int days)</td>\n<td>timestamp/date</td>\n<td>增加指定天数</td>\n</tr>\n<tr>\n<td>13</td>\n<td>subdate(timestamp/date startdate，bigint/int days)</td>\n<td>timestamp/date</td>\n<td>减少指定天数</td>\n</tr>\n<tr>\n<td>14</td>\n<td>hours_add(timestamp date, int/bigint hours)</td>\n<td>timestamp</td>\n<td>增加指定小时</td>\n</tr>\n<tr>\n<td>15</td>\n<td>hours_sub(timestamp date, int/bigint hours)</td>\n<td>timestamp</td>\n<td>减少指定小时</td>\n</tr>\n<tr>\n<td>16</td>\n<td>minutes_add(timestamp date, int/bigint minutes)</td>\n<td>timestamp</td>\n<td>增加指定分钟</td>\n</tr>\n<tr>\n<td>17</td>\n<td>minutes_sub(timestamp date, int/bigint minutes)</td>\n<td>timestamp</td>\n<td>减少指定分钟</td>\n</tr>\n<tr>\n<td>18</td>\n<td>seconds_add(timestamp date, int/bigint seconds)</td>\n<td>timestamp</td>\n<td>增加指定秒数</td>\n</tr>\n<tr>\n<td>19</td>\n<td>seconds_sub(timestamp date, int/bigint seconds)</td>\n<td>timestamp</td>\n<td>减少指定秒数</td>\n</tr>\n<tr>\n<td>20</td>\n<td>milliseconds_add(timestamp t, int/bigint s）</td>\n<td>timestamp</td>\n<td>增加指定毫秒数</td>\n</tr>\n<tr>\n<td>21</td>\n<td>milliseconds_sub(timestamp t, int/bigint s）</td>\n<td>timestamp</td>\n<td>减少指定毫秒数</td>\n</tr>\n<tr>\n<td>22</td>\n<td>microseconds_add(timestamp t, int/bigint s)</td>\n<td>timestamp</td>\n<td>增加指定微秒数</td>\n</tr>\n<tr>\n<td>23</td>\n<td>microseconds_sub(timestamp t, int/bigint s)</td>\n<td>timestamp</td>\n<td>减少指定微秒数</td>\n</tr>\n<tr>\n<td>24</td>\n<td>nanoseconds_add(timestamp t, int/bigint s）</td>\n<td>timestamp</td>\n<td>增加指定纳秒数</td>\n</tr>\n<tr>\n<td>25</td>\n<td>nanoseconds_sub(timestamp t, int/bigint s）</td>\n<td>timestamp</td>\n<td>减少指定纳秒数</td>\n</tr>\n<tr>\n<td>26</td>\n<td>date_add(timestamp/date startdate, interval_expression)</td>\n<td>timestamp/date</td>\n<td>使用参数计算日期增量值（增加）</td>\n</tr>\n<tr>\n<td>27</td>\n<td>date_sub(timestamp/date startdate, interval_expression)</td>\n<td>timestamp/date</td>\n<td>使用参数计算日期增量值（减少）</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h2><h3 id=\"启动类-1\"><a href=\"#启动类-1\" class=\"headerlink\" title=\"启动类\"></a>启动类</h3><h3 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>keys  *</td>\n<td>查看当前库的所有键</td>\n</tr>\n<tr>\n<td>exists <key></td>\n<td>判断某个键是否存在</td>\n</tr>\n<tr>\n<td>type <key></td>\n<td>查看键的类型</td>\n</tr>\n<tr>\n<td>del <key></td>\n<td>删除某个键</td>\n</tr>\n<tr>\n<td>expire <key> <seconds></td>\n<td>为键值设置过期时间，单位秒</td>\n</tr>\n<tr>\n<td>ttl <key></td>\n<td>查看还有多久过期,-1表示永不过期,-2表示已过期</td>\n</tr>\n<tr>\n<td>dbsize</td>\n<td>查看当前数据库中key的数量</td>\n</tr>\n<tr>\n<td>flushdb</td>\n<td>清空当前库</td>\n</tr>\n<tr>\n<td>Flushall</td>\n<td>通杀全部库</td>\n</tr>\n</tbody></table>\n<h3 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>get <key></td>\n<td>查询对应键值</td>\n</tr>\n<tr>\n<td>set <key> <value></td>\n<td>添加键值对</td>\n</tr>\n<tr>\n<td>append <key> <value></td>\n<td>将给定的<value>追加到原值的末尾</td>\n</tr>\n<tr>\n<td>strlen <key></td>\n<td>获取值的长度</td>\n</tr>\n<tr>\n<td>setnx <key> <value></td>\n<td>只有在key 不存在时设置key的值</td>\n</tr>\n<tr>\n<td>incr <key></td>\n<td>将key中存储的数字值增1只能对数字值操作，如果为空，新增值为1</td>\n</tr>\n<tr>\n<td>decr <key></td>\n<td>将key中存储的数字值减1只能对数字之操作，如果为空,新增值为-1</td>\n</tr>\n<tr>\n<td>incrby /decrby <key> 步长</td>\n<td>将key中存储的数字值增减，自定义步长</td>\n</tr>\n<tr>\n<td>mset <key1> <value1> <key2> <value2></td>\n<td>同时设置一个或多个key-value对</td>\n</tr>\n<tr>\n<td>mget <key1> <key2>  <key3></td>\n<td>同时获取一个或多个value</td>\n</tr>\n<tr>\n<td>msetnx <key1> <value1> <key2> <value2></td>\n<td>同时设置一个或多个key-value对，当且仅当所有给定的key都不存在</td>\n</tr>\n<tr>\n<td>getrange <key> &lt;起始位置&gt; &lt;结束位置&gt;</td>\n<td>获得值的范围,类似java中的substring</td>\n</tr>\n<tr>\n<td>setrange <key> &lt;起始位置&gt; <value></td>\n<td>用<value>覆盖<key>所存储的字符串值，从&lt;起始位置&gt;开始</td>\n</tr>\n<tr>\n<td>setex <key> &lt;过期时间&gt; <value></td>\n<td>设置键值的同时，设置过去时间，单位秒</td>\n</tr>\n<tr>\n<td>getset <key> <value></td>\n<td>以新换旧,设置了新值的同时获取旧值</td>\n</tr>\n</tbody></table>\n<h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>lpush/rpush  <key>  <value1>  <value2></td>\n<td>从左边/右边插入一个或多个值。</td>\n</tr>\n<tr>\n<td>lpop/rpop  <key></td>\n<td>从左边/右边吐出一个值。值在键在，值光键亡。</td>\n</tr>\n<tr>\n<td>rpoplpush  <key1>  <key2></td>\n<td>从<key1>列表右边吐出一个值，插到<key2>列表左边</td>\n</tr>\n<tr>\n<td>lrange <key> <start> <stop></td>\n<td>按照索引下标获得元素(从左到右)</td>\n</tr>\n<tr>\n<td>lindex <key> <index></td>\n<td>按照索引下标获得元素(从左到右)</td>\n</tr>\n<tr>\n<td>llen <key></td>\n<td>获得列表长度</td>\n</tr>\n<tr>\n<td>linsert <key>  before <value>  <newvalue></td>\n<td>在<value>的后面插入<newvalue> 插入值</td>\n</tr>\n<tr>\n<td>lrem <key> <n>  <value></td>\n<td>从左边删除n个value(从左到右)</td>\n</tr>\n</tbody></table>\n<h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sadd <key>  <value1>  <value2> ….</td>\n<td>将一个或多个 member 元素加入到集合 key 当中，已经存在于集合的 member 元素将被忽略。</td>\n</tr>\n<tr>\n<td>smembers <key></td>\n<td>取出该集合的所有值。</td>\n</tr>\n<tr>\n<td>sismember <key>  <value></td>\n<td>判断集合<key>是否为含有该<value>值，有返回1，没有返回0</td>\n</tr>\n<tr>\n<td>scard  <key></td>\n<td>返回该集合的元素个数。</td>\n</tr>\n<tr>\n<td>srem <key> <value1> <value2> ….</td>\n<td>删除集合中的某个元素。</td>\n</tr>\n<tr>\n<td>spop <key></td>\n<td>随机从该集合中吐出一个值。</td>\n</tr>\n<tr>\n<td>srandmember <key> <n></td>\n<td>随机从该集合中取出n个值。不会从集合中删除</td>\n</tr>\n<tr>\n<td>sinter <key1> <key2></td>\n<td>返回两个集合的交集元素。</td>\n</tr>\n<tr>\n<td>sunion <key1> <key2></td>\n<td>返回两个集合的并集元素。</td>\n</tr>\n<tr>\n<td>sdiff <key1> <key2></td>\n<td>返回两个集合的差集元素。</td>\n</tr>\n</tbody></table>\n<h3 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hset <key>  <field>  <value></td>\n<td>给<key>集合中的  <field>键赋值<value></td>\n</tr>\n<tr>\n<td>hget <key1>  <field></td>\n<td>从<key1>集合<field> 取出 value</td>\n</tr>\n<tr>\n<td>hmset <key1>  <field1> <value1> <field2> <value2>…</td>\n<td>批量设置hash的值</td>\n</tr>\n<tr>\n<td>hexists key  <field></td>\n<td>查看哈希表 key 中，给定域 field 是否存在。</td>\n</tr>\n<tr>\n<td>hkeys <key></td>\n<td>列出该hash集合的所有field</td>\n</tr>\n<tr>\n<td>hvals <key></td>\n<td>列出该hash集合的所有value</td>\n</tr>\n<tr>\n<td>hincrby <key> <field>  <increment></td>\n<td>为哈希表 key 中的域 field 的值加上增量 increment</td>\n</tr>\n<tr>\n<td>hsetnx <key>  <field> <value></td>\n<td>将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在</td>\n</tr>\n</tbody></table>\n<h3 id=\"zset-Sorted-set\"><a href=\"#zset-Sorted-set\" class=\"headerlink\" title=\"zset(Sorted set)\"></a>zset(Sorted set)</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>zadd  <key> <score1> <value1>  <score2> <value2>…</td>\n<td>将一个或多个 member 元素及其 score 值加入到有序集 key 当中</td>\n</tr>\n<tr>\n<td>zrange <key>  <start> <stop>  [WITHSCORES]</td>\n<td>返回有序集 key 中，下标在<start> <stop>之间的元素带WITHSCORES，可以让分数一起和值返回到结果集。</td>\n</tr>\n<tr>\n<td>zrangebyscore key min max [withscores] [limit offset count]</td>\n<td>返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。</td>\n</tr>\n<tr>\n<td>zrevrangebyscore key max min [withscores] [limit offset count]</td>\n<td>同上，改为从大到小排列。</td>\n</tr>\n<tr>\n<td>zincrby <key> <increment> <value></td>\n<td>为元素的score加上增量</td>\n</tr>\n<tr>\n<td>zrem  <key>  <value></td>\n<td>删除该集合下，指定值的元素</td>\n</tr>\n<tr>\n<td>zcount <key>  <min>  <max></td>\n<td>统计该集合，分数区间内的元素个数</td>\n</tr>\n<tr>\n<td>zrank <key>  <value></td>\n<td>返回该值在集合中的排名，从0开始。</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"Flink\"><a href=\"#Flink\" class=\"headerlink\" title=\"Flink\"></a>Flink</h2><h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><pre class=\"language-none\"><code class=\"language-none\">.&#x2F;start-cluster.sh </code></pre>\n\n<h3 id=\"run\"><a href=\"#run\" class=\"headerlink\" title=\"run\"></a>run</h3><pre class=\"language-none\"><code class=\"language-none\">.&#x2F;bin&#x2F;flink run [OPTIONS]\n\n.&#x2F;bin&#x2F;flink run -m yarn-cluster -c com.wang.flink.WordCount &#x2F;opt&#x2F;app&#x2F;WordCount.jar</code></pre>\n\n<table>\n<thead>\n<tr>\n<th>OPTIONS</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-d</td>\n<td>detached 是否使用分离模式</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>jobmanager 指定提交的jobmanager</td>\n</tr>\n<tr>\n<td>-yat</td>\n<td>–yarnapplicationType 设置yarn应用的类型</td>\n</tr>\n<tr>\n<td>-yD</td>\n<td>使用给定属性的值</td>\n</tr>\n<tr>\n<td>-yd</td>\n<td>–yarndetached 使用yarn分离模式</td>\n</tr>\n<tr>\n<td>-yh</td>\n<td>–yarnhelp yarn session的帮助</td>\n</tr>\n<tr>\n<td>-yid</td>\n<td>–yarnapplicationId 挂到正在运行的yarnsession上</td>\n</tr>\n<tr>\n<td>-yj</td>\n<td>–yarnjar Flink jar文件的路径</td>\n</tr>\n<tr>\n<td>-yjm</td>\n<td>–yarnjobManagerMemory jobmanager的内存(单位M)</td>\n</tr>\n<tr>\n<td>-ynl</td>\n<td>–yarnnodeLabel 指定 YARN 应用程序 YARN 节点标签</td>\n</tr>\n<tr>\n<td>-ynm</td>\n<td>–yarnname 自定义yarn应用名称</td>\n</tr>\n<tr>\n<td>-yq</td>\n<td>–yarnquery 显示yarn的可用资源</td>\n</tr>\n<tr>\n<td>-yqu</td>\n<td>–yarnqueue 指定yarn队列</td>\n</tr>\n<tr>\n<td>-ys</td>\n<td>–yarnslots 指定每个taskmanager的slots数</td>\n</tr>\n<tr>\n<td>-yt</td>\n<td>yarnship 在指定目录中传输文件</td>\n</tr>\n<tr>\n<td>-ytm</td>\n<td>–yarntaskManagerMemory 每个taskmanager的内存</td>\n</tr>\n<tr>\n<td>-yz</td>\n<td>–yarnzookeeperNamespace 用来创建ha的zk子路径的命名空间</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>–zookeeperNamespace 用来创建ha的zk子路径的命名空间</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>并行度</td>\n</tr>\n<tr>\n<td>-yn</td>\n<td>需要分配的YARN容器个数(=任务管理器的数量)</td>\n</tr>\n</tbody></table>\n<h3 id=\"info\"><a href=\"#info\" class=\"headerlink\" title=\"info\"></a>info</h3><pre class=\"language-none\"><code class=\"language-none\">.&#x2F;bin&#x2F;flink info [OPTIONS]</code></pre>\n<table>\n<thead>\n<tr>\n<th>OPTIONS</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-c</td>\n<td>程序进入点，主类</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>并行度</td>\n</tr>\n</tbody></table>\n<h3 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h3><pre class=\"language-none\"><code class=\"language-none\">.&#x2F;bin&#x2F;flink list [OPTIONS]</code></pre>\n<table>\n<thead>\n<tr>\n<th>OPTIONS</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-a</td>\n<td>–all 显示所有应用和对应的job id</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>–running 显示正在运行的应用和job id</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>–scheduled 显示调度的应用和job id</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>–jobmanager 指定连接的jobmanager</td>\n</tr>\n<tr>\n<td>-yid</td>\n<td>–yarnapplicationId 挂到指定的yarn id对应的yarn session上</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>–zookeeperNamespace 用来创建ha的zk子路径的命名空间</td>\n</tr>\n</tbody></table>\n<h3 id=\"stop\"><a href=\"#stop\" class=\"headerlink\" title=\"stop\"></a>stop</h3><pre class=\"language-none\"><code class=\"language-none\">.&#x2F;bin&#x2F;flink stop  [OPTIONS] &lt;Job ID&gt;</code></pre>\n<table>\n<thead>\n<tr>\n<th>OPTIONS</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-d</td>\n<td>在采取保存点和停止管道之前，发送MAX_WATERMARK</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>savepointPath 保存点的路径 ‘xxxxx’</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>–jobmanager 指定连接的jobmanager</td>\n</tr>\n<tr>\n<td>-yid</td>\n<td>–yarnapplicationId 挂到指定的yarn id对应的yarn session上</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>–zookeeperNamespace 用来创建ha的zk子路径的命名空间</td>\n</tr>\n</tbody></table>\n<h3 id=\"cancel-弱化\"><a href=\"#cancel-弱化\" class=\"headerlink\" title=\"cancel(弱化)\"></a>cancel(弱化)</h3><pre class=\"language-none\"><code class=\"language-none\">.&#x2F;bin&#x2F;flink cancel  [OPTIONS] &lt;Job ID&gt;</code></pre>\n<table>\n<thead>\n<tr>\n<th>OPTIONS</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-s</td>\n<td>使用 “stop “代替</td>\n</tr>\n<tr>\n<td>-D</td>\n<td>允许指定多个通用配置选项</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>要连接的JobManager的地址</td>\n</tr>\n<tr>\n<td>-yid</td>\n<td>–yarnapplicationId 挂到指定的yarn id对应的yarn session上</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>–zookeeperNamespace 用来创建ha的zk子路径的命名空间</td>\n</tr>\n</tbody></table>\n<h3 id=\"savepoint\"><a href=\"#savepoint\" class=\"headerlink\" title=\"savepoint\"></a>savepoint</h3><pre class=\"language-none\"><code class=\"language-none\">.&#x2F;bin&#x2F;flink savepoint  [OPTIONS] &lt;Job ID&gt;</code></pre>\n<table>\n<thead>\n<tr>\n<th>OPTIONS</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-d</td>\n<td>要处理的保存点的路径</td>\n</tr>\n<tr>\n<td>-j</td>\n<td>Flink程序的JAR文件</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>要连接的JobManager的地址</td>\n</tr>\n<tr>\n<td>-yid</td>\n<td>–yarnapplicationId 挂到指定的yarn id对应的yarn session上</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>–zookeeperNamespace 用来创建ha的zk子路径的命名空间</td>\n</tr>\n</tbody></table>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckyv8edwm000638qh1u1a1e22","category_id":"ckyv8edwi000338qh8uk55hh2","_id":"ckyv8edws000b38qhbllfcc2k"},{"post_id":"ckyv8edwd000138qh3sq64v31","category_id":"ckyv8edwi000338qh8uk55hh2","_id":"ckyv8edwt000e38qhgoumaol4"},{"post_id":"ckyv8edwq000a38qhdouaa7o2","category_id":"ckyv8edwi000338qh8uk55hh2","_id":"ckyv8edwu000g38qh80gwez3y"},{"post_id":"ckyv8edwg000238qhfwfqemp0","category_id":"ckyv8edwo000838qhfvfvaytf","_id":"ckyv8edwv000j38qh87ikgvqr"},{"post_id":"ckyv8edwo000738qha4tg07nk","category_id":"ckyv8edws000c38qh1vhv7iu4","_id":"ckyv8edwv000l38qh88qrasb4"},{"post_id":"ckyv8edy8000v38qh6s0p44ne","category_id":"ckyv8edy9000w38qhakil940b","_id":"ckyv8edya000z38qheblt5zo4"}],"PostTag":[{"post_id":"ckyv8edwd000138qh3sq64v31","tag_id":"ckyv8edwk000438qh9qll6v3d","_id":"ckyv8edwt000f38qhf6gn1kfr"},{"post_id":"ckyv8edwd000138qh3sq64v31","tag_id":"ckyv8edwp000938qh6mar2phd","_id":"ckyv8edwu000h38qhdyrp2x1n"},{"post_id":"ckyv8edwg000238qhfwfqemp0","tag_id":"ckyv8edwt000d38qhbf1z1b21","_id":"ckyv8edwv000k38qh2boz3tze"},{"post_id":"ckyv8edwm000638qh1u1a1e22","tag_id":"ckyv8edwu000i38qhdgzz7cbk","_id":"ckyv8edwx000o38qhdk6jcqj8"},{"post_id":"ckyv8edwm000638qh1u1a1e22","tag_id":"ckyv8edwv000m38qhfq8f26gj","_id":"ckyv8edwx000p38qh46b62w2d"},{"post_id":"ckyv8edwo000738qha4tg07nk","tag_id":"ckyv8edww000n38qhekx06urn","_id":"ckyv8edwz000r38qh3ewo1dqw"},{"post_id":"ckyv8edwq000a38qhdouaa7o2","tag_id":"ckyv8edwu000i38qhdgzz7cbk","_id":"ckyv8edx0000t38qhgfqmelfz"},{"post_id":"ckyv8edwq000a38qhdouaa7o2","tag_id":"ckyv8edx0000s38qh5yo20xu8","_id":"ckyv8edx0000u38qhe09j11ru"},{"post_id":"ckyv8edy8000v38qh6s0p44ne","tag_id":"ckyv8edya000x38qh1hj6ea5e","_id":"ckyv8edya000y38qh29vkdspc"}],"Tag":[{"name":"flink","_id":"ckyv8edwk000438qh9qll6v3d"},{"name":"cdc","_id":"ckyv8edwp000938qh6mar2phd"},{"name":"博客","_id":"ckyv8edwt000d38qhbf1z1b21"},{"name":"数据仓库","_id":"ckyv8edwu000i38qhdgzz7cbk"},{"name":"数仓技术栈","_id":"ckyv8edwv000m38qhfq8f26gj"},{"name":"数仓","_id":"ckyv8edww000n38qhekx06urn"},{"name":"维度建模","_id":"ckyv8edx0000s38qh5yo20xu8"},{"name":"linux","_id":"ckyv8edya000x38qh1hj6ea5e"}]}}